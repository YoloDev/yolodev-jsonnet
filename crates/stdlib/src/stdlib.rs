//! Generated file, do not edit by hand, see `xtask/src/codegen`

pub(crate) fn get() -> ::jsonnet_core_lang::CoreExpr {
  use jsonnet_core_lang::*;
  {
    mod token_fns {
      use jsonnet_core_lang::*;
      pub(super) fn get_000001() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_000003() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_000004() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_000007() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_000006() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000007()))
      }
      pub(super) fn get_000008() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_000005() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_000006(),
          )],
          get_000008(),
        ))
      }
      pub(super) fn get_000011() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_000010() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000011()))
      }
      pub(super) fn get_000013() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_000012() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000013()))
      }
      pub(super) fn get_000017() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000019() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000020() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000018() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000019(),
          CoreBinaryOperator::And(None),
          get_000020(),
        ))
      }
      pub(super) fn get_000016() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000017(),
          CoreBinaryOperator::GreaterThan(None),
          get_000018(),
        ))
      }
      pub(super) fn get_000021() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_000015() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000016(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_000021(),
        ))
      }
      pub(super) fn get_000025() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000026() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000024() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000025(), get_000026()))
      }
      pub(super) fn get_000027() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_000023() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000024(),
          vec![get_000027()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000031() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000032() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000030() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000031(), get_000032()))
      }
      pub(super) fn get_000033() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_000029() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000030(),
          vec![get_000033()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000037() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000038() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000036() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000037(), get_000038()))
      }
      pub(super) fn get_000039() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_000035() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000036(),
          vec![get_000039()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000043() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_000042() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000043()))
      }
      pub(super) fn get_000045() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_000044() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000045()))
      }
      pub(super) fn get_000049() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000050() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000048() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000049(), get_000050()))
      }
      pub(super) fn get_000051() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_000047() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000048(),
          vec![get_000051()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000055() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000056() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_000054() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000055(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000056(),
        ))
      }
      pub(super) fn get_000059() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000060() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_000058() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000059(),
          CoreBinaryOperator::Minus(None),
          get_000060(),
        ))
      }
      pub(super) fn get_000061() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_000057() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000058(),
          CoreBinaryOperator::Plus(None),
          get_000061(),
        ))
      }
      pub(super) fn get_000064() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000065() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_000063() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000064(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000065(),
        ))
      }
      pub(super) fn get_000068() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000069() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_000067() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000068(),
          CoreBinaryOperator::Minus(None),
          get_000069(),
        ))
      }
      pub(super) fn get_000070() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_000066() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000067(),
          CoreBinaryOperator::Plus(None),
          get_000070(),
        ))
      }
      pub(super) fn get_000072() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000073() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_000071() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000072(),
          CoreBinaryOperator::Minus(None),
          get_000073(),
        ))
      }
      pub(super) fn get_000062() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000063(), get_000066(), get_000071()))
      }
      pub(super) fn get_000053() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000054(), get_000057(), get_000062()))
      }
      pub(super) fn get_000077() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000079() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000080() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000078() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000079(),
          CoreBinaryOperator::And(None),
          get_000080(),
        ))
      }
      pub(super) fn get_000076() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000077(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000078(),
        ))
      }
      pub(super) fn get_000081() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000075() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000076(),
          CoreBinaryOperator::LessThan(None),
          get_000081(),
        ))
      }
      pub(super) fn get_000083() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000085() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_000086() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000084() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000085(),
          CoreBinaryOperator::Plus(None),
          get_000086(),
        ))
      }
      pub(super) fn get_000082() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000083(),
          CoreBinaryOperator::Mult(None),
          get_000084(),
        ))
      }
      pub(super) fn get_000090() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000091() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_000089() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000090(), get_000091()))
      }
      pub(super) fn get_000092() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_000094() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_000095() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000093() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000094(), get_000095()]))
      }
      pub(super) fn get_000088() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000089(),
          vec![get_000092(), get_000093()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000087() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000088()))
      }
      pub(super) fn get_000074() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000075(), get_000082(), get_000087()))
      }
      pub(super) fn get_000052() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_000053(),
          )],
          get_000074(),
        ))
      }
      pub(super) fn get_000046() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_000047(),
          )],
          get_000052(),
        ))
      }
      pub(super) fn get_000041() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_000042(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_000044(),
            ),
          ],
          get_000046(),
        ))
      }
      pub(super) fn get_000098() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000099() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_000097() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000098(), get_000099()))
      }
      pub(super) fn get_000100() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_000103() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000104() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_000102() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000103(), get_000104()))
      }
      pub(super) fn get_000105() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_000101() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000102(),
          vec![get_000105()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000106() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000096() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000097(),
          vec![get_000100(), get_000101(), get_000106()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000040() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_000041(),
          )],
          get_000096(),
        ))
      }
      pub(super) fn get_000034() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_000035(),
          )],
          get_000040(),
        ))
      }
      pub(super) fn get_000028() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_000029(),
          )],
          get_000034(),
        ))
      }
      pub(super) fn get_000022() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_000023(),
          )],
          get_000028(),
        ))
      }
      pub(super) fn get_000110() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000111() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_000109() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000110(), get_000111()))
      }
      pub(super) fn get_000112() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_000113() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000108() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000109(),
          vec![get_000112(), get_000113()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000107() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000108()))
      }
      pub(super) fn get_000014() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000015(), get_000022(), get_000107()))
      }
      pub(super) fn get_000009() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_000010(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_000012(),
            ),
          ],
          get_000014(),
        ))
      }
      pub(super) fn get_000114() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_000118() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_000119() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000117() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000118(), get_000119()))
      }
      pub(super) fn get_000121() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_000122() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000120() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000121(), get_000122()))
      }
      pub(super) fn get_000116() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000117(),
          )],
          get_000120(),
        ))
      }
      pub(super) fn get_000125() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_000126() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000124() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000125(), get_000126()))
      }
      pub(super) fn get_000127() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000123() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000124(),
          )],
          get_000127(),
        ))
      }
      pub(super) fn get_000131() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000132() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_000130() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000131(), get_000132()))
      }
      pub(super) fn get_000133() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000134() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_000129() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000130(),
          vec![get_000133(), get_000134()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000137() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000138() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_000136() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000137(), get_000138()))
      }
      pub(super) fn get_000139() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_000142() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000143() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_000141() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000142(), get_000143()))
      }
      pub(super) fn get_000146() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000147() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_000145() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000146(), get_000147()))
      }
      pub(super) fn get_000148() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_000144() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000145(),
          vec![get_000148()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000151() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_000150() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000151()))
      }
      pub(super) fn get_000154() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_000155() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_000153() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000154(), get_000155()))
      }
      pub(super) fn get_000158() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000157() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000158()]))
      }
      pub(super) fn get_000156() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000157()]))
      }
      pub(super) fn get_000152() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000153(),
          )],
          get_000156(),
        ))
      }
      pub(super) fn get_000149() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_000150(),
          )],
          get_000152(),
        ))
      }
      pub(super) fn get_000140() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000141(),
          vec![get_000144(), get_000149()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000135() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000136(),
          vec![get_000139(), get_000140()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000128() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_000129(),
          )],
          get_000135(),
        ))
      }
      pub(super) fn get_000115() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_000116(),
          get_000123(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_000128(),
        ))
      }
      pub(super) fn get_000161() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_000160() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000161()))
      }
      pub(super) fn get_000164() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000165() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_000163() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000164(), get_000165()))
      }
      pub(super) fn get_000168() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000169() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_000167() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000168(), get_000169()))
      }
      pub(super) fn get_000170() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 23u32)
        }))
      }
      pub(super) fn get_000166() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000167(),
          vec![get_000170()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000171() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("string"))
      }
      pub(super) fn get_000162() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000163(),
          vec![get_000166(), get_000171()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000159() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("v", 23u32) },
            get_000160(),
          )],
          get_000162(),
        ))
      }
      pub(super) fn get_000002() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_000003()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_000004(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_000005(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_000009(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_000114(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_000115(),
            ),
          ],
          get_000159(),
        ))
      }
      pub(super) fn get_000172() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_000174() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_000175() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_000178() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_000177() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000178()))
      }
      pub(super) fn get_000179() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_000176() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_000177(),
          )],
          get_000179(),
        ))
      }
      pub(super) fn get_000182() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_000181() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000182()))
      }
      pub(super) fn get_000184() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_000183() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000184()))
      }
      pub(super) fn get_000188() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000190() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000189() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000190(),
          CoreBinaryOperator::And(None),
          get_000191(),
        ))
      }
      pub(super) fn get_000187() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000188(),
          CoreBinaryOperator::GreaterThan(None),
          get_000189(),
        ))
      }
      pub(super) fn get_000192() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_000186() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000187(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_000192(),
        ))
      }
      pub(super) fn get_000196() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000197() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000195() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000196(), get_000197()))
      }
      pub(super) fn get_000198() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_000194() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000195(),
          vec![get_000198()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000202() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000203() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000201() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000202(), get_000203()))
      }
      pub(super) fn get_000204() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_000200() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000201(),
          vec![get_000204()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000208() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000209() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000207() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000208(), get_000209()))
      }
      pub(super) fn get_000210() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_000206() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000207(),
          vec![get_000210()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000214() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_000213() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000214()))
      }
      pub(super) fn get_000216() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_000215() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000216()))
      }
      pub(super) fn get_000220() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000221() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000219() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000220(), get_000221()))
      }
      pub(super) fn get_000222() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_000218() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000219(),
          vec![get_000222()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000226() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000227() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_000225() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000226(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000227(),
        ))
      }
      pub(super) fn get_000230() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000231() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_000229() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000230(),
          CoreBinaryOperator::Minus(None),
          get_000231(),
        ))
      }
      pub(super) fn get_000232() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_000228() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000229(),
          CoreBinaryOperator::Plus(None),
          get_000232(),
        ))
      }
      pub(super) fn get_000235() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000236() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_000234() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000235(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000236(),
        ))
      }
      pub(super) fn get_000239() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000240() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_000238() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000239(),
          CoreBinaryOperator::Minus(None),
          get_000240(),
        ))
      }
      pub(super) fn get_000241() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_000237() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000238(),
          CoreBinaryOperator::Plus(None),
          get_000241(),
        ))
      }
      pub(super) fn get_000243() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000244() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_000242() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000243(),
          CoreBinaryOperator::Minus(None),
          get_000244(),
        ))
      }
      pub(super) fn get_000233() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000234(), get_000237(), get_000242()))
      }
      pub(super) fn get_000224() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000225(), get_000228(), get_000233()))
      }
      pub(super) fn get_000248() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000250() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000251() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000249() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000250(),
          CoreBinaryOperator::And(None),
          get_000251(),
        ))
      }
      pub(super) fn get_000247() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000248(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000249(),
        ))
      }
      pub(super) fn get_000252() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000246() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000247(),
          CoreBinaryOperator::LessThan(None),
          get_000252(),
        ))
      }
      pub(super) fn get_000254() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000256() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_000257() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000255() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000256(),
          CoreBinaryOperator::Plus(None),
          get_000257(),
        ))
      }
      pub(super) fn get_000253() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000254(),
          CoreBinaryOperator::Mult(None),
          get_000255(),
        ))
      }
      pub(super) fn get_000261() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000262() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_000260() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000261(), get_000262()))
      }
      pub(super) fn get_000263() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_000265() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_000266() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000264() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000265(), get_000266()]))
      }
      pub(super) fn get_000259() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000260(),
          vec![get_000263(), get_000264()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000258() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000259()))
      }
      pub(super) fn get_000245() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000246(), get_000253(), get_000258()))
      }
      pub(super) fn get_000223() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_000224(),
          )],
          get_000245(),
        ))
      }
      pub(super) fn get_000217() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_000218(),
          )],
          get_000223(),
        ))
      }
      pub(super) fn get_000212() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_000213(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_000215(),
            ),
          ],
          get_000217(),
        ))
      }
      pub(super) fn get_000269() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000270() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_000268() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000269(), get_000270()))
      }
      pub(super) fn get_000271() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_000274() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000275() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_000273() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000274(), get_000275()))
      }
      pub(super) fn get_000276() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_000272() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000273(),
          vec![get_000276()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000277() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000267() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000268(),
          vec![get_000271(), get_000272(), get_000277()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000211() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_000212(),
          )],
          get_000267(),
        ))
      }
      pub(super) fn get_000205() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_000206(),
          )],
          get_000211(),
        ))
      }
      pub(super) fn get_000199() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_000200(),
          )],
          get_000205(),
        ))
      }
      pub(super) fn get_000193() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_000194(),
          )],
          get_000199(),
        ))
      }
      pub(super) fn get_000281() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000282() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_000280() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000281(), get_000282()))
      }
      pub(super) fn get_000283() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_000284() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000279() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000280(),
          vec![get_000283(), get_000284()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000278() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000279()))
      }
      pub(super) fn get_000185() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000186(), get_000193(), get_000278()))
      }
      pub(super) fn get_000180() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_000181(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_000183(),
            ),
          ],
          get_000185(),
        ))
      }
      pub(super) fn get_000285() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_000289() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_000290() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000288() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000289(), get_000290()))
      }
      pub(super) fn get_000292() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_000293() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000291() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000292(), get_000293()))
      }
      pub(super) fn get_000287() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000288(),
          )],
          get_000291(),
        ))
      }
      pub(super) fn get_000296() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_000297() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000295() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000296(), get_000297()))
      }
      pub(super) fn get_000298() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000294() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000295(),
          )],
          get_000298(),
        ))
      }
      pub(super) fn get_000302() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000303() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_000301() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000302(), get_000303()))
      }
      pub(super) fn get_000304() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000305() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_000300() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000301(),
          vec![get_000304(), get_000305()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000308() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000309() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_000307() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000308(), get_000309()))
      }
      pub(super) fn get_000310() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_000313() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000314() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_000312() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000313(), get_000314()))
      }
      pub(super) fn get_000317() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000318() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_000316() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000317(), get_000318()))
      }
      pub(super) fn get_000319() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_000315() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000316(),
          vec![get_000319()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000322() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_000321() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000322()))
      }
      pub(super) fn get_000325() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_000326() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_000324() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000325(), get_000326()))
      }
      pub(super) fn get_000329() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000328() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000329()]))
      }
      pub(super) fn get_000327() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000328()]))
      }
      pub(super) fn get_000323() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000324(),
          )],
          get_000327(),
        ))
      }
      pub(super) fn get_000320() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_000321(),
          )],
          get_000323(),
        ))
      }
      pub(super) fn get_000311() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000312(),
          vec![get_000315(), get_000320()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000306() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000307(),
          vec![get_000310(), get_000311()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000299() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_000300(),
          )],
          get_000306(),
        ))
      }
      pub(super) fn get_000286() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_000287(),
          get_000294(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_000299(),
        ))
      }
      pub(super) fn get_000332() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_000331() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000332()))
      }
      pub(super) fn get_000335() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000336() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_000334() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000335(), get_000336()))
      }
      pub(super) fn get_000339() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000340() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_000338() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000339(), get_000340()))
      }
      pub(super) fn get_000341() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 24u32)
        }))
      }
      pub(super) fn get_000337() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000338(),
          vec![get_000341()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000342() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("number"))
      }
      pub(super) fn get_000333() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000334(),
          vec![get_000337(), get_000342()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000330() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("v", 24u32) },
            get_000331(),
          )],
          get_000333(),
        ))
      }
      pub(super) fn get_000173() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_000174()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_000175(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_000176(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_000180(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_000285(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_000286(),
            ),
          ],
          get_000330(),
        ))
      }
      pub(super) fn get_000343() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isBoolean"))
      }
      pub(super) fn get_000345() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_000346() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_000349() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_000348() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000349()))
      }
      pub(super) fn get_000350() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_000347() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_000348(),
          )],
          get_000350(),
        ))
      }
      pub(super) fn get_000353() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_000352() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000353()))
      }
      pub(super) fn get_000355() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_000354() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000355()))
      }
      pub(super) fn get_000359() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000361() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000362() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000360() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000361(),
          CoreBinaryOperator::And(None),
          get_000362(),
        ))
      }
      pub(super) fn get_000358() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000359(),
          CoreBinaryOperator::GreaterThan(None),
          get_000360(),
        ))
      }
      pub(super) fn get_000363() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_000357() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000358(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_000363(),
        ))
      }
      pub(super) fn get_000367() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000368() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000366() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000367(), get_000368()))
      }
      pub(super) fn get_000369() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_000365() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000366(),
          vec![get_000369()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000373() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000374() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000372() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000373(), get_000374()))
      }
      pub(super) fn get_000375() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_000371() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000372(),
          vec![get_000375()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000379() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000380() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000378() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000379(), get_000380()))
      }
      pub(super) fn get_000381() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_000377() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000378(),
          vec![get_000381()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000385() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_000384() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000385()))
      }
      pub(super) fn get_000387() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_000386() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000387()))
      }
      pub(super) fn get_000391() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000392() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000390() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000391(), get_000392()))
      }
      pub(super) fn get_000393() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_000389() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000390(),
          vec![get_000393()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000397() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000398() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_000396() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000397(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000398(),
        ))
      }
      pub(super) fn get_000401() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000402() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_000400() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000401(),
          CoreBinaryOperator::Minus(None),
          get_000402(),
        ))
      }
      pub(super) fn get_000403() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_000399() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000400(),
          CoreBinaryOperator::Plus(None),
          get_000403(),
        ))
      }
      pub(super) fn get_000406() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000407() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_000405() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000406(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000407(),
        ))
      }
      pub(super) fn get_000410() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000411() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_000409() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000410(),
          CoreBinaryOperator::Minus(None),
          get_000411(),
        ))
      }
      pub(super) fn get_000412() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_000408() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000409(),
          CoreBinaryOperator::Plus(None),
          get_000412(),
        ))
      }
      pub(super) fn get_000414() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000415() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_000413() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000414(),
          CoreBinaryOperator::Minus(None),
          get_000415(),
        ))
      }
      pub(super) fn get_000404() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000405(), get_000408(), get_000413()))
      }
      pub(super) fn get_000395() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000396(), get_000399(), get_000404()))
      }
      pub(super) fn get_000419() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000421() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000422() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000420() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000421(),
          CoreBinaryOperator::And(None),
          get_000422(),
        ))
      }
      pub(super) fn get_000418() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000419(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000420(),
        ))
      }
      pub(super) fn get_000423() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000417() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000418(),
          CoreBinaryOperator::LessThan(None),
          get_000423(),
        ))
      }
      pub(super) fn get_000425() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000427() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_000428() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000426() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000427(),
          CoreBinaryOperator::Plus(None),
          get_000428(),
        ))
      }
      pub(super) fn get_000424() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000425(),
          CoreBinaryOperator::Mult(None),
          get_000426(),
        ))
      }
      pub(super) fn get_000432() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000433() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_000431() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000432(), get_000433()))
      }
      pub(super) fn get_000434() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_000436() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_000437() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000435() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000436(), get_000437()]))
      }
      pub(super) fn get_000430() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000431(),
          vec![get_000434(), get_000435()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000429() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000430()))
      }
      pub(super) fn get_000416() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000417(), get_000424(), get_000429()))
      }
      pub(super) fn get_000394() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_000395(),
          )],
          get_000416(),
        ))
      }
      pub(super) fn get_000388() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_000389(),
          )],
          get_000394(),
        ))
      }
      pub(super) fn get_000383() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_000384(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_000386(),
            ),
          ],
          get_000388(),
        ))
      }
      pub(super) fn get_000440() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000441() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_000439() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000440(), get_000441()))
      }
      pub(super) fn get_000442() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_000445() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000446() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_000444() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000445(), get_000446()))
      }
      pub(super) fn get_000447() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_000443() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000444(),
          vec![get_000447()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000448() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000438() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000439(),
          vec![get_000442(), get_000443(), get_000448()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000382() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_000383(),
          )],
          get_000438(),
        ))
      }
      pub(super) fn get_000376() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_000377(),
          )],
          get_000382(),
        ))
      }
      pub(super) fn get_000370() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_000371(),
          )],
          get_000376(),
        ))
      }
      pub(super) fn get_000364() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_000365(),
          )],
          get_000370(),
        ))
      }
      pub(super) fn get_000452() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000453() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_000451() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000452(), get_000453()))
      }
      pub(super) fn get_000454() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_000455() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000450() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000451(),
          vec![get_000454(), get_000455()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000449() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000450()))
      }
      pub(super) fn get_000356() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000357(), get_000364(), get_000449()))
      }
      pub(super) fn get_000351() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_000352(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_000354(),
            ),
          ],
          get_000356(),
        ))
      }
      pub(super) fn get_000456() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_000460() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_000461() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000459() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000460(), get_000461()))
      }
      pub(super) fn get_000463() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_000464() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000462() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000463(), get_000464()))
      }
      pub(super) fn get_000458() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000459(),
          )],
          get_000462(),
        ))
      }
      pub(super) fn get_000467() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_000468() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000466() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000467(), get_000468()))
      }
      pub(super) fn get_000469() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000465() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000466(),
          )],
          get_000469(),
        ))
      }
      pub(super) fn get_000473() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000474() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_000472() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000473(), get_000474()))
      }
      pub(super) fn get_000475() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000476() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_000471() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000472(),
          vec![get_000475(), get_000476()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000479() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000480() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_000478() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000479(), get_000480()))
      }
      pub(super) fn get_000481() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_000484() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000485() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_000483() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000484(), get_000485()))
      }
      pub(super) fn get_000488() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000489() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_000487() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000488(), get_000489()))
      }
      pub(super) fn get_000490() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_000486() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000487(),
          vec![get_000490()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000493() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_000492() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000493()))
      }
      pub(super) fn get_000496() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_000497() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_000495() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000496(), get_000497()))
      }
      pub(super) fn get_000500() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000499() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000500()]))
      }
      pub(super) fn get_000498() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000499()]))
      }
      pub(super) fn get_000494() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000495(),
          )],
          get_000498(),
        ))
      }
      pub(super) fn get_000491() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_000492(),
          )],
          get_000494(),
        ))
      }
      pub(super) fn get_000482() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000483(),
          vec![get_000486(), get_000491()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000477() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000478(),
          vec![get_000481(), get_000482()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000470() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_000471(),
          )],
          get_000477(),
        ))
      }
      pub(super) fn get_000457() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_000458(),
          get_000465(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_000470(),
        ))
      }
      pub(super) fn get_000503() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_000502() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000503()))
      }
      pub(super) fn get_000506() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000507() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_000505() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000506(), get_000507()))
      }
      pub(super) fn get_000510() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000511() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_000509() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000510(), get_000511()))
      }
      pub(super) fn get_000512() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 25u32)
        }))
      }
      pub(super) fn get_000508() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000509(),
          vec![get_000512()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000513() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("boolean"))
      }
      pub(super) fn get_000504() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000505(),
          vec![get_000508(), get_000513()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000501() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("v", 25u32) },
            get_000502(),
          )],
          get_000504(),
        ))
      }
      pub(super) fn get_000344() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_000345()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_000346(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_000347(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_000351(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_000456(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_000457(),
            ),
          ],
          get_000501(),
        ))
      }
      pub(super) fn get_000514() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_000516() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_000517() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_000520() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_000519() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000520()))
      }
      pub(super) fn get_000521() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_000518() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_000519(),
          )],
          get_000521(),
        ))
      }
      pub(super) fn get_000524() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_000523() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000524()))
      }
      pub(super) fn get_000526() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_000525() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000526()))
      }
      pub(super) fn get_000530() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000532() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000533() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000531() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000532(),
          CoreBinaryOperator::And(None),
          get_000533(),
        ))
      }
      pub(super) fn get_000529() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000530(),
          CoreBinaryOperator::GreaterThan(None),
          get_000531(),
        ))
      }
      pub(super) fn get_000534() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_000528() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000529(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_000534(),
        ))
      }
      pub(super) fn get_000538() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000539() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000537() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000538(), get_000539()))
      }
      pub(super) fn get_000540() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_000536() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000537(),
          vec![get_000540()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000544() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000545() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000543() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000544(), get_000545()))
      }
      pub(super) fn get_000546() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_000542() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000543(),
          vec![get_000546()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000550() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000551() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000549() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000550(), get_000551()))
      }
      pub(super) fn get_000552() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_000548() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000549(),
          vec![get_000552()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000556() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_000555() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000556()))
      }
      pub(super) fn get_000558() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_000557() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000558()))
      }
      pub(super) fn get_000562() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000563() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000561() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000562(), get_000563()))
      }
      pub(super) fn get_000564() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_000560() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000561(),
          vec![get_000564()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000568() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000569() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_000567() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000568(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000569(),
        ))
      }
      pub(super) fn get_000572() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000573() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_000571() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000572(),
          CoreBinaryOperator::Minus(None),
          get_000573(),
        ))
      }
      pub(super) fn get_000574() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_000570() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000571(),
          CoreBinaryOperator::Plus(None),
          get_000574(),
        ))
      }
      pub(super) fn get_000577() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000578() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_000576() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000577(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000578(),
        ))
      }
      pub(super) fn get_000581() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000582() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_000580() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000581(),
          CoreBinaryOperator::Minus(None),
          get_000582(),
        ))
      }
      pub(super) fn get_000583() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_000579() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000580(),
          CoreBinaryOperator::Plus(None),
          get_000583(),
        ))
      }
      pub(super) fn get_000585() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000586() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_000584() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000585(),
          CoreBinaryOperator::Minus(None),
          get_000586(),
        ))
      }
      pub(super) fn get_000575() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000576(), get_000579(), get_000584()))
      }
      pub(super) fn get_000566() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000567(), get_000570(), get_000575()))
      }
      pub(super) fn get_000590() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000592() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000593() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000591() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000592(),
          CoreBinaryOperator::And(None),
          get_000593(),
        ))
      }
      pub(super) fn get_000589() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000590(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000591(),
        ))
      }
      pub(super) fn get_000594() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000588() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000589(),
          CoreBinaryOperator::LessThan(None),
          get_000594(),
        ))
      }
      pub(super) fn get_000596() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000598() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_000599() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000597() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000598(),
          CoreBinaryOperator::Plus(None),
          get_000599(),
        ))
      }
      pub(super) fn get_000595() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000596(),
          CoreBinaryOperator::Mult(None),
          get_000597(),
        ))
      }
      pub(super) fn get_000603() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000604() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_000602() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000603(), get_000604()))
      }
      pub(super) fn get_000605() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_000607() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_000608() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000606() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000607(), get_000608()]))
      }
      pub(super) fn get_000601() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000602(),
          vec![get_000605(), get_000606()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000600() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000601()))
      }
      pub(super) fn get_000587() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000588(), get_000595(), get_000600()))
      }
      pub(super) fn get_000565() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_000566(),
          )],
          get_000587(),
        ))
      }
      pub(super) fn get_000559() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_000560(),
          )],
          get_000565(),
        ))
      }
      pub(super) fn get_000554() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_000555(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_000557(),
            ),
          ],
          get_000559(),
        ))
      }
      pub(super) fn get_000611() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000612() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_000610() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000611(), get_000612()))
      }
      pub(super) fn get_000613() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_000616() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000617() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_000615() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000616(), get_000617()))
      }
      pub(super) fn get_000618() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_000614() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000615(),
          vec![get_000618()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000619() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000609() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000610(),
          vec![get_000613(), get_000614(), get_000619()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000553() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_000554(),
          )],
          get_000609(),
        ))
      }
      pub(super) fn get_000547() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_000548(),
          )],
          get_000553(),
        ))
      }
      pub(super) fn get_000541() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_000542(),
          )],
          get_000547(),
        ))
      }
      pub(super) fn get_000535() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_000536(),
          )],
          get_000541(),
        ))
      }
      pub(super) fn get_000623() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000624() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_000622() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000623(), get_000624()))
      }
      pub(super) fn get_000625() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_000626() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000621() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000622(),
          vec![get_000625(), get_000626()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000620() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000621()))
      }
      pub(super) fn get_000527() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000528(), get_000535(), get_000620()))
      }
      pub(super) fn get_000522() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_000523(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_000525(),
            ),
          ],
          get_000527(),
        ))
      }
      pub(super) fn get_000627() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_000631() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_000632() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000630() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000631(), get_000632()))
      }
      pub(super) fn get_000634() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_000635() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000633() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000634(), get_000635()))
      }
      pub(super) fn get_000629() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000630(),
          )],
          get_000633(),
        ))
      }
      pub(super) fn get_000638() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_000639() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000637() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000638(), get_000639()))
      }
      pub(super) fn get_000640() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000636() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000637(),
          )],
          get_000640(),
        ))
      }
      pub(super) fn get_000644() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000645() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_000643() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000644(), get_000645()))
      }
      pub(super) fn get_000646() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000647() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_000642() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000643(),
          vec![get_000646(), get_000647()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000650() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000651() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_000649() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000650(), get_000651()))
      }
      pub(super) fn get_000652() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_000655() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000656() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_000654() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000655(), get_000656()))
      }
      pub(super) fn get_000659() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000660() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_000658() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000659(), get_000660()))
      }
      pub(super) fn get_000661() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_000657() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000658(),
          vec![get_000661()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000664() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_000663() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000664()))
      }
      pub(super) fn get_000667() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_000668() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_000666() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000667(), get_000668()))
      }
      pub(super) fn get_000671() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000670() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000671()]))
      }
      pub(super) fn get_000669() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000670()]))
      }
      pub(super) fn get_000665() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000666(),
          )],
          get_000669(),
        ))
      }
      pub(super) fn get_000662() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_000663(),
          )],
          get_000665(),
        ))
      }
      pub(super) fn get_000653() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000654(),
          vec![get_000657(), get_000662()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000648() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000649(),
          vec![get_000652(), get_000653()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000641() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_000642(),
          )],
          get_000648(),
        ))
      }
      pub(super) fn get_000628() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_000629(),
          get_000636(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_000641(),
        ))
      }
      pub(super) fn get_000674() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_000673() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000674()))
      }
      pub(super) fn get_000677() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000678() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_000676() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000677(), get_000678()))
      }
      pub(super) fn get_000681() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000682() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_000680() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000681(), get_000682()))
      }
      pub(super) fn get_000683() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 26u32)
        }))
      }
      pub(super) fn get_000679() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000680(),
          vec![get_000683()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000684() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("object"))
      }
      pub(super) fn get_000675() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000676(),
          vec![get_000679(), get_000684()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000672() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("v", 26u32) },
            get_000673(),
          )],
          get_000675(),
        ))
      }
      pub(super) fn get_000515() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_000516()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_000517(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_000518(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_000522(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_000627(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_000628(),
            ),
          ],
          get_000672(),
        ))
      }
      pub(super) fn get_000685() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_000687() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_000688() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_000691() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_000690() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000691()))
      }
      pub(super) fn get_000692() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_000689() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_000690(),
          )],
          get_000692(),
        ))
      }
      pub(super) fn get_000695() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_000694() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000695()))
      }
      pub(super) fn get_000697() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_000696() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000697()))
      }
      pub(super) fn get_000701() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000703() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000704() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000702() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000703(),
          CoreBinaryOperator::And(None),
          get_000704(),
        ))
      }
      pub(super) fn get_000700() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000701(),
          CoreBinaryOperator::GreaterThan(None),
          get_000702(),
        ))
      }
      pub(super) fn get_000705() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_000699() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000700(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_000705(),
        ))
      }
      pub(super) fn get_000709() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000710() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000708() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000709(), get_000710()))
      }
      pub(super) fn get_000711() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_000707() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000708(),
          vec![get_000711()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000715() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000716() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000714() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000715(), get_000716()))
      }
      pub(super) fn get_000717() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_000713() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000714(),
          vec![get_000717()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000721() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000722() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000720() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000721(), get_000722()))
      }
      pub(super) fn get_000723() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_000719() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000720(),
          vec![get_000723()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000727() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_000726() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000727()))
      }
      pub(super) fn get_000729() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_000728() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000729()))
      }
      pub(super) fn get_000733() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000734() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000732() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000733(), get_000734()))
      }
      pub(super) fn get_000735() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_000731() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000732(),
          vec![get_000735()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000739() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000740() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_000738() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000739(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000740(),
        ))
      }
      pub(super) fn get_000743() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000744() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_000742() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000743(),
          CoreBinaryOperator::Minus(None),
          get_000744(),
        ))
      }
      pub(super) fn get_000745() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_000741() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000742(),
          CoreBinaryOperator::Plus(None),
          get_000745(),
        ))
      }
      pub(super) fn get_000748() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000749() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_000747() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000748(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000749(),
        ))
      }
      pub(super) fn get_000752() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000753() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_000751() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000752(),
          CoreBinaryOperator::Minus(None),
          get_000753(),
        ))
      }
      pub(super) fn get_000754() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_000750() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000751(),
          CoreBinaryOperator::Plus(None),
          get_000754(),
        ))
      }
      pub(super) fn get_000756() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000757() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_000755() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000756(),
          CoreBinaryOperator::Minus(None),
          get_000757(),
        ))
      }
      pub(super) fn get_000746() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000747(), get_000750(), get_000755()))
      }
      pub(super) fn get_000737() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000738(), get_000741(), get_000746()))
      }
      pub(super) fn get_000761() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000763() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000764() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000762() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000763(),
          CoreBinaryOperator::And(None),
          get_000764(),
        ))
      }
      pub(super) fn get_000760() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000761(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000762(),
        ))
      }
      pub(super) fn get_000765() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000759() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000760(),
          CoreBinaryOperator::LessThan(None),
          get_000765(),
        ))
      }
      pub(super) fn get_000767() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000769() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_000770() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000768() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000769(),
          CoreBinaryOperator::Plus(None),
          get_000770(),
        ))
      }
      pub(super) fn get_000766() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000767(),
          CoreBinaryOperator::Mult(None),
          get_000768(),
        ))
      }
      pub(super) fn get_000774() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000775() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_000773() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000774(), get_000775()))
      }
      pub(super) fn get_000776() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_000778() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_000779() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000777() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000778(), get_000779()]))
      }
      pub(super) fn get_000772() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000773(),
          vec![get_000776(), get_000777()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000771() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000772()))
      }
      pub(super) fn get_000758() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000759(), get_000766(), get_000771()))
      }
      pub(super) fn get_000736() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_000737(),
          )],
          get_000758(),
        ))
      }
      pub(super) fn get_000730() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_000731(),
          )],
          get_000736(),
        ))
      }
      pub(super) fn get_000725() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_000726(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_000728(),
            ),
          ],
          get_000730(),
        ))
      }
      pub(super) fn get_000782() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000783() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_000781() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000782(), get_000783()))
      }
      pub(super) fn get_000784() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_000787() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000788() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_000786() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000787(), get_000788()))
      }
      pub(super) fn get_000789() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_000785() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000786(),
          vec![get_000789()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000790() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000780() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000781(),
          vec![get_000784(), get_000785(), get_000790()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000724() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_000725(),
          )],
          get_000780(),
        ))
      }
      pub(super) fn get_000718() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_000719(),
          )],
          get_000724(),
        ))
      }
      pub(super) fn get_000712() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_000713(),
          )],
          get_000718(),
        ))
      }
      pub(super) fn get_000706() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_000707(),
          )],
          get_000712(),
        ))
      }
      pub(super) fn get_000794() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000795() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_000793() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000794(), get_000795()))
      }
      pub(super) fn get_000796() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_000797() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000792() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000793(),
          vec![get_000796(), get_000797()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000791() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000792()))
      }
      pub(super) fn get_000698() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000699(), get_000706(), get_000791()))
      }
      pub(super) fn get_000693() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_000694(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_000696(),
            ),
          ],
          get_000698(),
        ))
      }
      pub(super) fn get_000798() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_000802() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_000803() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000801() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000802(), get_000803()))
      }
      pub(super) fn get_000805() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_000806() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000804() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000805(), get_000806()))
      }
      pub(super) fn get_000800() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000801(),
          )],
          get_000804(),
        ))
      }
      pub(super) fn get_000809() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_000810() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000808() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000809(), get_000810()))
      }
      pub(super) fn get_000811() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000807() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000808(),
          )],
          get_000811(),
        ))
      }
      pub(super) fn get_000815() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000816() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_000814() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000815(), get_000816()))
      }
      pub(super) fn get_000817() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000818() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_000813() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000814(),
          vec![get_000817(), get_000818()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000821() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000822() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_000820() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000821(), get_000822()))
      }
      pub(super) fn get_000823() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_000826() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000827() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_000825() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000826(), get_000827()))
      }
      pub(super) fn get_000830() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000831() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_000829() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000830(), get_000831()))
      }
      pub(super) fn get_000832() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_000828() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000829(),
          vec![get_000832()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000835() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_000834() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000835()))
      }
      pub(super) fn get_000838() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_000839() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_000837() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000838(), get_000839()))
      }
      pub(super) fn get_000842() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000841() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000842()]))
      }
      pub(super) fn get_000840() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000841()]))
      }
      pub(super) fn get_000836() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000837(),
          )],
          get_000840(),
        ))
      }
      pub(super) fn get_000833() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_000834(),
          )],
          get_000836(),
        ))
      }
      pub(super) fn get_000824() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000825(),
          vec![get_000828(), get_000833()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000819() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000820(),
          vec![get_000823(), get_000824()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000812() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_000813(),
          )],
          get_000819(),
        ))
      }
      pub(super) fn get_000799() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_000800(),
          get_000807(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_000812(),
        ))
      }
      pub(super) fn get_000845() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_000844() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000845()))
      }
      pub(super) fn get_000848() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000849() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_000847() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000848(), get_000849()))
      }
      pub(super) fn get_000852() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000853() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_000851() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000852(), get_000853()))
      }
      pub(super) fn get_000854() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 27u32)
        }))
      }
      pub(super) fn get_000850() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000851(),
          vec![get_000854()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000855() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("array"))
      }
      pub(super) fn get_000846() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000847(),
          vec![get_000850(), get_000855()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000843() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("v", 27u32) },
            get_000844(),
          )],
          get_000846(),
        ))
      }
      pub(super) fn get_000686() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_000687()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_000688(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_000689(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_000693(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_000798(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_000799(),
            ),
          ],
          get_000843(),
        ))
      }
      pub(super) fn get_000856() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isFunction"))
      }
      pub(super) fn get_000858() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_000859() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_000862() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_000861() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000862()))
      }
      pub(super) fn get_000863() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_000860() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_000861(),
          )],
          get_000863(),
        ))
      }
      pub(super) fn get_000866() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_000865() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000866()))
      }
      pub(super) fn get_000868() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_000867() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000868()))
      }
      pub(super) fn get_000872() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000874() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000875() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000873() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000874(),
          CoreBinaryOperator::And(None),
          get_000875(),
        ))
      }
      pub(super) fn get_000871() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000872(),
          CoreBinaryOperator::GreaterThan(None),
          get_000873(),
        ))
      }
      pub(super) fn get_000876() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_000870() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000871(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_000876(),
        ))
      }
      pub(super) fn get_000880() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000881() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000879() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000880(), get_000881()))
      }
      pub(super) fn get_000882() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_000878() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000879(),
          vec![get_000882()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000886() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000887() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000885() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000886(), get_000887()))
      }
      pub(super) fn get_000888() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_000884() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000885(),
          vec![get_000888()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000892() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000893() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000891() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000892(), get_000893()))
      }
      pub(super) fn get_000894() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_000890() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000891(),
          vec![get_000894()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000898() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_000897() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000898()))
      }
      pub(super) fn get_000900() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_000899() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000900()))
      }
      pub(super) fn get_000904() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000905() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_000903() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000904(), get_000905()))
      }
      pub(super) fn get_000906() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_000902() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000903(),
          vec![get_000906()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000910() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000911() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_000909() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000910(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000911(),
        ))
      }
      pub(super) fn get_000914() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000915() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_000913() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000914(),
          CoreBinaryOperator::Minus(None),
          get_000915(),
        ))
      }
      pub(super) fn get_000916() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_000912() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000913(),
          CoreBinaryOperator::Plus(None),
          get_000916(),
        ))
      }
      pub(super) fn get_000919() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000920() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_000918() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000919(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000920(),
        ))
      }
      pub(super) fn get_000923() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000924() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_000922() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000923(),
          CoreBinaryOperator::Minus(None),
          get_000924(),
        ))
      }
      pub(super) fn get_000925() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_000921() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000922(),
          CoreBinaryOperator::Plus(None),
          get_000925(),
        ))
      }
      pub(super) fn get_000927() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_000928() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_000926() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000927(),
          CoreBinaryOperator::Minus(None),
          get_000928(),
        ))
      }
      pub(super) fn get_000917() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000918(), get_000921(), get_000926()))
      }
      pub(super) fn get_000908() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000909(), get_000912(), get_000917()))
      }
      pub(super) fn get_000932() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000934() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000935() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000933() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000934(),
          CoreBinaryOperator::And(None),
          get_000935(),
        ))
      }
      pub(super) fn get_000931() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000932(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_000933(),
        ))
      }
      pub(super) fn get_000936() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000930() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000931(),
          CoreBinaryOperator::LessThan(None),
          get_000936(),
        ))
      }
      pub(super) fn get_000938() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000940() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_000941() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_000939() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000940(),
          CoreBinaryOperator::Plus(None),
          get_000941(),
        ))
      }
      pub(super) fn get_000937() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_000938(),
          CoreBinaryOperator::Mult(None),
          get_000939(),
        ))
      }
      pub(super) fn get_000945() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000946() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_000944() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000945(), get_000946()))
      }
      pub(super) fn get_000947() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_000949() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_000950() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000948() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_000949(), get_000950()]))
      }
      pub(super) fn get_000943() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000944(),
          vec![get_000947(), get_000948()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000942() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000943()))
      }
      pub(super) fn get_000929() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000930(), get_000937(), get_000942()))
      }
      pub(super) fn get_000907() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_000908(),
          )],
          get_000929(),
        ))
      }
      pub(super) fn get_000901() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_000902(),
          )],
          get_000907(),
        ))
      }
      pub(super) fn get_000896() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_000897(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_000899(),
            ),
          ],
          get_000901(),
        ))
      }
      pub(super) fn get_000953() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000954() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_000952() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000953(), get_000954()))
      }
      pub(super) fn get_000955() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_000958() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000959() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_000957() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000958(), get_000959()))
      }
      pub(super) fn get_000960() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_000956() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000957(),
          vec![get_000960()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000961() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000951() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000952(),
          vec![get_000955(), get_000956(), get_000961()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000895() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_000896(),
          )],
          get_000951(),
        ))
      }
      pub(super) fn get_000889() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_000890(),
          )],
          get_000895(),
        ))
      }
      pub(super) fn get_000883() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_000884(),
          )],
          get_000889(),
        ))
      }
      pub(super) fn get_000877() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_000878(),
          )],
          get_000883(),
        ))
      }
      pub(super) fn get_000965() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000966() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_000964() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000965(), get_000966()))
      }
      pub(super) fn get_000967() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_000968() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_000963() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000964(),
          vec![get_000967(), get_000968()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000962() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_000963()))
      }
      pub(super) fn get_000869() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_000870(), get_000877(), get_000962()))
      }
      pub(super) fn get_000864() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_000865(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_000867(),
            ),
          ],
          get_000869(),
        ))
      }
      pub(super) fn get_000969() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_000973() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_000974() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000972() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000973(), get_000974()))
      }
      pub(super) fn get_000976() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_000977() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000975() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000976(), get_000977()))
      }
      pub(super) fn get_000971() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000972(),
          )],
          get_000975(),
        ))
      }
      pub(super) fn get_000980() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_000981() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000979() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000980(), get_000981()))
      }
      pub(super) fn get_000982() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_000978() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_000979(),
          )],
          get_000982(),
        ))
      }
      pub(super) fn get_000986() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000987() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_000985() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000986(), get_000987()))
      }
      pub(super) fn get_000988() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_000989() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_000984() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000985(),
          vec![get_000988(), get_000989()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000992() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000993() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_000991() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000992(), get_000993()))
      }
      pub(super) fn get_000994() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_000997() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_000998() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_000996() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_000997(), get_000998()))
      }
      pub(super) fn get_001001() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001002() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001000() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001001(), get_001002()))
      }
      pub(super) fn get_001003() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_000999() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001000(),
          vec![get_001003()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001006() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_001005() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001006()))
      }
      pub(super) fn get_001009() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_001010() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_001008() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001009(), get_001010()))
      }
      pub(super) fn get_001013() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001012() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001013()]))
      }
      pub(super) fn get_001011() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001012()]))
      }
      pub(super) fn get_001007() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001008(),
          )],
          get_001011(),
        ))
      }
      pub(super) fn get_001004() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_001005(),
          )],
          get_001007(),
        ))
      }
      pub(super) fn get_000995() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000996(),
          vec![get_000999(), get_001004()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000990() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_000991(),
          vec![get_000994(), get_000995()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_000983() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_000984(),
          )],
          get_000990(),
        ))
      }
      pub(super) fn get_000970() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_000971(),
          get_000978(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_000983(),
        ))
      }
      pub(super) fn get_001016() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_001015() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001016()))
      }
      pub(super) fn get_001019() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001020() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_001018() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001019(), get_001020()))
      }
      pub(super) fn get_001023() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001024() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_001022() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001023(), get_001024()))
      }
      pub(super) fn get_001025() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 28u32)
        }))
      }
      pub(super) fn get_001021() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001022(),
          vec![get_001025()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001026() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("function"))
      }
      pub(super) fn get_001017() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001018(),
          vec![get_001021(), get_001026()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001014() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("v", 28u32) },
            get_001015(),
          )],
          get_001017(),
        ))
      }
      pub(super) fn get_000857() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_000858()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_000859(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_000860(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_000864(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_000969(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_000970(),
            ),
          ],
          get_001014(),
        ))
      }
      pub(super) fn get_001027() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("toString"))
      }
      pub(super) fn get_001029() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_001030() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_001033() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_001032() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001033()))
      }
      pub(super) fn get_001034() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_001031() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_001032(),
          )],
          get_001034(),
        ))
      }
      pub(super) fn get_001037() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_001036() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001037()))
      }
      pub(super) fn get_001039() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_001038() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001039()))
      }
      pub(super) fn get_001043() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001045() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001046() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001044() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001045(),
          CoreBinaryOperator::And(None),
          get_001046(),
        ))
      }
      pub(super) fn get_001042() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001043(),
          CoreBinaryOperator::GreaterThan(None),
          get_001044(),
        ))
      }
      pub(super) fn get_001047() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_001041() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001042(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_001047(),
        ))
      }
      pub(super) fn get_001051() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001052() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001050() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001051(), get_001052()))
      }
      pub(super) fn get_001053() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_001049() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001050(),
          vec![get_001053()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001057() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001058() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001056() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001057(), get_001058()))
      }
      pub(super) fn get_001059() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_001055() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001056(),
          vec![get_001059()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001063() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001064() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001062() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001063(), get_001064()))
      }
      pub(super) fn get_001065() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_001061() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001062(),
          vec![get_001065()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001069() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_001068() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001069()))
      }
      pub(super) fn get_001071() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_001070() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001071()))
      }
      pub(super) fn get_001075() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001076() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001074() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001075(), get_001076()))
      }
      pub(super) fn get_001077() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_001073() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001074(),
          vec![get_001077()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001081() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001082() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_001080() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001081(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001082(),
        ))
      }
      pub(super) fn get_001085() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001086() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_001084() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001085(),
          CoreBinaryOperator::Minus(None),
          get_001086(),
        ))
      }
      pub(super) fn get_001087() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_001083() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001084(),
          CoreBinaryOperator::Plus(None),
          get_001087(),
        ))
      }
      pub(super) fn get_001090() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001091() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_001089() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001090(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001091(),
        ))
      }
      pub(super) fn get_001094() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001095() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_001093() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001094(),
          CoreBinaryOperator::Minus(None),
          get_001095(),
        ))
      }
      pub(super) fn get_001096() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_001092() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001093(),
          CoreBinaryOperator::Plus(None),
          get_001096(),
        ))
      }
      pub(super) fn get_001098() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001099() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_001097() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001098(),
          CoreBinaryOperator::Minus(None),
          get_001099(),
        ))
      }
      pub(super) fn get_001088() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001089(), get_001092(), get_001097()))
      }
      pub(super) fn get_001079() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001080(), get_001083(), get_001088()))
      }
      pub(super) fn get_001103() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001105() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001106() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001104() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001105(),
          CoreBinaryOperator::And(None),
          get_001106(),
        ))
      }
      pub(super) fn get_001102() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001103(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001104(),
        ))
      }
      pub(super) fn get_001107() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001101() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001102(),
          CoreBinaryOperator::LessThan(None),
          get_001107(),
        ))
      }
      pub(super) fn get_001109() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001111() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_001112() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001110() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001111(),
          CoreBinaryOperator::Plus(None),
          get_001112(),
        ))
      }
      pub(super) fn get_001108() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001109(),
          CoreBinaryOperator::Mult(None),
          get_001110(),
        ))
      }
      pub(super) fn get_001116() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001117() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_001115() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001116(), get_001117()))
      }
      pub(super) fn get_001118() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_001120() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_001121() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001119() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001120(), get_001121()]))
      }
      pub(super) fn get_001114() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001115(),
          vec![get_001118(), get_001119()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001113() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001114()))
      }
      pub(super) fn get_001100() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001101(), get_001108(), get_001113()))
      }
      pub(super) fn get_001078() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_001079(),
          )],
          get_001100(),
        ))
      }
      pub(super) fn get_001072() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_001073(),
          )],
          get_001078(),
        ))
      }
      pub(super) fn get_001067() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_001068(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_001070(),
            ),
          ],
          get_001072(),
        ))
      }
      pub(super) fn get_001124() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001125() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_001123() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001124(), get_001125()))
      }
      pub(super) fn get_001126() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_001129() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001130() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_001128() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001129(), get_001130()))
      }
      pub(super) fn get_001131() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_001127() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001128(),
          vec![get_001131()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001132() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001122() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001123(),
          vec![get_001126(), get_001127(), get_001132()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001066() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_001067(),
          )],
          get_001122(),
        ))
      }
      pub(super) fn get_001060() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_001061(),
          )],
          get_001066(),
        ))
      }
      pub(super) fn get_001054() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_001055(),
          )],
          get_001060(),
        ))
      }
      pub(super) fn get_001048() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_001049(),
          )],
          get_001054(),
        ))
      }
      pub(super) fn get_001136() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001137() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_001135() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001136(), get_001137()))
      }
      pub(super) fn get_001138() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_001139() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001134() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001135(),
          vec![get_001138(), get_001139()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001133() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001134()))
      }
      pub(super) fn get_001040() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001041(), get_001048(), get_001133()))
      }
      pub(super) fn get_001035() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_001036(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_001038(),
            ),
          ],
          get_001040(),
        ))
      }
      pub(super) fn get_001140() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_001144() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_001145() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001143() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001144(), get_001145()))
      }
      pub(super) fn get_001147() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_001148() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001146() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001147(), get_001148()))
      }
      pub(super) fn get_001142() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001143(),
          )],
          get_001146(),
        ))
      }
      pub(super) fn get_001151() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_001152() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001150() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001151(), get_001152()))
      }
      pub(super) fn get_001153() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001149() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001150(),
          )],
          get_001153(),
        ))
      }
      pub(super) fn get_001157() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001158() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_001156() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001157(), get_001158()))
      }
      pub(super) fn get_001159() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001160() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_001155() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001156(),
          vec![get_001159(), get_001160()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001163() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001164() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_001162() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001163(), get_001164()))
      }
      pub(super) fn get_001165() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_001168() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001169() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_001167() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001168(), get_001169()))
      }
      pub(super) fn get_001172() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001173() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001171() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001172(), get_001173()))
      }
      pub(super) fn get_001174() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_001170() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001171(),
          vec![get_001174()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001177() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_001176() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001177()))
      }
      pub(super) fn get_001180() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_001181() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_001179() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001180(), get_001181()))
      }
      pub(super) fn get_001184() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001183() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001184()]))
      }
      pub(super) fn get_001182() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001183()]))
      }
      pub(super) fn get_001178() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001179(),
          )],
          get_001182(),
        ))
      }
      pub(super) fn get_001175() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_001176(),
          )],
          get_001178(),
        ))
      }
      pub(super) fn get_001166() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001167(),
          vec![get_001170(), get_001175()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001161() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001162(),
          vec![get_001165(), get_001166()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001154() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_001155(),
          )],
          get_001161(),
        ))
      }
      pub(super) fn get_001141() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_001142(),
          get_001149(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_001154(),
        ))
      }
      pub(super) fn get_001187() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_001186() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001187()))
      }
      pub(super) fn get_001191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001192() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_001190() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001191(), get_001192()))
      }
      pub(super) fn get_001195() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001196() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_001194() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001195(), get_001196()))
      }
      pub(super) fn get_001197() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 29u32)
        }))
      }
      pub(super) fn get_001193() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001194(),
          vec![get_001197()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001198() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("string"))
      }
      pub(super) fn get_001189() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001190(),
          vec![get_001193(), get_001198()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001199() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 29u32)
        }))
      }
      pub(super) fn get_001201() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_001202() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 29u32)
        }))
      }
      pub(super) fn get_001200() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001201(),
          CoreBinaryOperator::Plus(None),
          get_001202(),
        ))
      }
      pub(super) fn get_001188() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001189(), get_001199(), get_001200()))
      }
      pub(super) fn get_001185() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("a", 29u32) },
            get_001186(),
          )],
          get_001188(),
        ))
      }
      pub(super) fn get_001028() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_001029()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_001030(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_001031(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_001035(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_001140(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_001141(),
            ),
          ],
          get_001185(),
        ))
      }
      pub(super) fn get_001203() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("substr"))
      }
      pub(super) fn get_001205() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_001206() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_001209() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_001208() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001209()))
      }
      pub(super) fn get_001210() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_001207() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_001208(),
          )],
          get_001210(),
        ))
      }
      pub(super) fn get_001213() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_001212() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001213()))
      }
      pub(super) fn get_001215() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_001214() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001215()))
      }
      pub(super) fn get_001219() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001221() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001222() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001220() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001221(),
          CoreBinaryOperator::And(None),
          get_001222(),
        ))
      }
      pub(super) fn get_001218() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001219(),
          CoreBinaryOperator::GreaterThan(None),
          get_001220(),
        ))
      }
      pub(super) fn get_001223() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_001217() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001218(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_001223(),
        ))
      }
      pub(super) fn get_001227() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001228() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001226() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001227(), get_001228()))
      }
      pub(super) fn get_001229() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_001225() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001226(),
          vec![get_001229()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001233() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001234() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001232() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001233(), get_001234()))
      }
      pub(super) fn get_001235() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_001231() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001232(),
          vec![get_001235()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001239() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001240() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001238() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001239(), get_001240()))
      }
      pub(super) fn get_001241() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_001237() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001238(),
          vec![get_001241()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001245() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_001244() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001245()))
      }
      pub(super) fn get_001247() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_001246() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001247()))
      }
      pub(super) fn get_001251() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001252() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001250() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001251(), get_001252()))
      }
      pub(super) fn get_001253() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_001249() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001250(),
          vec![get_001253()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001257() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001258() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_001256() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001257(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001258(),
        ))
      }
      pub(super) fn get_001261() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001262() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_001260() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001261(),
          CoreBinaryOperator::Minus(None),
          get_001262(),
        ))
      }
      pub(super) fn get_001263() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_001259() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001260(),
          CoreBinaryOperator::Plus(None),
          get_001263(),
        ))
      }
      pub(super) fn get_001266() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001267() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_001265() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001266(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001267(),
        ))
      }
      pub(super) fn get_001270() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001271() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_001269() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001270(),
          CoreBinaryOperator::Minus(None),
          get_001271(),
        ))
      }
      pub(super) fn get_001272() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_001268() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001269(),
          CoreBinaryOperator::Plus(None),
          get_001272(),
        ))
      }
      pub(super) fn get_001274() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001275() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_001273() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001274(),
          CoreBinaryOperator::Minus(None),
          get_001275(),
        ))
      }
      pub(super) fn get_001264() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001265(), get_001268(), get_001273()))
      }
      pub(super) fn get_001255() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001256(), get_001259(), get_001264()))
      }
      pub(super) fn get_001279() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001281() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001282() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001280() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001281(),
          CoreBinaryOperator::And(None),
          get_001282(),
        ))
      }
      pub(super) fn get_001278() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001279(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001280(),
        ))
      }
      pub(super) fn get_001283() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001277() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001278(),
          CoreBinaryOperator::LessThan(None),
          get_001283(),
        ))
      }
      pub(super) fn get_001285() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001287() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_001288() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001286() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001287(),
          CoreBinaryOperator::Plus(None),
          get_001288(),
        ))
      }
      pub(super) fn get_001284() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001285(),
          CoreBinaryOperator::Mult(None),
          get_001286(),
        ))
      }
      pub(super) fn get_001292() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001293() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_001291() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001292(), get_001293()))
      }
      pub(super) fn get_001294() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_001296() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_001297() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001295() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001296(), get_001297()]))
      }
      pub(super) fn get_001290() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001291(),
          vec![get_001294(), get_001295()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001289() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001290()))
      }
      pub(super) fn get_001276() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001277(), get_001284(), get_001289()))
      }
      pub(super) fn get_001254() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_001255(),
          )],
          get_001276(),
        ))
      }
      pub(super) fn get_001248() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_001249(),
          )],
          get_001254(),
        ))
      }
      pub(super) fn get_001243() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_001244(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_001246(),
            ),
          ],
          get_001248(),
        ))
      }
      pub(super) fn get_001300() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001301() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_001299() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001300(), get_001301()))
      }
      pub(super) fn get_001302() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_001305() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001306() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_001304() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001305(), get_001306()))
      }
      pub(super) fn get_001307() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_001303() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001304(),
          vec![get_001307()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001308() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001298() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001299(),
          vec![get_001302(), get_001303(), get_001308()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001242() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_001243(),
          )],
          get_001298(),
        ))
      }
      pub(super) fn get_001236() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_001237(),
          )],
          get_001242(),
        ))
      }
      pub(super) fn get_001230() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_001231(),
          )],
          get_001236(),
        ))
      }
      pub(super) fn get_001224() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_001225(),
          )],
          get_001230(),
        ))
      }
      pub(super) fn get_001312() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001313() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_001311() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001312(), get_001313()))
      }
      pub(super) fn get_001314() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_001315() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001310() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001311(),
          vec![get_001314(), get_001315()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001309() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001310()))
      }
      pub(super) fn get_001216() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001217(), get_001224(), get_001309()))
      }
      pub(super) fn get_001211() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_001212(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_001214(),
            ),
          ],
          get_001216(),
        ))
      }
      pub(super) fn get_001316() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_001320() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_001321() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001319() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001320(), get_001321()))
      }
      pub(super) fn get_001323() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_001324() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001322() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001323(), get_001324()))
      }
      pub(super) fn get_001318() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001319(),
          )],
          get_001322(),
        ))
      }
      pub(super) fn get_001327() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_001328() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001326() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001327(), get_001328()))
      }
      pub(super) fn get_001329() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001325() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001326(),
          )],
          get_001329(),
        ))
      }
      pub(super) fn get_001333() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001334() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_001332() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001333(), get_001334()))
      }
      pub(super) fn get_001335() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001336() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_001331() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001332(),
          vec![get_001335(), get_001336()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001339() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001340() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_001338() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001339(), get_001340()))
      }
      pub(super) fn get_001341() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_001344() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001345() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_001343() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001344(), get_001345()))
      }
      pub(super) fn get_001348() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001349() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001347() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001348(), get_001349()))
      }
      pub(super) fn get_001350() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_001346() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001347(),
          vec![get_001350()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001353() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_001352() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001353()))
      }
      pub(super) fn get_001356() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_001357() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_001355() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001356(), get_001357()))
      }
      pub(super) fn get_001360() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001359() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001360()]))
      }
      pub(super) fn get_001358() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001359()]))
      }
      pub(super) fn get_001354() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001355(),
          )],
          get_001358(),
        ))
      }
      pub(super) fn get_001351() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_001352(),
          )],
          get_001354(),
        ))
      }
      pub(super) fn get_001342() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001343(),
          vec![get_001346(), get_001351()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001337() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001338(),
          vec![get_001341(), get_001342()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001330() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_001331(),
          )],
          get_001337(),
        ))
      }
      pub(super) fn get_001317() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_001318(),
          get_001325(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_001330(),
        ))
      }
      pub(super) fn get_001363() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_001362() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001363()))
      }
      pub(super) fn get_001365() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'from' not bound"))
      }
      pub(super) fn get_001364() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001365()))
      }
      pub(super) fn get_001367() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'len' not bound"))
      }
      pub(super) fn get_001366() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001367()))
      }
      pub(super) fn get_001371() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001372() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_001370() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001371(), get_001372()))
      }
      pub(super) fn get_001373() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 30u32)
        }))
      }
      pub(super) fn get_001369() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001370(),
          vec![get_001373()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001377() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001378() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_001376() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001377(), get_001378()))
      }
      pub(super) fn get_001379() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from", 31u32)
        }))
      }
      pub(super) fn get_001375() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001376(),
          vec![get_001379()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001383() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001384() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_001382() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001383(), get_001384()))
      }
      pub(super) fn get_001385() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("len", 32u32)
        }))
      }
      pub(super) fn get_001381() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001382(),
          vec![get_001385()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001388() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("len", 32u32)
        }))
      }
      pub(super) fn get_001389() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001387() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001388(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001389(),
        ))
      }
      pub(super) fn get_001392() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001393() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_001391() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001392(), get_001393()))
      }
      pub(super) fn get_001394() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_001397() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001398() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_001396() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001397(), get_001398()))
      }
      pub(super) fn get_001401() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001402() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("max"))
      }
      pub(super) fn get_001400() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001401(), get_001402()))
      }
      pub(super) fn get_001403() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001406() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001407() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("min"))
      }
      pub(super) fn get_001405() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001406(), get_001407()))
      }
      pub(super) fn get_001408() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("len", 32u32)
        }))
      }
      pub(super) fn get_001412() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001413() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001411() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001412(), get_001413()))
      }
      pub(super) fn get_001414() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 30u32)
        }))
      }
      pub(super) fn get_001410() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001411(),
          vec![get_001414()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001415() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from", 31u32)
        }))
      }
      pub(super) fn get_001409() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001410(),
          CoreBinaryOperator::Minus(None),
          get_001415(),
        ))
      }
      pub(super) fn get_001404() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001405(),
          vec![get_001408(), get_001409()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001399() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001400(),
          vec![get_001403(), get_001404()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001418() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_001417() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001418()))
      }
      pub(super) fn get_001420() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 30u32)
        }))
      }
      pub(super) fn get_001422() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 33u32)
        }))
      }
      pub(super) fn get_001423() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from", 31u32)
        }))
      }
      pub(super) fn get_001421() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001422(),
          CoreBinaryOperator::Plus(None),
          get_001423(),
        ))
      }
      pub(super) fn get_001419() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001420(), get_001421()))
      }
      pub(super) fn get_001416() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 33u32) },
            get_001417(),
          )],
          get_001419(),
        ))
      }
      pub(super) fn get_001395() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001396(),
          vec![get_001399(), get_001416()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001390() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001391(),
          vec![get_001394(), get_001395()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001426() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "substr third parameter should be greater than zero, got ",
        ))
      }
      pub(super) fn get_001427() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("len", 32u32)
        }))
      }
      pub(super) fn get_001425() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001426(),
          CoreBinaryOperator::Plus(None),
          get_001427(),
        ))
      }
      pub(super) fn get_001424() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001425()))
      }
      pub(super) fn get_001386() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001387(), get_001390(), get_001424()))
      }
      pub(super) fn get_001430() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "substr third parameter should be a string, got ",
        ))
      }
      pub(super) fn get_001433() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001434() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_001432() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001433(), get_001434()))
      }
      pub(super) fn get_001435() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("len", 32u32)
        }))
      }
      pub(super) fn get_001431() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001432(),
          vec![get_001435()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001429() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001430(),
          CoreBinaryOperator::Plus(None),
          get_001431(),
        ))
      }
      pub(super) fn get_001428() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001429()))
      }
      pub(super) fn get_001380() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001381(), get_001386(), get_001428()))
      }
      pub(super) fn get_001438() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "substr second parameter should be a string, got ",
        ))
      }
      pub(super) fn get_001441() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001442() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_001440() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001441(), get_001442()))
      }
      pub(super) fn get_001443() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from", 31u32)
        }))
      }
      pub(super) fn get_001439() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001440(),
          vec![get_001443()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001437() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001438(),
          CoreBinaryOperator::Plus(None),
          get_001439(),
        ))
      }
      pub(super) fn get_001436() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001437()))
      }
      pub(super) fn get_001374() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001375(), get_001380(), get_001436()))
      }
      pub(super) fn get_001446() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "substr first parameter should be a string, got ",
        ))
      }
      pub(super) fn get_001449() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001450() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_001448() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001449(), get_001450()))
      }
      pub(super) fn get_001451() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 30u32)
        }))
      }
      pub(super) fn get_001447() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001448(),
          vec![get_001451()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001445() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001446(),
          CoreBinaryOperator::Plus(None),
          get_001447(),
        ))
      }
      pub(super) fn get_001444() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001445()))
      }
      pub(super) fn get_001368() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001369(), get_001374(), get_001444()))
      }
      pub(super) fn get_001361() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 30u32) },
              get_001362(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("from", 31u32) },
              get_001364(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("len", 32u32) },
              get_001366(),
            ),
          ],
          get_001368(),
        ))
      }
      pub(super) fn get_001204() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_001205()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_001206(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_001207(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_001211(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_001316(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_001317(),
            ),
          ],
          get_001361(),
        ))
      }
      pub(super) fn get_001452() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("startsWith"))
      }
      pub(super) fn get_001454() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_001455() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_001458() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_001457() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001458()))
      }
      pub(super) fn get_001459() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_001456() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_001457(),
          )],
          get_001459(),
        ))
      }
      pub(super) fn get_001462() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_001461() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001462()))
      }
      pub(super) fn get_001464() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_001463() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001464()))
      }
      pub(super) fn get_001468() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001470() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001471() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001469() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001470(),
          CoreBinaryOperator::And(None),
          get_001471(),
        ))
      }
      pub(super) fn get_001467() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001468(),
          CoreBinaryOperator::GreaterThan(None),
          get_001469(),
        ))
      }
      pub(super) fn get_001472() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_001466() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001467(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_001472(),
        ))
      }
      pub(super) fn get_001476() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001477() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001475() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001476(), get_001477()))
      }
      pub(super) fn get_001478() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_001474() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001475(),
          vec![get_001478()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001482() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001483() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001481() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001482(), get_001483()))
      }
      pub(super) fn get_001484() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_001480() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001481(),
          vec![get_001484()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001488() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001489() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001487() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001488(), get_001489()))
      }
      pub(super) fn get_001490() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_001486() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001487(),
          vec![get_001490()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001494() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_001493() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001494()))
      }
      pub(super) fn get_001496() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_001495() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001496()))
      }
      pub(super) fn get_001500() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001501() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001499() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001500(), get_001501()))
      }
      pub(super) fn get_001502() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_001498() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001499(),
          vec![get_001502()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001506() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001507() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_001505() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001506(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001507(),
        ))
      }
      pub(super) fn get_001510() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001511() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_001509() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001510(),
          CoreBinaryOperator::Minus(None),
          get_001511(),
        ))
      }
      pub(super) fn get_001512() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_001508() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001509(),
          CoreBinaryOperator::Plus(None),
          get_001512(),
        ))
      }
      pub(super) fn get_001515() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001516() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_001514() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001515(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001516(),
        ))
      }
      pub(super) fn get_001519() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001520() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_001518() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001519(),
          CoreBinaryOperator::Minus(None),
          get_001520(),
        ))
      }
      pub(super) fn get_001521() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_001517() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001518(),
          CoreBinaryOperator::Plus(None),
          get_001521(),
        ))
      }
      pub(super) fn get_001523() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001524() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_001522() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001523(),
          CoreBinaryOperator::Minus(None),
          get_001524(),
        ))
      }
      pub(super) fn get_001513() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001514(), get_001517(), get_001522()))
      }
      pub(super) fn get_001504() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001505(), get_001508(), get_001513()))
      }
      pub(super) fn get_001528() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001530() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001531() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001529() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001530(),
          CoreBinaryOperator::And(None),
          get_001531(),
        ))
      }
      pub(super) fn get_001527() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001528(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001529(),
        ))
      }
      pub(super) fn get_001532() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001526() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001527(),
          CoreBinaryOperator::LessThan(None),
          get_001532(),
        ))
      }
      pub(super) fn get_001534() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001536() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_001537() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001535() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001536(),
          CoreBinaryOperator::Plus(None),
          get_001537(),
        ))
      }
      pub(super) fn get_001533() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001534(),
          CoreBinaryOperator::Mult(None),
          get_001535(),
        ))
      }
      pub(super) fn get_001541() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001542() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_001540() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001541(), get_001542()))
      }
      pub(super) fn get_001543() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_001545() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_001546() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001544() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001545(), get_001546()]))
      }
      pub(super) fn get_001539() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001540(),
          vec![get_001543(), get_001544()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001538() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001539()))
      }
      pub(super) fn get_001525() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001526(), get_001533(), get_001538()))
      }
      pub(super) fn get_001503() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_001504(),
          )],
          get_001525(),
        ))
      }
      pub(super) fn get_001497() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_001498(),
          )],
          get_001503(),
        ))
      }
      pub(super) fn get_001492() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_001493(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_001495(),
            ),
          ],
          get_001497(),
        ))
      }
      pub(super) fn get_001549() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001550() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_001548() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001549(), get_001550()))
      }
      pub(super) fn get_001551() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_001554() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001555() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_001553() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001554(), get_001555()))
      }
      pub(super) fn get_001556() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_001552() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001553(),
          vec![get_001556()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001557() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001547() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001548(),
          vec![get_001551(), get_001552(), get_001557()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001491() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_001492(),
          )],
          get_001547(),
        ))
      }
      pub(super) fn get_001485() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_001486(),
          )],
          get_001491(),
        ))
      }
      pub(super) fn get_001479() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_001480(),
          )],
          get_001485(),
        ))
      }
      pub(super) fn get_001473() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_001474(),
          )],
          get_001479(),
        ))
      }
      pub(super) fn get_001561() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001562() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_001560() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001561(), get_001562()))
      }
      pub(super) fn get_001563() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_001564() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001559() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001560(),
          vec![get_001563(), get_001564()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001558() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001559()))
      }
      pub(super) fn get_001465() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001466(), get_001473(), get_001558()))
      }
      pub(super) fn get_001460() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_001461(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_001463(),
            ),
          ],
          get_001465(),
        ))
      }
      pub(super) fn get_001565() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_001569() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_001570() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001568() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001569(), get_001570()))
      }
      pub(super) fn get_001572() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_001573() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001571() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001572(), get_001573()))
      }
      pub(super) fn get_001567() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001568(),
          )],
          get_001571(),
        ))
      }
      pub(super) fn get_001576() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_001577() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001575() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001576(), get_001577()))
      }
      pub(super) fn get_001578() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001574() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001575(),
          )],
          get_001578(),
        ))
      }
      pub(super) fn get_001582() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001583() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_001581() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001582(), get_001583()))
      }
      pub(super) fn get_001584() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001585() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_001580() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001581(),
          vec![get_001584(), get_001585()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001588() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001589() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_001587() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001588(), get_001589()))
      }
      pub(super) fn get_001590() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_001593() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001594() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_001592() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001593(), get_001594()))
      }
      pub(super) fn get_001597() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001598() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001596() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001597(), get_001598()))
      }
      pub(super) fn get_001599() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_001595() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001596(),
          vec![get_001599()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001602() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_001601() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001602()))
      }
      pub(super) fn get_001605() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_001606() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_001604() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001605(), get_001606()))
      }
      pub(super) fn get_001609() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001608() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001609()]))
      }
      pub(super) fn get_001607() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001608()]))
      }
      pub(super) fn get_001603() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001604(),
          )],
          get_001607(),
        ))
      }
      pub(super) fn get_001600() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_001601(),
          )],
          get_001603(),
        ))
      }
      pub(super) fn get_001591() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001592(),
          vec![get_001595(), get_001600()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001586() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001587(),
          vec![get_001590(), get_001591()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001579() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_001580(),
          )],
          get_001586(),
        ))
      }
      pub(super) fn get_001566() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_001567(),
          get_001574(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_001579(),
        ))
      }
      pub(super) fn get_001612() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_001611() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001612()))
      }
      pub(super) fn get_001614() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_001613() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001614()))
      }
      pub(super) fn get_001619() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001620() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001618() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001619(), get_001620()))
      }
      pub(super) fn get_001621() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 34u32)
        }))
      }
      pub(super) fn get_001617() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001618(),
          vec![get_001621()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001624() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001625() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001623() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001624(), get_001625()))
      }
      pub(super) fn get_001626() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 35u32)
        }))
      }
      pub(super) fn get_001622() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001623(),
          vec![get_001626()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001616() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001617(),
          CoreBinaryOperator::LessThan(None),
          get_001622(),
        ))
      }
      pub(super) fn get_001627() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_001630() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001631() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_001629() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001630(), get_001631()))
      }
      pub(super) fn get_001634() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001635() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("substr"))
      }
      pub(super) fn get_001633() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001634(), get_001635()))
      }
      pub(super) fn get_001636() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 34u32)
        }))
      }
      pub(super) fn get_001637() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001640() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001641() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001639() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001640(), get_001641()))
      }
      pub(super) fn get_001642() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 35u32)
        }))
      }
      pub(super) fn get_001638() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001639(),
          vec![get_001642()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001632() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001633(),
          vec![get_001636(), get_001637(), get_001638()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001643() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 35u32)
        }))
      }
      pub(super) fn get_001628() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001629(),
          vec![get_001632(), get_001643()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001615() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001616(), get_001627(), get_001628()))
      }
      pub(super) fn get_001610() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 34u32) },
              get_001611(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 35u32) },
              get_001613(),
            ),
          ],
          get_001615(),
        ))
      }
      pub(super) fn get_001453() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_001454()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_001455(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_001456(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_001460(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_001565(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_001566(),
            ),
          ],
          get_001610(),
        ))
      }
      pub(super) fn get_001644() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("endsWith"))
      }
      pub(super) fn get_001646() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_001647() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_001650() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_001649() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001650()))
      }
      pub(super) fn get_001651() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_001648() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_001649(),
          )],
          get_001651(),
        ))
      }
      pub(super) fn get_001654() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_001653() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001654()))
      }
      pub(super) fn get_001656() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_001655() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001656()))
      }
      pub(super) fn get_001660() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001662() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001663() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001661() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001662(),
          CoreBinaryOperator::And(None),
          get_001663(),
        ))
      }
      pub(super) fn get_001659() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001660(),
          CoreBinaryOperator::GreaterThan(None),
          get_001661(),
        ))
      }
      pub(super) fn get_001664() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_001658() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001659(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_001664(),
        ))
      }
      pub(super) fn get_001668() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001669() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001667() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001668(), get_001669()))
      }
      pub(super) fn get_001670() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_001666() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001667(),
          vec![get_001670()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001674() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001675() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001673() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001674(), get_001675()))
      }
      pub(super) fn get_001676() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_001672() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001673(),
          vec![get_001676()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001680() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001681() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001679() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001680(), get_001681()))
      }
      pub(super) fn get_001682() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_001678() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001679(),
          vec![get_001682()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001686() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_001685() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001686()))
      }
      pub(super) fn get_001688() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_001687() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001688()))
      }
      pub(super) fn get_001692() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001693() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001691() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001692(), get_001693()))
      }
      pub(super) fn get_001694() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_001690() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001691(),
          vec![get_001694()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001698() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001699() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_001697() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001698(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001699(),
        ))
      }
      pub(super) fn get_001702() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001703() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_001701() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001702(),
          CoreBinaryOperator::Minus(None),
          get_001703(),
        ))
      }
      pub(super) fn get_001704() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_001700() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001701(),
          CoreBinaryOperator::Plus(None),
          get_001704(),
        ))
      }
      pub(super) fn get_001707() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001708() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_001706() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001707(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001708(),
        ))
      }
      pub(super) fn get_001711() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001712() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_001710() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001711(),
          CoreBinaryOperator::Minus(None),
          get_001712(),
        ))
      }
      pub(super) fn get_001713() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_001709() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001710(),
          CoreBinaryOperator::Plus(None),
          get_001713(),
        ))
      }
      pub(super) fn get_001715() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001716() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_001714() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001715(),
          CoreBinaryOperator::Minus(None),
          get_001716(),
        ))
      }
      pub(super) fn get_001705() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001706(), get_001709(), get_001714()))
      }
      pub(super) fn get_001696() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001697(), get_001700(), get_001705()))
      }
      pub(super) fn get_001720() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001722() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001723() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001721() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001722(),
          CoreBinaryOperator::And(None),
          get_001723(),
        ))
      }
      pub(super) fn get_001719() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001720(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001721(),
        ))
      }
      pub(super) fn get_001724() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001718() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001719(),
          CoreBinaryOperator::LessThan(None),
          get_001724(),
        ))
      }
      pub(super) fn get_001726() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001728() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_001729() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001727() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001728(),
          CoreBinaryOperator::Plus(None),
          get_001729(),
        ))
      }
      pub(super) fn get_001725() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001726(),
          CoreBinaryOperator::Mult(None),
          get_001727(),
        ))
      }
      pub(super) fn get_001733() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001734() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_001732() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001733(), get_001734()))
      }
      pub(super) fn get_001735() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_001737() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_001738() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001736() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001737(), get_001738()]))
      }
      pub(super) fn get_001731() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001732(),
          vec![get_001735(), get_001736()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001730() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001731()))
      }
      pub(super) fn get_001717() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001718(), get_001725(), get_001730()))
      }
      pub(super) fn get_001695() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_001696(),
          )],
          get_001717(),
        ))
      }
      pub(super) fn get_001689() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_001690(),
          )],
          get_001695(),
        ))
      }
      pub(super) fn get_001684() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_001685(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_001687(),
            ),
          ],
          get_001689(),
        ))
      }
      pub(super) fn get_001741() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001742() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_001740() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001741(), get_001742()))
      }
      pub(super) fn get_001743() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_001746() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001747() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_001745() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001746(), get_001747()))
      }
      pub(super) fn get_001748() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_001744() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001745(),
          vec![get_001748()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001749() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001739() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001740(),
          vec![get_001743(), get_001744(), get_001749()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001683() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_001684(),
          )],
          get_001739(),
        ))
      }
      pub(super) fn get_001677() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_001678(),
          )],
          get_001683(),
        ))
      }
      pub(super) fn get_001671() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_001672(),
          )],
          get_001677(),
        ))
      }
      pub(super) fn get_001665() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_001666(),
          )],
          get_001671(),
        ))
      }
      pub(super) fn get_001753() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001754() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_001752() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001753(), get_001754()))
      }
      pub(super) fn get_001755() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_001756() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001751() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001752(),
          vec![get_001755(), get_001756()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001750() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001751()))
      }
      pub(super) fn get_001657() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001658(), get_001665(), get_001750()))
      }
      pub(super) fn get_001652() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_001653(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_001655(),
            ),
          ],
          get_001657(),
        ))
      }
      pub(super) fn get_001757() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_001761() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_001762() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001760() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001761(), get_001762()))
      }
      pub(super) fn get_001764() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_001765() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001763() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001764(), get_001765()))
      }
      pub(super) fn get_001759() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001760(),
          )],
          get_001763(),
        ))
      }
      pub(super) fn get_001768() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_001769() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001767() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001768(), get_001769()))
      }
      pub(super) fn get_001770() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001766() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001767(),
          )],
          get_001770(),
        ))
      }
      pub(super) fn get_001774() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001775() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_001773() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001774(), get_001775()))
      }
      pub(super) fn get_001776() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001777() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_001772() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001773(),
          vec![get_001776(), get_001777()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001780() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001781() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_001779() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001780(), get_001781()))
      }
      pub(super) fn get_001782() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_001785() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001786() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_001784() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001785(), get_001786()))
      }
      pub(super) fn get_001789() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001790() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001788() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001789(), get_001790()))
      }
      pub(super) fn get_001791() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_001787() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001788(),
          vec![get_001791()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001794() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_001793() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001794()))
      }
      pub(super) fn get_001797() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_001798() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_001796() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001797(), get_001798()))
      }
      pub(super) fn get_001801() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001800() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001801()]))
      }
      pub(super) fn get_001799() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001800()]))
      }
      pub(super) fn get_001795() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001796(),
          )],
          get_001799(),
        ))
      }
      pub(super) fn get_001792() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_001793(),
          )],
          get_001795(),
        ))
      }
      pub(super) fn get_001783() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001784(),
          vec![get_001787(), get_001792()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001778() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001779(),
          vec![get_001782(), get_001783()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001771() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_001772(),
          )],
          get_001778(),
        ))
      }
      pub(super) fn get_001758() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_001759(),
          get_001766(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_001771(),
        ))
      }
      pub(super) fn get_001804() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_001803() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001804()))
      }
      pub(super) fn get_001806() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_001805() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001806()))
      }
      pub(super) fn get_001811() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001812() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001810() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001811(), get_001812()))
      }
      pub(super) fn get_001813() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 36u32)
        }))
      }
      pub(super) fn get_001809() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001810(),
          vec![get_001813()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001816() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001817() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001815() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001816(), get_001817()))
      }
      pub(super) fn get_001818() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 37u32)
        }))
      }
      pub(super) fn get_001814() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001815(),
          vec![get_001818()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001808() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001809(),
          CoreBinaryOperator::LessThan(None),
          get_001814(),
        ))
      }
      pub(super) fn get_001819() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_001822() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001823() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_001821() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001822(), get_001823()))
      }
      pub(super) fn get_001826() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001827() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("substr"))
      }
      pub(super) fn get_001825() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001826(), get_001827()))
      }
      pub(super) fn get_001828() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 36u32)
        }))
      }
      pub(super) fn get_001832() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001833() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001831() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001832(), get_001833()))
      }
      pub(super) fn get_001834() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 36u32)
        }))
      }
      pub(super) fn get_001830() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001831(),
          vec![get_001834()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001837() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001838() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001836() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001837(), get_001838()))
      }
      pub(super) fn get_001839() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 37u32)
        }))
      }
      pub(super) fn get_001835() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001836(),
          vec![get_001839()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001829() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001830(),
          CoreBinaryOperator::Minus(None),
          get_001835(),
        ))
      }
      pub(super) fn get_001842() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001843() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001841() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001842(), get_001843()))
      }
      pub(super) fn get_001844() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 37u32)
        }))
      }
      pub(super) fn get_001840() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001841(),
          vec![get_001844()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001824() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001825(),
          vec![get_001828(), get_001829(), get_001840()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001845() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 37u32)
        }))
      }
      pub(super) fn get_001820() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001821(),
          vec![get_001824(), get_001845()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001807() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001808(), get_001819(), get_001820()))
      }
      pub(super) fn get_001802() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 36u32) },
              get_001803(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 37u32) },
              get_001805(),
            ),
          ],
          get_001807(),
        ))
      }
      pub(super) fn get_001645() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_001646()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_001647(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_001648(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_001652(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_001757(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_001758(),
            ),
          ],
          get_001802(),
        ))
      }
      pub(super) fn get_001846() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("lstripChars"))
      }
      pub(super) fn get_001848() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_001849() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_001852() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_001851() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001852()))
      }
      pub(super) fn get_001853() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_001850() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_001851(),
          )],
          get_001853(),
        ))
      }
      pub(super) fn get_001856() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_001855() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001856()))
      }
      pub(super) fn get_001858() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_001857() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001858()))
      }
      pub(super) fn get_001862() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001864() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001865() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001863() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001864(),
          CoreBinaryOperator::And(None),
          get_001865(),
        ))
      }
      pub(super) fn get_001861() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001862(),
          CoreBinaryOperator::GreaterThan(None),
          get_001863(),
        ))
      }
      pub(super) fn get_001866() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_001860() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001861(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_001866(),
        ))
      }
      pub(super) fn get_001870() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001871() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001869() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001870(), get_001871()))
      }
      pub(super) fn get_001872() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_001868() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001869(),
          vec![get_001872()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001876() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001877() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001875() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001876(), get_001877()))
      }
      pub(super) fn get_001878() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_001874() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001875(),
          vec![get_001878()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001882() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001883() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001881() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001882(), get_001883()))
      }
      pub(super) fn get_001884() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_001880() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001881(),
          vec![get_001884()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001888() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_001887() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001888()))
      }
      pub(super) fn get_001890() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_001889() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001890()))
      }
      pub(super) fn get_001894() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001895() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_001893() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001894(), get_001895()))
      }
      pub(super) fn get_001896() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_001892() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001893(),
          vec![get_001896()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001900() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001901() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_001899() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001900(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001901(),
        ))
      }
      pub(super) fn get_001904() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001905() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_001903() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001904(),
          CoreBinaryOperator::Minus(None),
          get_001905(),
        ))
      }
      pub(super) fn get_001906() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_001902() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001903(),
          CoreBinaryOperator::Plus(None),
          get_001906(),
        ))
      }
      pub(super) fn get_001909() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001910() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_001908() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001909(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001910(),
        ))
      }
      pub(super) fn get_001913() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001914() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_001912() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001913(),
          CoreBinaryOperator::Minus(None),
          get_001914(),
        ))
      }
      pub(super) fn get_001915() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_001911() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001912(),
          CoreBinaryOperator::Plus(None),
          get_001915(),
        ))
      }
      pub(super) fn get_001917() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_001918() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_001916() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001917(),
          CoreBinaryOperator::Minus(None),
          get_001918(),
        ))
      }
      pub(super) fn get_001907() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001908(), get_001911(), get_001916()))
      }
      pub(super) fn get_001898() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001899(), get_001902(), get_001907()))
      }
      pub(super) fn get_001922() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001924() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001925() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001923() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001924(),
          CoreBinaryOperator::And(None),
          get_001925(),
        ))
      }
      pub(super) fn get_001921() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001922(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_001923(),
        ))
      }
      pub(super) fn get_001926() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001920() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001921(),
          CoreBinaryOperator::LessThan(None),
          get_001926(),
        ))
      }
      pub(super) fn get_001928() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001930() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_001931() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_001929() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001930(),
          CoreBinaryOperator::Plus(None),
          get_001931(),
        ))
      }
      pub(super) fn get_001927() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_001928(),
          CoreBinaryOperator::Mult(None),
          get_001929(),
        ))
      }
      pub(super) fn get_001935() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001936() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_001934() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001935(), get_001936()))
      }
      pub(super) fn get_001937() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_001939() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_001940() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001938() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_001939(), get_001940()]))
      }
      pub(super) fn get_001933() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001934(),
          vec![get_001937(), get_001938()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001932() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001933()))
      }
      pub(super) fn get_001919() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001920(), get_001927(), get_001932()))
      }
      pub(super) fn get_001897() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_001898(),
          )],
          get_001919(),
        ))
      }
      pub(super) fn get_001891() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_001892(),
          )],
          get_001897(),
        ))
      }
      pub(super) fn get_001886() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_001887(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_001889(),
            ),
          ],
          get_001891(),
        ))
      }
      pub(super) fn get_001943() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001944() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_001942() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001943(), get_001944()))
      }
      pub(super) fn get_001945() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_001948() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001949() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_001947() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001948(), get_001949()))
      }
      pub(super) fn get_001950() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_001946() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001947(),
          vec![get_001950()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001951() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001941() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001942(),
          vec![get_001945(), get_001946(), get_001951()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001885() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_001886(),
          )],
          get_001941(),
        ))
      }
      pub(super) fn get_001879() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_001880(),
          )],
          get_001885(),
        ))
      }
      pub(super) fn get_001873() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_001874(),
          )],
          get_001879(),
        ))
      }
      pub(super) fn get_001867() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_001868(),
          )],
          get_001873(),
        ))
      }
      pub(super) fn get_001955() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001956() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_001954() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001955(), get_001956()))
      }
      pub(super) fn get_001957() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_001958() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_001953() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001954(),
          vec![get_001957(), get_001958()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001952() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001953()))
      }
      pub(super) fn get_001859() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_001860(), get_001867(), get_001952()))
      }
      pub(super) fn get_001854() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_001855(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_001857(),
            ),
          ],
          get_001859(),
        ))
      }
      pub(super) fn get_001959() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_001963() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_001964() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001962() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001963(), get_001964()))
      }
      pub(super) fn get_001966() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_001967() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001965() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001966(), get_001967()))
      }
      pub(super) fn get_001961() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001962(),
          )],
          get_001965(),
        ))
      }
      pub(super) fn get_001970() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_001971() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001969() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001970(), get_001971()))
      }
      pub(super) fn get_001972() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_001968() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001969(),
          )],
          get_001972(),
        ))
      }
      pub(super) fn get_001976() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001977() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_001975() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001976(), get_001977()))
      }
      pub(super) fn get_001978() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_001979() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_001974() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001975(),
          vec![get_001978(), get_001979()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001982() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001983() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_001981() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001982(), get_001983()))
      }
      pub(super) fn get_001984() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_001987() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001988() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_001986() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001987(), get_001988()))
      }
      pub(super) fn get_001991() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_001992() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_001990() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001991(), get_001992()))
      }
      pub(super) fn get_001993() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_001989() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001990(),
          vec![get_001993()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001996() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_001995() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_001996()))
      }
      pub(super) fn get_001999() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_002000() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_001998() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_001999(), get_002000()))
      }
      pub(super) fn get_002003() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002002() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002003()]))
      }
      pub(super) fn get_002001() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002002()]))
      }
      pub(super) fn get_001997() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_001998(),
          )],
          get_002001(),
        ))
      }
      pub(super) fn get_001994() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_001995(),
          )],
          get_001997(),
        ))
      }
      pub(super) fn get_001985() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001986(),
          vec![get_001989(), get_001994()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001980() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_001981(),
          vec![get_001984(), get_001985()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_001973() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_001974(),
          )],
          get_001980(),
        ))
      }
      pub(super) fn get_001960() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_001961(),
          get_001968(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_001973(),
        ))
      }
      pub(super) fn get_002006() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_002005() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002006()))
      }
      pub(super) fn get_002008() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'chars' not bound"))
      }
      pub(super) fn get_002007() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002008()))
      }
      pub(super) fn get_002013() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002014() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_002012() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002013(), get_002014()))
      }
      pub(super) fn get_002015() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 38u32)
        }))
      }
      pub(super) fn get_002011() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002012(),
          vec![get_002015()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002017() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002020() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002021() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("member"))
      }
      pub(super) fn get_002019() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002020(), get_002021()))
      }
      pub(super) fn get_002022() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("chars", 39u32)
        }))
      }
      pub(super) fn get_002024() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 38u32)
        }))
      }
      pub(super) fn get_002025() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002023() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002024(), get_002025()))
      }
      pub(super) fn get_002018() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002019(),
          vec![get_002022(), get_002023()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002016() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002017(),
          CoreBinaryOperator::And(None),
          get_002018(),
        ))
      }
      pub(super) fn get_002010() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002011(),
          CoreBinaryOperator::GreaterThan(None),
          get_002016(),
        ))
      }
      pub(super) fn get_002028() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002029() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("lstripChars"))
      }
      pub(super) fn get_002027() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002028(), get_002029()))
      }
      pub(super) fn get_002032() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002033() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_002031() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002032(), get_002033()))
      }
      pub(super) fn get_002034() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 38u32)
        }))
      }
      pub(super) fn get_002035() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_002036() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_002037() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_002030() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002031(),
          vec![get_002034(), get_002035(), get_002036(), get_002037()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002038() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("chars", 39u32)
        }))
      }
      pub(super) fn get_002026() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002027(),
          vec![get_002030(), get_002038()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002039() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 38u32)
        }))
      }
      pub(super) fn get_002009() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002010(), get_002026(), get_002039()))
      }
      pub(super) fn get_002004() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 38u32) },
              get_002005(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("chars", 39u32) },
              get_002007(),
            ),
          ],
          get_002009(),
        ))
      }
      pub(super) fn get_001847() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_001848()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_001849(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_001850(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_001854(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_001959(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_001960(),
            ),
          ],
          get_002004(),
        ))
      }
      pub(super) fn get_002040() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("rstripChars"))
      }
      pub(super) fn get_002042() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_002043() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_002046() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_002045() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002046()))
      }
      pub(super) fn get_002047() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_002044() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_002045(),
          )],
          get_002047(),
        ))
      }
      pub(super) fn get_002050() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_002049() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002050()))
      }
      pub(super) fn get_002052() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_002051() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002052()))
      }
      pub(super) fn get_002056() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002058() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002059() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002057() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002058(),
          CoreBinaryOperator::And(None),
          get_002059(),
        ))
      }
      pub(super) fn get_002055() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002056(),
          CoreBinaryOperator::GreaterThan(None),
          get_002057(),
        ))
      }
      pub(super) fn get_002060() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_002054() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002055(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_002060(),
        ))
      }
      pub(super) fn get_002064() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002065() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002063() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002064(), get_002065()))
      }
      pub(super) fn get_002066() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_002062() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002063(),
          vec![get_002066()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002070() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002071() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002069() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002070(), get_002071()))
      }
      pub(super) fn get_002072() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_002068() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002069(),
          vec![get_002072()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002076() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002077() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002075() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002076(), get_002077()))
      }
      pub(super) fn get_002078() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_002074() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002075(),
          vec![get_002078()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002082() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_002081() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002082()))
      }
      pub(super) fn get_002084() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_002083() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002084()))
      }
      pub(super) fn get_002088() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002089() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002087() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002088(), get_002089()))
      }
      pub(super) fn get_002090() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_002086() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002087(),
          vec![get_002090()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002094() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002095() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_002093() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002094(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002095(),
        ))
      }
      pub(super) fn get_002098() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002099() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_002097() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002098(),
          CoreBinaryOperator::Minus(None),
          get_002099(),
        ))
      }
      pub(super) fn get_002100() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_002096() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002097(),
          CoreBinaryOperator::Plus(None),
          get_002100(),
        ))
      }
      pub(super) fn get_002103() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002104() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_002102() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002103(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002104(),
        ))
      }
      pub(super) fn get_002107() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002108() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_002106() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002107(),
          CoreBinaryOperator::Minus(None),
          get_002108(),
        ))
      }
      pub(super) fn get_002109() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_002105() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002106(),
          CoreBinaryOperator::Plus(None),
          get_002109(),
        ))
      }
      pub(super) fn get_002111() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002112() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_002110() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002111(),
          CoreBinaryOperator::Minus(None),
          get_002112(),
        ))
      }
      pub(super) fn get_002101() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002102(), get_002105(), get_002110()))
      }
      pub(super) fn get_002092() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002093(), get_002096(), get_002101()))
      }
      pub(super) fn get_002116() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002118() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002119() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002117() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002118(),
          CoreBinaryOperator::And(None),
          get_002119(),
        ))
      }
      pub(super) fn get_002115() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002116(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002117(),
        ))
      }
      pub(super) fn get_002120() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002114() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002115(),
          CoreBinaryOperator::LessThan(None),
          get_002120(),
        ))
      }
      pub(super) fn get_002122() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002124() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_002125() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002123() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002124(),
          CoreBinaryOperator::Plus(None),
          get_002125(),
        ))
      }
      pub(super) fn get_002121() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002122(),
          CoreBinaryOperator::Mult(None),
          get_002123(),
        ))
      }
      pub(super) fn get_002129() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002130() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_002128() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002129(), get_002130()))
      }
      pub(super) fn get_002131() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_002133() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_002134() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002132() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002133(), get_002134()]))
      }
      pub(super) fn get_002127() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002128(),
          vec![get_002131(), get_002132()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002126() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002127()))
      }
      pub(super) fn get_002113() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002114(), get_002121(), get_002126()))
      }
      pub(super) fn get_002091() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_002092(),
          )],
          get_002113(),
        ))
      }
      pub(super) fn get_002085() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_002086(),
          )],
          get_002091(),
        ))
      }
      pub(super) fn get_002080() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_002081(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_002083(),
            ),
          ],
          get_002085(),
        ))
      }
      pub(super) fn get_002137() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002138() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_002136() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002137(), get_002138()))
      }
      pub(super) fn get_002139() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_002142() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002143() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_002141() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002142(), get_002143()))
      }
      pub(super) fn get_002144() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_002140() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002141(),
          vec![get_002144()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002145() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002135() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002136(),
          vec![get_002139(), get_002140(), get_002145()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002079() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_002080(),
          )],
          get_002135(),
        ))
      }
      pub(super) fn get_002073() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_002074(),
          )],
          get_002079(),
        ))
      }
      pub(super) fn get_002067() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_002068(),
          )],
          get_002073(),
        ))
      }
      pub(super) fn get_002061() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_002062(),
          )],
          get_002067(),
        ))
      }
      pub(super) fn get_002149() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002150() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_002148() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002149(), get_002150()))
      }
      pub(super) fn get_002151() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_002152() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002147() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002148(),
          vec![get_002151(), get_002152()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002146() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002147()))
      }
      pub(super) fn get_002053() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002054(), get_002061(), get_002146()))
      }
      pub(super) fn get_002048() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_002049(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_002051(),
            ),
          ],
          get_002053(),
        ))
      }
      pub(super) fn get_002153() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_002157() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_002158() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002156() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002157(), get_002158()))
      }
      pub(super) fn get_002160() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_002161() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002159() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002160(), get_002161()))
      }
      pub(super) fn get_002155() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002156(),
          )],
          get_002159(),
        ))
      }
      pub(super) fn get_002164() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_002165() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002163() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002164(), get_002165()))
      }
      pub(super) fn get_002166() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002162() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002163(),
          )],
          get_002166(),
        ))
      }
      pub(super) fn get_002170() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002171() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_002169() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002170(), get_002171()))
      }
      pub(super) fn get_002172() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002173() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_002168() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002169(),
          vec![get_002172(), get_002173()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002176() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002177() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_002175() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002176(), get_002177()))
      }
      pub(super) fn get_002178() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_002181() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002182() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_002180() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002181(), get_002182()))
      }
      pub(super) fn get_002185() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002186() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_002184() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002185(), get_002186()))
      }
      pub(super) fn get_002187() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_002183() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002184(),
          vec![get_002187()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002190() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_002189() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002190()))
      }
      pub(super) fn get_002193() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_002194() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_002192() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002193(), get_002194()))
      }
      pub(super) fn get_002197() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002196() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002197()]))
      }
      pub(super) fn get_002195() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002196()]))
      }
      pub(super) fn get_002191() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002192(),
          )],
          get_002195(),
        ))
      }
      pub(super) fn get_002188() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_002189(),
          )],
          get_002191(),
        ))
      }
      pub(super) fn get_002179() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002180(),
          vec![get_002183(), get_002188()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002174() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002175(),
          vec![get_002178(), get_002179()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002167() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_002168(),
          )],
          get_002174(),
        ))
      }
      pub(super) fn get_002154() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_002155(),
          get_002162(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_002167(),
        ))
      }
      pub(super) fn get_002200() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_002199() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002200()))
      }
      pub(super) fn get_002202() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'chars' not bound"))
      }
      pub(super) fn get_002201() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002202()))
      }
      pub(super) fn get_002206() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002207() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_002205() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002206(), get_002207()))
      }
      pub(super) fn get_002208() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 40u32)
        }))
      }
      pub(super) fn get_002204() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002205(),
          vec![get_002208()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002211() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("len", 42u32)
        }))
      }
      pub(super) fn get_002213() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002216() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002217() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("member"))
      }
      pub(super) fn get_002215() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002216(), get_002217()))
      }
      pub(super) fn get_002218() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("chars", 41u32)
        }))
      }
      pub(super) fn get_002220() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 40u32)
        }))
      }
      pub(super) fn get_002222() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("len", 42u32)
        }))
      }
      pub(super) fn get_002223() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_002221() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002222(),
          CoreBinaryOperator::Minus(None),
          get_002223(),
        ))
      }
      pub(super) fn get_002219() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002220(), get_002221()))
      }
      pub(super) fn get_002214() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002215(),
          vec![get_002218(), get_002219()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002212() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002213(),
          CoreBinaryOperator::And(None),
          get_002214(),
        ))
      }
      pub(super) fn get_002210() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002211(),
          CoreBinaryOperator::GreaterThan(None),
          get_002212(),
        ))
      }
      pub(super) fn get_002226() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002227() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("rstripChars"))
      }
      pub(super) fn get_002225() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002226(), get_002227()))
      }
      pub(super) fn get_002230() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002231() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_002229() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002230(), get_002231()))
      }
      pub(super) fn get_002232() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 40u32)
        }))
      }
      pub(super) fn get_002233() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_002235() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("len", 42u32)
        }))
      }
      pub(super) fn get_002236() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_002234() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002235(),
          CoreBinaryOperator::Minus(None),
          get_002236(),
        ))
      }
      pub(super) fn get_002237() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_002228() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002229(),
          vec![get_002232(), get_002233(), get_002234(), get_002237()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002238() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("chars", 41u32)
        }))
      }
      pub(super) fn get_002224() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002225(),
          vec![get_002228(), get_002238()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002239() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 40u32)
        }))
      }
      pub(super) fn get_002209() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002210(), get_002224(), get_002239()))
      }
      pub(super) fn get_002203() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("len", 42u32) },
            get_002204(),
          )],
          get_002209(),
        ))
      }
      pub(super) fn get_002198() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 40u32) },
              get_002199(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("chars", 41u32) },
              get_002201(),
            ),
          ],
          get_002203(),
        ))
      }
      pub(super) fn get_002041() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_002042()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_002043(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_002044(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_002048(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_002153(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_002154(),
            ),
          ],
          get_002198(),
        ))
      }
      pub(super) fn get_002240() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stripChars"))
      }
      pub(super) fn get_002242() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_002243() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_002246() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_002245() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002246()))
      }
      pub(super) fn get_002247() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_002244() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_002245(),
          )],
          get_002247(),
        ))
      }
      pub(super) fn get_002250() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_002249() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002250()))
      }
      pub(super) fn get_002252() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_002251() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002252()))
      }
      pub(super) fn get_002256() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002258() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002259() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002257() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002258(),
          CoreBinaryOperator::And(None),
          get_002259(),
        ))
      }
      pub(super) fn get_002255() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002256(),
          CoreBinaryOperator::GreaterThan(None),
          get_002257(),
        ))
      }
      pub(super) fn get_002260() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_002254() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002255(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_002260(),
        ))
      }
      pub(super) fn get_002264() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002265() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002263() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002264(), get_002265()))
      }
      pub(super) fn get_002266() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_002262() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002263(),
          vec![get_002266()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002270() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002271() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002269() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002270(), get_002271()))
      }
      pub(super) fn get_002272() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_002268() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002269(),
          vec![get_002272()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002276() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002277() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002275() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002276(), get_002277()))
      }
      pub(super) fn get_002278() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_002274() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002275(),
          vec![get_002278()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002282() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_002281() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002282()))
      }
      pub(super) fn get_002284() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_002283() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002284()))
      }
      pub(super) fn get_002288() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002289() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002287() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002288(), get_002289()))
      }
      pub(super) fn get_002290() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_002286() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002287(),
          vec![get_002290()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002294() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002295() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_002293() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002294(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002295(),
        ))
      }
      pub(super) fn get_002298() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002299() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_002297() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002298(),
          CoreBinaryOperator::Minus(None),
          get_002299(),
        ))
      }
      pub(super) fn get_002300() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_002296() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002297(),
          CoreBinaryOperator::Plus(None),
          get_002300(),
        ))
      }
      pub(super) fn get_002303() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002304() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_002302() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002303(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002304(),
        ))
      }
      pub(super) fn get_002307() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002308() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_002306() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002307(),
          CoreBinaryOperator::Minus(None),
          get_002308(),
        ))
      }
      pub(super) fn get_002309() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_002305() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002306(),
          CoreBinaryOperator::Plus(None),
          get_002309(),
        ))
      }
      pub(super) fn get_002311() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002312() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_002310() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002311(),
          CoreBinaryOperator::Minus(None),
          get_002312(),
        ))
      }
      pub(super) fn get_002301() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002302(), get_002305(), get_002310()))
      }
      pub(super) fn get_002292() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002293(), get_002296(), get_002301()))
      }
      pub(super) fn get_002316() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002318() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002319() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002317() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002318(),
          CoreBinaryOperator::And(None),
          get_002319(),
        ))
      }
      pub(super) fn get_002315() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002316(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002317(),
        ))
      }
      pub(super) fn get_002320() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002314() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002315(),
          CoreBinaryOperator::LessThan(None),
          get_002320(),
        ))
      }
      pub(super) fn get_002322() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002324() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_002325() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002323() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002324(),
          CoreBinaryOperator::Plus(None),
          get_002325(),
        ))
      }
      pub(super) fn get_002321() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002322(),
          CoreBinaryOperator::Mult(None),
          get_002323(),
        ))
      }
      pub(super) fn get_002329() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002330() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_002328() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002329(), get_002330()))
      }
      pub(super) fn get_002331() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_002333() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_002334() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002332() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002333(), get_002334()]))
      }
      pub(super) fn get_002327() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002328(),
          vec![get_002331(), get_002332()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002326() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002327()))
      }
      pub(super) fn get_002313() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002314(), get_002321(), get_002326()))
      }
      pub(super) fn get_002291() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_002292(),
          )],
          get_002313(),
        ))
      }
      pub(super) fn get_002285() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_002286(),
          )],
          get_002291(),
        ))
      }
      pub(super) fn get_002280() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_002281(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_002283(),
            ),
          ],
          get_002285(),
        ))
      }
      pub(super) fn get_002337() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002338() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_002336() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002337(), get_002338()))
      }
      pub(super) fn get_002339() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_002342() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002343() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_002341() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002342(), get_002343()))
      }
      pub(super) fn get_002344() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_002340() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002341(),
          vec![get_002344()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002345() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002335() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002336(),
          vec![get_002339(), get_002340(), get_002345()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002279() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_002280(),
          )],
          get_002335(),
        ))
      }
      pub(super) fn get_002273() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_002274(),
          )],
          get_002279(),
        ))
      }
      pub(super) fn get_002267() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_002268(),
          )],
          get_002273(),
        ))
      }
      pub(super) fn get_002261() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_002262(),
          )],
          get_002267(),
        ))
      }
      pub(super) fn get_002349() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002350() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_002348() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002349(), get_002350()))
      }
      pub(super) fn get_002351() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_002352() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002347() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002348(),
          vec![get_002351(), get_002352()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002346() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002347()))
      }
      pub(super) fn get_002253() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002254(), get_002261(), get_002346()))
      }
      pub(super) fn get_002248() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_002249(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_002251(),
            ),
          ],
          get_002253(),
        ))
      }
      pub(super) fn get_002353() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_002357() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_002358() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002356() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002357(), get_002358()))
      }
      pub(super) fn get_002360() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_002361() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002359() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002360(), get_002361()))
      }
      pub(super) fn get_002355() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002356(),
          )],
          get_002359(),
        ))
      }
      pub(super) fn get_002364() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_002365() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002363() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002364(), get_002365()))
      }
      pub(super) fn get_002366() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002362() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002363(),
          )],
          get_002366(),
        ))
      }
      pub(super) fn get_002370() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002371() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_002369() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002370(), get_002371()))
      }
      pub(super) fn get_002372() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002373() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_002368() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002369(),
          vec![get_002372(), get_002373()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002376() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002377() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_002375() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002376(), get_002377()))
      }
      pub(super) fn get_002378() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_002381() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002382() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_002380() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002381(), get_002382()))
      }
      pub(super) fn get_002385() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002386() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_002384() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002385(), get_002386()))
      }
      pub(super) fn get_002387() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_002383() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002384(),
          vec![get_002387()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002390() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_002389() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002390()))
      }
      pub(super) fn get_002393() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_002394() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_002392() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002393(), get_002394()))
      }
      pub(super) fn get_002397() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002396() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002397()]))
      }
      pub(super) fn get_002395() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002396()]))
      }
      pub(super) fn get_002391() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002392(),
          )],
          get_002395(),
        ))
      }
      pub(super) fn get_002388() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_002389(),
          )],
          get_002391(),
        ))
      }
      pub(super) fn get_002379() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002380(),
          vec![get_002383(), get_002388()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002374() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002375(),
          vec![get_002378(), get_002379()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002367() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_002368(),
          )],
          get_002374(),
        ))
      }
      pub(super) fn get_002354() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_002355(),
          get_002362(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_002367(),
        ))
      }
      pub(super) fn get_002400() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_002399() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002400()))
      }
      pub(super) fn get_002402() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'chars' not bound"))
      }
      pub(super) fn get_002401() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002402()))
      }
      pub(super) fn get_002405() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002406() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("lstripChars"))
      }
      pub(super) fn get_002404() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002405(), get_002406()))
      }
      pub(super) fn get_002409() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002410() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("rstripChars"))
      }
      pub(super) fn get_002408() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002409(), get_002410()))
      }
      pub(super) fn get_002411() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 43u32)
        }))
      }
      pub(super) fn get_002412() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("chars", 44u32)
        }))
      }
      pub(super) fn get_002407() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002408(),
          vec![get_002411(), get_002412()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002413() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("chars", 44u32)
        }))
      }
      pub(super) fn get_002403() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002404(),
          vec![get_002407(), get_002413()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002398() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 43u32) },
              get_002399(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("chars", 44u32) },
              get_002401(),
            ),
          ],
          get_002403(),
        ))
      }
      pub(super) fn get_002241() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_002242()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_002243(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_002244(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_002248(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_002353(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_002354(),
            ),
          ],
          get_002398(),
        ))
      }
      pub(super) fn get_002414() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_002416() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_002417() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_002420() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_002419() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002420()))
      }
      pub(super) fn get_002421() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_002418() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_002419(),
          )],
          get_002421(),
        ))
      }
      pub(super) fn get_002424() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_002423() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002424()))
      }
      pub(super) fn get_002426() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_002425() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002426()))
      }
      pub(super) fn get_002430() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002432() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002433() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002431() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002432(),
          CoreBinaryOperator::And(None),
          get_002433(),
        ))
      }
      pub(super) fn get_002429() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002430(),
          CoreBinaryOperator::GreaterThan(None),
          get_002431(),
        ))
      }
      pub(super) fn get_002434() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_002428() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002429(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_002434(),
        ))
      }
      pub(super) fn get_002438() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002439() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002437() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002438(), get_002439()))
      }
      pub(super) fn get_002440() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_002436() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002437(),
          vec![get_002440()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002444() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002445() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002443() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002444(), get_002445()))
      }
      pub(super) fn get_002446() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_002442() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002443(),
          vec![get_002446()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002450() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002451() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002449() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002450(), get_002451()))
      }
      pub(super) fn get_002452() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_002448() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002449(),
          vec![get_002452()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002456() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_002455() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002456()))
      }
      pub(super) fn get_002458() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_002457() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002458()))
      }
      pub(super) fn get_002462() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002463() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002461() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002462(), get_002463()))
      }
      pub(super) fn get_002464() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_002460() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002461(),
          vec![get_002464()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002468() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002469() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_002467() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002468(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002469(),
        ))
      }
      pub(super) fn get_002472() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002473() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_002471() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002472(),
          CoreBinaryOperator::Minus(None),
          get_002473(),
        ))
      }
      pub(super) fn get_002474() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_002470() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002471(),
          CoreBinaryOperator::Plus(None),
          get_002474(),
        ))
      }
      pub(super) fn get_002477() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002478() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_002476() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002477(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002478(),
        ))
      }
      pub(super) fn get_002481() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002482() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_002480() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002481(),
          CoreBinaryOperator::Minus(None),
          get_002482(),
        ))
      }
      pub(super) fn get_002483() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_002479() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002480(),
          CoreBinaryOperator::Plus(None),
          get_002483(),
        ))
      }
      pub(super) fn get_002485() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002486() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_002484() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002485(),
          CoreBinaryOperator::Minus(None),
          get_002486(),
        ))
      }
      pub(super) fn get_002475() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002476(), get_002479(), get_002484()))
      }
      pub(super) fn get_002466() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002467(), get_002470(), get_002475()))
      }
      pub(super) fn get_002490() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002492() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002493() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002491() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002492(),
          CoreBinaryOperator::And(None),
          get_002493(),
        ))
      }
      pub(super) fn get_002489() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002490(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002491(),
        ))
      }
      pub(super) fn get_002494() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002488() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002489(),
          CoreBinaryOperator::LessThan(None),
          get_002494(),
        ))
      }
      pub(super) fn get_002496() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002498() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_002499() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002497() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002498(),
          CoreBinaryOperator::Plus(None),
          get_002499(),
        ))
      }
      pub(super) fn get_002495() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002496(),
          CoreBinaryOperator::Mult(None),
          get_002497(),
        ))
      }
      pub(super) fn get_002503() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002504() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_002502() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002503(), get_002504()))
      }
      pub(super) fn get_002505() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_002507() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_002508() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002506() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002507(), get_002508()]))
      }
      pub(super) fn get_002501() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002502(),
          vec![get_002505(), get_002506()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002500() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002501()))
      }
      pub(super) fn get_002487() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002488(), get_002495(), get_002500()))
      }
      pub(super) fn get_002465() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_002466(),
          )],
          get_002487(),
        ))
      }
      pub(super) fn get_002459() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_002460(),
          )],
          get_002465(),
        ))
      }
      pub(super) fn get_002454() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_002455(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_002457(),
            ),
          ],
          get_002459(),
        ))
      }
      pub(super) fn get_002511() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002512() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_002510() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002511(), get_002512()))
      }
      pub(super) fn get_002513() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_002516() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002517() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_002515() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002516(), get_002517()))
      }
      pub(super) fn get_002518() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_002514() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002515(),
          vec![get_002518()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002519() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002509() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002510(),
          vec![get_002513(), get_002514(), get_002519()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002453() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_002454(),
          )],
          get_002509(),
        ))
      }
      pub(super) fn get_002447() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_002448(),
          )],
          get_002453(),
        ))
      }
      pub(super) fn get_002441() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_002442(),
          )],
          get_002447(),
        ))
      }
      pub(super) fn get_002435() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_002436(),
          )],
          get_002441(),
        ))
      }
      pub(super) fn get_002523() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002524() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_002522() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002523(), get_002524()))
      }
      pub(super) fn get_002525() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_002526() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002521() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002522(),
          vec![get_002525(), get_002526()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002520() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002521()))
      }
      pub(super) fn get_002427() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002428(), get_002435(), get_002520()))
      }
      pub(super) fn get_002422() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_002423(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_002425(),
            ),
          ],
          get_002427(),
        ))
      }
      pub(super) fn get_002527() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_002531() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_002532() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002530() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002531(), get_002532()))
      }
      pub(super) fn get_002534() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_002535() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002533() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002534(), get_002535()))
      }
      pub(super) fn get_002529() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002530(),
          )],
          get_002533(),
        ))
      }
      pub(super) fn get_002538() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_002539() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002537() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002538(), get_002539()))
      }
      pub(super) fn get_002540() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002536() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002537(),
          )],
          get_002540(),
        ))
      }
      pub(super) fn get_002544() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002545() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_002543() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002544(), get_002545()))
      }
      pub(super) fn get_002546() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002547() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_002542() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002543(),
          vec![get_002546(), get_002547()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002550() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002551() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_002549() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002550(), get_002551()))
      }
      pub(super) fn get_002552() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_002555() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002556() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_002554() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002555(), get_002556()))
      }
      pub(super) fn get_002559() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002560() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_002558() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002559(), get_002560()))
      }
      pub(super) fn get_002561() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_002557() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002558(),
          vec![get_002561()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002564() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_002563() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002564()))
      }
      pub(super) fn get_002567() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_002568() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_002566() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002567(), get_002568()))
      }
      pub(super) fn get_002571() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002570() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002571()]))
      }
      pub(super) fn get_002569() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002570()]))
      }
      pub(super) fn get_002565() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002566(),
          )],
          get_002569(),
        ))
      }
      pub(super) fn get_002562() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_002563(),
          )],
          get_002565(),
        ))
      }
      pub(super) fn get_002553() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002554(),
          vec![get_002557(), get_002562()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002548() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002549(),
          vec![get_002552(), get_002553()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002541() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_002542(),
          )],
          get_002548(),
        ))
      }
      pub(super) fn get_002528() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_002529(),
          get_002536(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_002541(),
        ))
      }
      pub(super) fn get_002574() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_002573() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002574()))
      }
      pub(super) fn get_002577() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002578() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_002576() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002577(), get_002578()))
      }
      pub(super) fn get_002581() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002582() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_002580() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002581(), get_002582()))
      }
      pub(super) fn get_002583() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 45u32)
        }))
      }
      pub(super) fn get_002579() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002580(),
          vec![get_002583()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002586() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_002585() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002586()))
      }
      pub(super) fn get_002588() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 45u32)
        }))
      }
      pub(super) fn get_002589() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 46u32)
        }))
      }
      pub(super) fn get_002587() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002588(), get_002589()))
      }
      pub(super) fn get_002584() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 46u32) },
            get_002585(),
          )],
          get_002587(),
        ))
      }
      pub(super) fn get_002575() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002576(),
          vec![get_002579(), get_002584()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002572() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str", 45u32) },
            get_002573(),
          )],
          get_002575(),
        ))
      }
      pub(super) fn get_002415() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_002416()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_002417(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_002418(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_002422(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_002527(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_002528(),
            ),
          ],
          get_002572(),
        ))
      }
      pub(super) fn get_002590() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("parseInt"))
      }
      pub(super) fn get_002592() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_002593() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_002596() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_002595() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002596()))
      }
      pub(super) fn get_002597() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_002594() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_002595(),
          )],
          get_002597(),
        ))
      }
      pub(super) fn get_002600() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_002599() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002600()))
      }
      pub(super) fn get_002602() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_002601() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002602()))
      }
      pub(super) fn get_002606() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002608() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002609() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002607() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002608(),
          CoreBinaryOperator::And(None),
          get_002609(),
        ))
      }
      pub(super) fn get_002605() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002606(),
          CoreBinaryOperator::GreaterThan(None),
          get_002607(),
        ))
      }
      pub(super) fn get_002610() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_002604() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002605(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_002610(),
        ))
      }
      pub(super) fn get_002614() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002615() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002613() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002614(), get_002615()))
      }
      pub(super) fn get_002616() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_002612() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002613(),
          vec![get_002616()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002620() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002621() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002619() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002620(), get_002621()))
      }
      pub(super) fn get_002622() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_002618() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002619(),
          vec![get_002622()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002626() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002627() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002625() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002626(), get_002627()))
      }
      pub(super) fn get_002628() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_002624() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002625(),
          vec![get_002628()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002632() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_002631() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002632()))
      }
      pub(super) fn get_002634() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_002633() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002634()))
      }
      pub(super) fn get_002638() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002639() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002637() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002638(), get_002639()))
      }
      pub(super) fn get_002640() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_002636() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002637(),
          vec![get_002640()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002644() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002645() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_002643() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002644(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002645(),
        ))
      }
      pub(super) fn get_002648() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002649() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_002647() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002648(),
          CoreBinaryOperator::Minus(None),
          get_002649(),
        ))
      }
      pub(super) fn get_002650() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_002646() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002647(),
          CoreBinaryOperator::Plus(None),
          get_002650(),
        ))
      }
      pub(super) fn get_002653() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002654() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_002652() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002653(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002654(),
        ))
      }
      pub(super) fn get_002657() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002658() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_002656() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002657(),
          CoreBinaryOperator::Minus(None),
          get_002658(),
        ))
      }
      pub(super) fn get_002659() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_002655() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002656(),
          CoreBinaryOperator::Plus(None),
          get_002659(),
        ))
      }
      pub(super) fn get_002661() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002662() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_002660() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002661(),
          CoreBinaryOperator::Minus(None),
          get_002662(),
        ))
      }
      pub(super) fn get_002651() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002652(), get_002655(), get_002660()))
      }
      pub(super) fn get_002642() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002643(), get_002646(), get_002651()))
      }
      pub(super) fn get_002666() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002668() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002669() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002667() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002668(),
          CoreBinaryOperator::And(None),
          get_002669(),
        ))
      }
      pub(super) fn get_002665() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002666(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002667(),
        ))
      }
      pub(super) fn get_002670() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002664() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002665(),
          CoreBinaryOperator::LessThan(None),
          get_002670(),
        ))
      }
      pub(super) fn get_002672() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002674() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_002675() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002673() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002674(),
          CoreBinaryOperator::Plus(None),
          get_002675(),
        ))
      }
      pub(super) fn get_002671() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002672(),
          CoreBinaryOperator::Mult(None),
          get_002673(),
        ))
      }
      pub(super) fn get_002679() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002680() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_002678() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002679(), get_002680()))
      }
      pub(super) fn get_002681() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_002683() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_002684() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002682() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002683(), get_002684()]))
      }
      pub(super) fn get_002677() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002678(),
          vec![get_002681(), get_002682()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002676() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002677()))
      }
      pub(super) fn get_002663() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002664(), get_002671(), get_002676()))
      }
      pub(super) fn get_002641() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_002642(),
          )],
          get_002663(),
        ))
      }
      pub(super) fn get_002635() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_002636(),
          )],
          get_002641(),
        ))
      }
      pub(super) fn get_002630() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_002631(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_002633(),
            ),
          ],
          get_002635(),
        ))
      }
      pub(super) fn get_002687() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002688() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_002686() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002687(), get_002688()))
      }
      pub(super) fn get_002689() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_002692() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002693() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_002691() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002692(), get_002693()))
      }
      pub(super) fn get_002694() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_002690() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002691(),
          vec![get_002694()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002695() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002685() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002686(),
          vec![get_002689(), get_002690(), get_002695()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002629() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_002630(),
          )],
          get_002685(),
        ))
      }
      pub(super) fn get_002623() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_002624(),
          )],
          get_002629(),
        ))
      }
      pub(super) fn get_002617() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_002618(),
          )],
          get_002623(),
        ))
      }
      pub(super) fn get_002611() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_002612(),
          )],
          get_002617(),
        ))
      }
      pub(super) fn get_002699() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002700() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_002698() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002699(), get_002700()))
      }
      pub(super) fn get_002701() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_002702() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002697() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002698(),
          vec![get_002701(), get_002702()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002696() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002697()))
      }
      pub(super) fn get_002603() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002604(), get_002611(), get_002696()))
      }
      pub(super) fn get_002598() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_002599(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_002601(),
            ),
          ],
          get_002603(),
        ))
      }
      pub(super) fn get_002703() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_002707() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_002708() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002706() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002707(), get_002708()))
      }
      pub(super) fn get_002710() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_002711() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002709() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002710(), get_002711()))
      }
      pub(super) fn get_002705() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002706(),
          )],
          get_002709(),
        ))
      }
      pub(super) fn get_002714() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_002715() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002713() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002714(), get_002715()))
      }
      pub(super) fn get_002716() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002712() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002713(),
          )],
          get_002716(),
        ))
      }
      pub(super) fn get_002720() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002721() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_002719() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002720(), get_002721()))
      }
      pub(super) fn get_002722() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002723() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_002718() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002719(),
          vec![get_002722(), get_002723()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002726() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002727() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_002725() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002726(), get_002727()))
      }
      pub(super) fn get_002728() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_002731() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002732() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_002730() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002731(), get_002732()))
      }
      pub(super) fn get_002735() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002736() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_002734() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002735(), get_002736()))
      }
      pub(super) fn get_002737() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_002733() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002734(),
          vec![get_002737()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002740() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_002739() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002740()))
      }
      pub(super) fn get_002743() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_002744() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_002742() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002743(), get_002744()))
      }
      pub(super) fn get_002747() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002746() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002747()]))
      }
      pub(super) fn get_002745() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002746()]))
      }
      pub(super) fn get_002741() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002742(),
          )],
          get_002745(),
        ))
      }
      pub(super) fn get_002738() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_002739(),
          )],
          get_002741(),
        ))
      }
      pub(super) fn get_002729() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002730(),
          vec![get_002733(), get_002738()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002724() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002725(),
          vec![get_002728(), get_002729()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002717() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_002718(),
          )],
          get_002724(),
        ))
      }
      pub(super) fn get_002704() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_002705(),
          get_002712(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_002717(),
        ))
      }
      pub(super) fn get_002750() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_002749() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002750()))
      }
      pub(super) fn get_002754() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002755() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_002753() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002754(), get_002755()))
      }
      pub(super) fn get_002756() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 47u32)
        }))
      }
      pub(super) fn get_002752() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002753(),
          vec![get_002756()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002761() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002762() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_002760() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002761(), get_002762()))
      }
      pub(super) fn get_002763() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 47u32)
        }))
      }
      pub(super) fn get_002759() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002760(),
          vec![get_002763()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002767() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002768() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_002766() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002767(), get_002768()))
      }
      pub(super) fn get_002770() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002771() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 47u32)
        }))
      }
      pub(super) fn get_002769() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002770(),
          CoreBinaryOperator::And(None),
          get_002771(),
        ))
      }
      pub(super) fn get_002772() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("-"))
      }
      pub(super) fn get_002765() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002766(),
          vec![get_002769(), get_002772()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002764() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_002765(),
        ))
      }
      pub(super) fn get_002758() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002759(),
          CoreBinaryOperator::GreaterThan(None),
          get_002764(),
        ))
      }
      pub(super) fn get_002776() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002777() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_002775() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002776(), get_002777()))
      }
      pub(super) fn get_002779() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 47u32)
        }))
      }
      pub(super) fn get_002780() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002778() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002779(), get_002780()))
      }
      pub(super) fn get_002781() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("-"))
      }
      pub(super) fn get_002774() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002775(),
          vec![get_002778(), get_002781()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002784() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("parse_nat", 5u32)
        }))
      }
      pub(super) fn get_002787() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002788() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_002786() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002787(), get_002788()))
      }
      pub(super) fn get_002789() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 47u32)
        }))
      }
      pub(super) fn get_002790() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_002791() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_002792() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_002785() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002786(),
          vec![get_002789(), get_002790(), get_002791(), get_002792()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002793() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_002783() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002784(),
          vec![get_002785(), get_002793()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002782() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Minus(None),
          get_002783(),
        ))
      }
      pub(super) fn get_002795() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("parse_nat", 5u32)
        }))
      }
      pub(super) fn get_002796() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 47u32)
        }))
      }
      pub(super) fn get_002797() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_002794() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002795(),
          vec![get_002796(), get_002797()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002773() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002774(), get_002782(), get_002794()))
      }
      pub(super) fn get_002801() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002802() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_002800() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002801(), get_002802()))
      }
      pub(super) fn get_002803() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Not an integer: \"%s\""))
      }
      pub(super) fn get_002805() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 47u32)
        }))
      }
      pub(super) fn get_002804() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002805()]))
      }
      pub(super) fn get_002799() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002800(),
          vec![get_002803(), get_002804()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002798() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002799()))
      }
      pub(super) fn get_002757() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002758(), get_002773(), get_002798()))
      }
      pub(super) fn get_002808() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Expected string, got "))
      }
      pub(super) fn get_002811() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002812() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_002810() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002811(), get_002812()))
      }
      pub(super) fn get_002813() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 47u32)
        }))
      }
      pub(super) fn get_002809() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002810(),
          vec![get_002813()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002807() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002808(),
          CoreBinaryOperator::Plus(None),
          get_002809(),
        ))
      }
      pub(super) fn get_002806() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002807()))
      }
      pub(super) fn get_002751() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002752(), get_002757(), get_002806()))
      }
      pub(super) fn get_002748() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str", 47u32) },
            get_002749(),
          )],
          get_002751(),
        ))
      }
      pub(super) fn get_002591() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_002592()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_002593(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_002594(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_002598(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_002703(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_002704(),
            ),
          ],
          get_002748(),
        ))
      }
      pub(super) fn get_002814() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("parseOctal"))
      }
      pub(super) fn get_002816() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_002817() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_002820() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_002819() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002820()))
      }
      pub(super) fn get_002821() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_002818() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_002819(),
          )],
          get_002821(),
        ))
      }
      pub(super) fn get_002824() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_002823() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002824()))
      }
      pub(super) fn get_002826() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_002825() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002826()))
      }
      pub(super) fn get_002830() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002832() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002833() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002831() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002832(),
          CoreBinaryOperator::And(None),
          get_002833(),
        ))
      }
      pub(super) fn get_002829() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002830(),
          CoreBinaryOperator::GreaterThan(None),
          get_002831(),
        ))
      }
      pub(super) fn get_002834() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_002828() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002829(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_002834(),
        ))
      }
      pub(super) fn get_002838() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002839() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002837() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002838(), get_002839()))
      }
      pub(super) fn get_002840() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_002836() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002837(),
          vec![get_002840()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002844() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002845() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002843() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002844(), get_002845()))
      }
      pub(super) fn get_002846() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_002842() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002843(),
          vec![get_002846()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002850() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002851() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002849() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002850(), get_002851()))
      }
      pub(super) fn get_002852() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_002848() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002849(),
          vec![get_002852()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002856() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_002855() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002856()))
      }
      pub(super) fn get_002858() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_002857() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002858()))
      }
      pub(super) fn get_002862() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002863() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_002861() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002862(), get_002863()))
      }
      pub(super) fn get_002864() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_002860() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002861(),
          vec![get_002864()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002868() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002869() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_002867() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002868(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002869(),
        ))
      }
      pub(super) fn get_002872() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002873() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_002871() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002872(),
          CoreBinaryOperator::Minus(None),
          get_002873(),
        ))
      }
      pub(super) fn get_002874() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_002870() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002871(),
          CoreBinaryOperator::Plus(None),
          get_002874(),
        ))
      }
      pub(super) fn get_002877() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002878() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_002876() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002877(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002878(),
        ))
      }
      pub(super) fn get_002881() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002882() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_002880() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002881(),
          CoreBinaryOperator::Minus(None),
          get_002882(),
        ))
      }
      pub(super) fn get_002883() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_002879() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002880(),
          CoreBinaryOperator::Plus(None),
          get_002883(),
        ))
      }
      pub(super) fn get_002885() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_002886() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_002884() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002885(),
          CoreBinaryOperator::Minus(None),
          get_002886(),
        ))
      }
      pub(super) fn get_002875() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002876(), get_002879(), get_002884()))
      }
      pub(super) fn get_002866() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002867(), get_002870(), get_002875()))
      }
      pub(super) fn get_002890() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002892() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002893() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002891() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002892(),
          CoreBinaryOperator::And(None),
          get_002893(),
        ))
      }
      pub(super) fn get_002889() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002890(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_002891(),
        ))
      }
      pub(super) fn get_002894() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002888() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002889(),
          CoreBinaryOperator::LessThan(None),
          get_002894(),
        ))
      }
      pub(super) fn get_002896() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002898() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_002899() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_002897() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002898(),
          CoreBinaryOperator::Plus(None),
          get_002899(),
        ))
      }
      pub(super) fn get_002895() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002896(),
          CoreBinaryOperator::Mult(None),
          get_002897(),
        ))
      }
      pub(super) fn get_002903() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002904() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_002902() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002903(), get_002904()))
      }
      pub(super) fn get_002905() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_002907() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_002908() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002906() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002907(), get_002908()]))
      }
      pub(super) fn get_002901() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002902(),
          vec![get_002905(), get_002906()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002900() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002901()))
      }
      pub(super) fn get_002887() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002888(), get_002895(), get_002900()))
      }
      pub(super) fn get_002865() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_002866(),
          )],
          get_002887(),
        ))
      }
      pub(super) fn get_002859() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_002860(),
          )],
          get_002865(),
        ))
      }
      pub(super) fn get_002854() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_002855(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_002857(),
            ),
          ],
          get_002859(),
        ))
      }
      pub(super) fn get_002911() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002912() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_002910() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002911(), get_002912()))
      }
      pub(super) fn get_002913() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_002916() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002917() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_002915() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002916(), get_002917()))
      }
      pub(super) fn get_002918() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_002914() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002915(),
          vec![get_002918()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002919() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002909() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002910(),
          vec![get_002913(), get_002914(), get_002919()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002853() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_002854(),
          )],
          get_002909(),
        ))
      }
      pub(super) fn get_002847() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_002848(),
          )],
          get_002853(),
        ))
      }
      pub(super) fn get_002841() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_002842(),
          )],
          get_002847(),
        ))
      }
      pub(super) fn get_002835() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_002836(),
          )],
          get_002841(),
        ))
      }
      pub(super) fn get_002923() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002924() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_002922() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002923(), get_002924()))
      }
      pub(super) fn get_002925() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_002926() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_002921() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002922(),
          vec![get_002925(), get_002926()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002920() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002921()))
      }
      pub(super) fn get_002827() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002828(), get_002835(), get_002920()))
      }
      pub(super) fn get_002822() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_002823(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_002825(),
            ),
          ],
          get_002827(),
        ))
      }
      pub(super) fn get_002927() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_002931() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_002932() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002930() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002931(), get_002932()))
      }
      pub(super) fn get_002934() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_002935() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002933() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002934(), get_002935()))
      }
      pub(super) fn get_002929() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002930(),
          )],
          get_002933(),
        ))
      }
      pub(super) fn get_002938() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_002939() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002937() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002938(), get_002939()))
      }
      pub(super) fn get_002940() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002936() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002937(),
          )],
          get_002940(),
        ))
      }
      pub(super) fn get_002944() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002945() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_002943() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002944(), get_002945()))
      }
      pub(super) fn get_002946() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002947() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_002942() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002943(),
          vec![get_002946(), get_002947()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002950() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002951() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_002949() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002950(), get_002951()))
      }
      pub(super) fn get_002952() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_002955() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002956() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_002954() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002955(), get_002956()))
      }
      pub(super) fn get_002959() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002960() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_002958() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002959(), get_002960()))
      }
      pub(super) fn get_002961() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_002957() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002958(),
          vec![get_002961()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002964() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_002963() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002964()))
      }
      pub(super) fn get_002967() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_002968() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_002966() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002967(), get_002968()))
      }
      pub(super) fn get_002971() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_002970() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002971()]))
      }
      pub(super) fn get_002969() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_002970()]))
      }
      pub(super) fn get_002965() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_002966(),
          )],
          get_002969(),
        ))
      }
      pub(super) fn get_002962() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_002963(),
          )],
          get_002965(),
        ))
      }
      pub(super) fn get_002953() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002954(),
          vec![get_002957(), get_002962()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002948() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002949(),
          vec![get_002952(), get_002953()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002941() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_002942(),
          )],
          get_002948(),
        ))
      }
      pub(super) fn get_002928() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_002929(),
          get_002936(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_002941(),
        ))
      }
      pub(super) fn get_002974() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_002973() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002974()))
      }
      pub(super) fn get_002978() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002979() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_002977() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002978(), get_002979()))
      }
      pub(super) fn get_002980() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 48u32)
        }))
      }
      pub(super) fn get_002976() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002977(),
          vec![get_002980()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002985() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_002986() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_002984() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_002985(), get_002986()))
      }
      pub(super) fn get_002987() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 48u32)
        }))
      }
      pub(super) fn get_002983() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002984(),
          vec![get_002987()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002988() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_002982() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002983(),
          CoreBinaryOperator::GreaterThan(None),
          get_002988(),
        ))
      }
      pub(super) fn get_002990() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("parse_nat", 5u32)
        }))
      }
      pub(super) fn get_002991() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 48u32)
        }))
      }
      pub(super) fn get_002992() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(8f64))
      }
      pub(super) fn get_002989() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002990(),
          vec![get_002991(), get_002992()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002994() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Not an octal number: \"\""))
      }
      pub(super) fn get_002993() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002994()))
      }
      pub(super) fn get_002981() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002982(), get_002989(), get_002993()))
      }
      pub(super) fn get_002997() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Expected string, got "))
      }
      pub(super) fn get_003000() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003001() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_002999() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003000(), get_003001()))
      }
      pub(super) fn get_003002() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 48u32)
        }))
      }
      pub(super) fn get_002998() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_002999(),
          vec![get_003002()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_002996() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_002997(),
          CoreBinaryOperator::Plus(None),
          get_002998(),
        ))
      }
      pub(super) fn get_002995() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_002996()))
      }
      pub(super) fn get_002975() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_002976(), get_002981(), get_002995()))
      }
      pub(super) fn get_002972() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str", 48u32) },
            get_002973(),
          )],
          get_002975(),
        ))
      }
      pub(super) fn get_002815() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_002816()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_002817(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_002818(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_002822(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_002927(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_002928(),
            ),
          ],
          get_002972(),
        ))
      }
      pub(super) fn get_003003() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("parseHex"))
      }
      pub(super) fn get_003005() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_003006() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_003009() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_003008() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003009()))
      }
      pub(super) fn get_003010() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_003007() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_003008(),
          )],
          get_003010(),
        ))
      }
      pub(super) fn get_003013() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_003012() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003013()))
      }
      pub(super) fn get_003015() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_003014() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003015()))
      }
      pub(super) fn get_003019() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003021() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003022() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003020() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003021(),
          CoreBinaryOperator::And(None),
          get_003022(),
        ))
      }
      pub(super) fn get_003018() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003019(),
          CoreBinaryOperator::GreaterThan(None),
          get_003020(),
        ))
      }
      pub(super) fn get_003023() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_003017() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003018(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_003023(),
        ))
      }
      pub(super) fn get_003027() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003028() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003026() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003027(), get_003028()))
      }
      pub(super) fn get_003029() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_003025() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003026(),
          vec![get_003029()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003033() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003034() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003032() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003033(), get_003034()))
      }
      pub(super) fn get_003035() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_003031() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003032(),
          vec![get_003035()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003039() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003040() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003038() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003039(), get_003040()))
      }
      pub(super) fn get_003041() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_003037() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003038(),
          vec![get_003041()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003045() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_003044() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003045()))
      }
      pub(super) fn get_003047() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_003046() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003047()))
      }
      pub(super) fn get_003051() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003052() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003050() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003051(), get_003052()))
      }
      pub(super) fn get_003053() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_003049() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003050(),
          vec![get_003053()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003057() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003058() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_003056() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003057(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003058(),
        ))
      }
      pub(super) fn get_003061() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003062() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_003060() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003061(),
          CoreBinaryOperator::Minus(None),
          get_003062(),
        ))
      }
      pub(super) fn get_003063() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_003059() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003060(),
          CoreBinaryOperator::Plus(None),
          get_003063(),
        ))
      }
      pub(super) fn get_003066() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003067() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_003065() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003066(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003067(),
        ))
      }
      pub(super) fn get_003070() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003071() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_003069() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003070(),
          CoreBinaryOperator::Minus(None),
          get_003071(),
        ))
      }
      pub(super) fn get_003072() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_003068() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003069(),
          CoreBinaryOperator::Plus(None),
          get_003072(),
        ))
      }
      pub(super) fn get_003074() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003075() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_003073() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003074(),
          CoreBinaryOperator::Minus(None),
          get_003075(),
        ))
      }
      pub(super) fn get_003064() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003065(), get_003068(), get_003073()))
      }
      pub(super) fn get_003055() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003056(), get_003059(), get_003064()))
      }
      pub(super) fn get_003079() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_003081() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003082() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_003080() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003081(),
          CoreBinaryOperator::And(None),
          get_003082(),
        ))
      }
      pub(super) fn get_003078() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003079(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003080(),
        ))
      }
      pub(super) fn get_003083() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003077() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003078(),
          CoreBinaryOperator::LessThan(None),
          get_003083(),
        ))
      }
      pub(super) fn get_003085() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003087() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_003088() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_003086() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003087(),
          CoreBinaryOperator::Plus(None),
          get_003088(),
        ))
      }
      pub(super) fn get_003084() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003085(),
          CoreBinaryOperator::Mult(None),
          get_003086(),
        ))
      }
      pub(super) fn get_003092() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003093() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_003091() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003092(), get_003093()))
      }
      pub(super) fn get_003094() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_003096() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_003097() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003095() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003096(), get_003097()]))
      }
      pub(super) fn get_003090() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003091(),
          vec![get_003094(), get_003095()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003089() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003090()))
      }
      pub(super) fn get_003076() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003077(), get_003084(), get_003089()))
      }
      pub(super) fn get_003054() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_003055(),
          )],
          get_003076(),
        ))
      }
      pub(super) fn get_003048() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_003049(),
          )],
          get_003054(),
        ))
      }
      pub(super) fn get_003043() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_003044(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_003046(),
            ),
          ],
          get_003048(),
        ))
      }
      pub(super) fn get_003100() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003101() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_003099() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003100(), get_003101()))
      }
      pub(super) fn get_003102() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_003105() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003106() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_003104() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003105(), get_003106()))
      }
      pub(super) fn get_003107() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_003103() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003104(),
          vec![get_003107()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003108() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003098() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003099(),
          vec![get_003102(), get_003103(), get_003108()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003042() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_003043(),
          )],
          get_003098(),
        ))
      }
      pub(super) fn get_003036() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_003037(),
          )],
          get_003042(),
        ))
      }
      pub(super) fn get_003030() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_003031(),
          )],
          get_003036(),
        ))
      }
      pub(super) fn get_003024() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_003025(),
          )],
          get_003030(),
        ))
      }
      pub(super) fn get_003112() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003113() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_003111() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003112(), get_003113()))
      }
      pub(super) fn get_003114() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_003115() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003110() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003111(),
          vec![get_003114(), get_003115()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003109() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003110()))
      }
      pub(super) fn get_003016() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003017(), get_003024(), get_003109()))
      }
      pub(super) fn get_003011() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_003012(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_003014(),
            ),
          ],
          get_003016(),
        ))
      }
      pub(super) fn get_003116() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_003120() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_003121() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003119() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003120(), get_003121()))
      }
      pub(super) fn get_003123() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_003124() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_003122() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003123(), get_003124()))
      }
      pub(super) fn get_003118() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_003119(),
          )],
          get_003122(),
        ))
      }
      pub(super) fn get_003127() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_003128() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003126() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003127(), get_003128()))
      }
      pub(super) fn get_003129() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_003125() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_003126(),
          )],
          get_003129(),
        ))
      }
      pub(super) fn get_003133() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003134() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_003132() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003133(), get_003134()))
      }
      pub(super) fn get_003135() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003136() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_003131() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003132(),
          vec![get_003135(), get_003136()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003139() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003140() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_003138() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003139(), get_003140()))
      }
      pub(super) fn get_003141() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_003144() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003145() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_003143() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003144(), get_003145()))
      }
      pub(super) fn get_003148() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003149() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003147() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003148(), get_003149()))
      }
      pub(super) fn get_003150() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_003146() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003147(),
          vec![get_003150()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003153() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_003152() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003153()))
      }
      pub(super) fn get_003156() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_003157() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_003155() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003156(), get_003157()))
      }
      pub(super) fn get_003160() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_003159() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003160()]))
      }
      pub(super) fn get_003158() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003159()]))
      }
      pub(super) fn get_003154() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_003155(),
          )],
          get_003158(),
        ))
      }
      pub(super) fn get_003151() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_003152(),
          )],
          get_003154(),
        ))
      }
      pub(super) fn get_003142() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003143(),
          vec![get_003146(), get_003151()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003137() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003138(),
          vec![get_003141(), get_003142()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003130() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_003131(),
          )],
          get_003137(),
        ))
      }
      pub(super) fn get_003117() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_003118(),
          get_003125(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_003130(),
        ))
      }
      pub(super) fn get_003163() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_003162() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003163()))
      }
      pub(super) fn get_003167() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003168() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_003166() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003167(), get_003168()))
      }
      pub(super) fn get_003169() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 49u32)
        }))
      }
      pub(super) fn get_003165() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003166(),
          vec![get_003169()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003174() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003175() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003173() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003174(), get_003175()))
      }
      pub(super) fn get_003176() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 49u32)
        }))
      }
      pub(super) fn get_003172() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003173(),
          vec![get_003176()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003177() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003171() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003172(),
          CoreBinaryOperator::GreaterThan(None),
          get_003177(),
        ))
      }
      pub(super) fn get_003179() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("parse_nat", 5u32)
        }))
      }
      pub(super) fn get_003180() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 49u32)
        }))
      }
      pub(super) fn get_003181() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_003178() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003179(),
          vec![get_003180(), get_003181()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003183() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Not hexadecimal: \"\""))
      }
      pub(super) fn get_003182() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003183()))
      }
      pub(super) fn get_003170() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003171(), get_003178(), get_003182()))
      }
      pub(super) fn get_003186() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Expected string, got "))
      }
      pub(super) fn get_003189() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003190() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_003188() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003189(), get_003190()))
      }
      pub(super) fn get_003191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 49u32)
        }))
      }
      pub(super) fn get_003187() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003188(),
          vec![get_003191()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003185() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003186(),
          CoreBinaryOperator::Plus(None),
          get_003187(),
        ))
      }
      pub(super) fn get_003184() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003185()))
      }
      pub(super) fn get_003164() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003165(), get_003170(), get_003184()))
      }
      pub(super) fn get_003161() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str", 49u32) },
            get_003162(),
          )],
          get_003164(),
        ))
      }
      pub(super) fn get_003004() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_003005()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_003006(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_003007(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_003011(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_003116(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_003117(),
            ),
          ],
          get_003161(),
        ))
      }
      pub(super) fn get_003192() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("split"))
      }
      pub(super) fn get_003194() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_003195() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_003198() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_003197() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003198()))
      }
      pub(super) fn get_003199() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_003196() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_003197(),
          )],
          get_003199(),
        ))
      }
      pub(super) fn get_003202() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_003201() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003202()))
      }
      pub(super) fn get_003204() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_003203() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003204()))
      }
      pub(super) fn get_003208() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003210() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003211() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003209() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003210(),
          CoreBinaryOperator::And(None),
          get_003211(),
        ))
      }
      pub(super) fn get_003207() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003208(),
          CoreBinaryOperator::GreaterThan(None),
          get_003209(),
        ))
      }
      pub(super) fn get_003212() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_003206() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003207(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_003212(),
        ))
      }
      pub(super) fn get_003216() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003217() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003215() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003216(), get_003217()))
      }
      pub(super) fn get_003218() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_003214() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003215(),
          vec![get_003218()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003222() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003223() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003221() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003222(), get_003223()))
      }
      pub(super) fn get_003224() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_003220() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003221(),
          vec![get_003224()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003228() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003229() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003227() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003228(), get_003229()))
      }
      pub(super) fn get_003230() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_003226() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003227(),
          vec![get_003230()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003234() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_003233() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003234()))
      }
      pub(super) fn get_003236() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_003235() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003236()))
      }
      pub(super) fn get_003240() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003241() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003239() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003240(), get_003241()))
      }
      pub(super) fn get_003242() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_003238() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003239(),
          vec![get_003242()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003246() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003247() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_003245() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003246(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003247(),
        ))
      }
      pub(super) fn get_003250() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003251() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_003249() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003250(),
          CoreBinaryOperator::Minus(None),
          get_003251(),
        ))
      }
      pub(super) fn get_003252() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_003248() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003249(),
          CoreBinaryOperator::Plus(None),
          get_003252(),
        ))
      }
      pub(super) fn get_003255() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003256() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_003254() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003255(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003256(),
        ))
      }
      pub(super) fn get_003259() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003260() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_003258() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003259(),
          CoreBinaryOperator::Minus(None),
          get_003260(),
        ))
      }
      pub(super) fn get_003261() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_003257() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003258(),
          CoreBinaryOperator::Plus(None),
          get_003261(),
        ))
      }
      pub(super) fn get_003263() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003264() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_003262() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003263(),
          CoreBinaryOperator::Minus(None),
          get_003264(),
        ))
      }
      pub(super) fn get_003253() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003254(), get_003257(), get_003262()))
      }
      pub(super) fn get_003244() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003245(), get_003248(), get_003253()))
      }
      pub(super) fn get_003268() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_003270() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003271() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_003269() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003270(),
          CoreBinaryOperator::And(None),
          get_003271(),
        ))
      }
      pub(super) fn get_003267() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003268(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003269(),
        ))
      }
      pub(super) fn get_003272() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003266() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003267(),
          CoreBinaryOperator::LessThan(None),
          get_003272(),
        ))
      }
      pub(super) fn get_003274() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003276() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_003277() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_003275() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003276(),
          CoreBinaryOperator::Plus(None),
          get_003277(),
        ))
      }
      pub(super) fn get_003273() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003274(),
          CoreBinaryOperator::Mult(None),
          get_003275(),
        ))
      }
      pub(super) fn get_003281() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003282() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_003280() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003281(), get_003282()))
      }
      pub(super) fn get_003283() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_003285() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_003286() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003284() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003285(), get_003286()]))
      }
      pub(super) fn get_003279() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003280(),
          vec![get_003283(), get_003284()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003278() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003279()))
      }
      pub(super) fn get_003265() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003266(), get_003273(), get_003278()))
      }
      pub(super) fn get_003243() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_003244(),
          )],
          get_003265(),
        ))
      }
      pub(super) fn get_003237() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_003238(),
          )],
          get_003243(),
        ))
      }
      pub(super) fn get_003232() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_003233(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_003235(),
            ),
          ],
          get_003237(),
        ))
      }
      pub(super) fn get_003289() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003290() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_003288() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003289(), get_003290()))
      }
      pub(super) fn get_003291() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_003294() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003295() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_003293() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003294(), get_003295()))
      }
      pub(super) fn get_003296() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_003292() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003293(),
          vec![get_003296()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003297() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003287() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003288(),
          vec![get_003291(), get_003292(), get_003297()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003231() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_003232(),
          )],
          get_003287(),
        ))
      }
      pub(super) fn get_003225() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_003226(),
          )],
          get_003231(),
        ))
      }
      pub(super) fn get_003219() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_003220(),
          )],
          get_003225(),
        ))
      }
      pub(super) fn get_003213() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_003214(),
          )],
          get_003219(),
        ))
      }
      pub(super) fn get_003301() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003302() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_003300() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003301(), get_003302()))
      }
      pub(super) fn get_003303() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_003304() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003299() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003300(),
          vec![get_003303(), get_003304()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003298() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003299()))
      }
      pub(super) fn get_003205() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003206(), get_003213(), get_003298()))
      }
      pub(super) fn get_003200() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_003201(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_003203(),
            ),
          ],
          get_003205(),
        ))
      }
      pub(super) fn get_003305() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_003309() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_003310() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003308() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003309(), get_003310()))
      }
      pub(super) fn get_003312() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_003313() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_003311() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003312(), get_003313()))
      }
      pub(super) fn get_003307() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_003308(),
          )],
          get_003311(),
        ))
      }
      pub(super) fn get_003316() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_003317() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003315() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003316(), get_003317()))
      }
      pub(super) fn get_003318() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_003314() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_003315(),
          )],
          get_003318(),
        ))
      }
      pub(super) fn get_003322() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003323() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_003321() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003322(), get_003323()))
      }
      pub(super) fn get_003324() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003325() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_003320() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003321(),
          vec![get_003324(), get_003325()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003328() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003329() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_003327() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003328(), get_003329()))
      }
      pub(super) fn get_003330() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_003333() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003334() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_003332() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003333(), get_003334()))
      }
      pub(super) fn get_003337() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003338() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003336() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003337(), get_003338()))
      }
      pub(super) fn get_003339() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_003335() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003336(),
          vec![get_003339()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003342() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_003341() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003342()))
      }
      pub(super) fn get_003345() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_003346() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_003344() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003345(), get_003346()))
      }
      pub(super) fn get_003349() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_003348() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003349()]))
      }
      pub(super) fn get_003347() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003348()]))
      }
      pub(super) fn get_003343() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_003344(),
          )],
          get_003347(),
        ))
      }
      pub(super) fn get_003340() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_003341(),
          )],
          get_003343(),
        ))
      }
      pub(super) fn get_003331() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003332(),
          vec![get_003335(), get_003340()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003326() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003327(),
          vec![get_003330(), get_003331()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003319() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_003320(),
          )],
          get_003326(),
        ))
      }
      pub(super) fn get_003306() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_003307(),
          get_003314(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_003319(),
        ))
      }
      pub(super) fn get_003352() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_003351() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003352()))
      }
      pub(super) fn get_003354() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'c' not bound"))
      }
      pub(super) fn get_003353() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003354()))
      }
      pub(super) fn get_003358() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003359() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_003357() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003358(), get_003359()))
      }
      pub(super) fn get_003360() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 50u32)
        }))
      }
      pub(super) fn get_003356() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003357(),
          vec![get_003360()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003364() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003365() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_003363() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003364(), get_003365()))
      }
      pub(super) fn get_003366() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 51u32)
        }))
      }
      pub(super) fn get_003362() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003363(),
          vec![get_003366()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003370() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003371() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_003369() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003370(), get_003371()))
      }
      pub(super) fn get_003374() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003375() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003373() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003374(), get_003375()))
      }
      pub(super) fn get_003376() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 51u32)
        }))
      }
      pub(super) fn get_003372() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003373(),
          vec![get_003376()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003377() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_003368() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003369(),
          vec![get_003372(), get_003377()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003380() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003381() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("splitLimit"))
      }
      pub(super) fn get_003379() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003380(), get_003381()))
      }
      pub(super) fn get_003382() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 50u32)
        }))
      }
      pub(super) fn get_003383() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 51u32)
        }))
      }
      pub(super) fn get_003385() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_003384() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Minus(None),
          get_003385(),
        ))
      }
      pub(super) fn get_003378() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003379(),
          vec![get_003382(), get_003383(), get_003384()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003388() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.split second parameter should have length 1, got ",
        ))
      }
      pub(super) fn get_003391() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003392() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003390() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003391(), get_003392()))
      }
      pub(super) fn get_003393() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 51u32)
        }))
      }
      pub(super) fn get_003389() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003390(),
          vec![get_003393()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003387() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003388(),
          CoreBinaryOperator::Plus(None),
          get_003389(),
        ))
      }
      pub(super) fn get_003386() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003387()))
      }
      pub(super) fn get_003367() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003368(), get_003378(), get_003386()))
      }
      pub(super) fn get_003396() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.split second parameter should be a string, got ",
        ))
      }
      pub(super) fn get_003399() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003400() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_003398() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003399(), get_003400()))
      }
      pub(super) fn get_003401() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 51u32)
        }))
      }
      pub(super) fn get_003397() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003398(),
          vec![get_003401()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003395() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003396(),
          CoreBinaryOperator::Plus(None),
          get_003397(),
        ))
      }
      pub(super) fn get_003394() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003395()))
      }
      pub(super) fn get_003361() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003362(), get_003367(), get_003394()))
      }
      pub(super) fn get_003404() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.split first parameter should be a string, got ",
        ))
      }
      pub(super) fn get_003407() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003408() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_003406() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003407(), get_003408()))
      }
      pub(super) fn get_003409() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 50u32)
        }))
      }
      pub(super) fn get_003405() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003406(),
          vec![get_003409()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003403() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003404(),
          CoreBinaryOperator::Plus(None),
          get_003405(),
        ))
      }
      pub(super) fn get_003402() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003403()))
      }
      pub(super) fn get_003355() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003356(), get_003361(), get_003402()))
      }
      pub(super) fn get_003350() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 50u32) },
              get_003351(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("c", 51u32) },
              get_003353(),
            ),
          ],
          get_003355(),
        ))
      }
      pub(super) fn get_003193() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_003194()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_003195(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_003196(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_003200(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_003305(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_003306(),
            ),
          ],
          get_003350(),
        ))
      }
      pub(super) fn get_003410() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("splitLimit"))
      }
      pub(super) fn get_003412() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_003413() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_003416() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_003415() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003416()))
      }
      pub(super) fn get_003417() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_003414() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_003415(),
          )],
          get_003417(),
        ))
      }
      pub(super) fn get_003420() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_003419() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003420()))
      }
      pub(super) fn get_003422() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_003421() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003422()))
      }
      pub(super) fn get_003426() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003428() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003429() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003427() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003428(),
          CoreBinaryOperator::And(None),
          get_003429(),
        ))
      }
      pub(super) fn get_003425() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003426(),
          CoreBinaryOperator::GreaterThan(None),
          get_003427(),
        ))
      }
      pub(super) fn get_003430() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_003424() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003425(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_003430(),
        ))
      }
      pub(super) fn get_003434() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003435() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003433() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003434(), get_003435()))
      }
      pub(super) fn get_003436() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_003432() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003433(),
          vec![get_003436()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003440() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003441() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003439() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003440(), get_003441()))
      }
      pub(super) fn get_003442() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_003438() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003439(),
          vec![get_003442()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003446() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003447() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003445() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003446(), get_003447()))
      }
      pub(super) fn get_003448() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_003444() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003445(),
          vec![get_003448()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003452() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_003451() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003452()))
      }
      pub(super) fn get_003454() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_003453() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003454()))
      }
      pub(super) fn get_003458() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003459() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003457() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003458(), get_003459()))
      }
      pub(super) fn get_003460() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_003456() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003457(),
          vec![get_003460()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003464() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003465() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_003463() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003464(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003465(),
        ))
      }
      pub(super) fn get_003468() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003469() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_003467() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003468(),
          CoreBinaryOperator::Minus(None),
          get_003469(),
        ))
      }
      pub(super) fn get_003470() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_003466() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003467(),
          CoreBinaryOperator::Plus(None),
          get_003470(),
        ))
      }
      pub(super) fn get_003473() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003474() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_003472() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003473(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003474(),
        ))
      }
      pub(super) fn get_003477() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003478() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_003476() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003477(),
          CoreBinaryOperator::Minus(None),
          get_003478(),
        ))
      }
      pub(super) fn get_003479() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_003475() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003476(),
          CoreBinaryOperator::Plus(None),
          get_003479(),
        ))
      }
      pub(super) fn get_003481() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003482() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_003480() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003481(),
          CoreBinaryOperator::Minus(None),
          get_003482(),
        ))
      }
      pub(super) fn get_003471() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003472(), get_003475(), get_003480()))
      }
      pub(super) fn get_003462() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003463(), get_003466(), get_003471()))
      }
      pub(super) fn get_003486() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_003488() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003489() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_003487() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003488(),
          CoreBinaryOperator::And(None),
          get_003489(),
        ))
      }
      pub(super) fn get_003485() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003486(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003487(),
        ))
      }
      pub(super) fn get_003490() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003484() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003485(),
          CoreBinaryOperator::LessThan(None),
          get_003490(),
        ))
      }
      pub(super) fn get_003492() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003494() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_003495() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_003493() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003494(),
          CoreBinaryOperator::Plus(None),
          get_003495(),
        ))
      }
      pub(super) fn get_003491() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003492(),
          CoreBinaryOperator::Mult(None),
          get_003493(),
        ))
      }
      pub(super) fn get_003499() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003500() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_003498() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003499(), get_003500()))
      }
      pub(super) fn get_003501() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_003503() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_003504() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003502() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003503(), get_003504()]))
      }
      pub(super) fn get_003497() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003498(),
          vec![get_003501(), get_003502()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003496() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003497()))
      }
      pub(super) fn get_003483() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003484(), get_003491(), get_003496()))
      }
      pub(super) fn get_003461() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_003462(),
          )],
          get_003483(),
        ))
      }
      pub(super) fn get_003455() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_003456(),
          )],
          get_003461(),
        ))
      }
      pub(super) fn get_003450() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_003451(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_003453(),
            ),
          ],
          get_003455(),
        ))
      }
      pub(super) fn get_003507() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003508() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_003506() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003507(), get_003508()))
      }
      pub(super) fn get_003509() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_003512() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003513() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_003511() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003512(), get_003513()))
      }
      pub(super) fn get_003514() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_003510() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003511(),
          vec![get_003514()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003515() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003505() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003506(),
          vec![get_003509(), get_003510(), get_003515()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003449() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_003450(),
          )],
          get_003505(),
        ))
      }
      pub(super) fn get_003443() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_003444(),
          )],
          get_003449(),
        ))
      }
      pub(super) fn get_003437() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_003438(),
          )],
          get_003443(),
        ))
      }
      pub(super) fn get_003431() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_003432(),
          )],
          get_003437(),
        ))
      }
      pub(super) fn get_003519() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003520() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_003518() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003519(), get_003520()))
      }
      pub(super) fn get_003521() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_003522() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003517() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003518(),
          vec![get_003521(), get_003522()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003516() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003517()))
      }
      pub(super) fn get_003423() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003424(), get_003431(), get_003516()))
      }
      pub(super) fn get_003418() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_003419(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_003421(),
            ),
          ],
          get_003423(),
        ))
      }
      pub(super) fn get_003523() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_003527() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_003528() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003526() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003527(), get_003528()))
      }
      pub(super) fn get_003530() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_003531() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_003529() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003530(), get_003531()))
      }
      pub(super) fn get_003525() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_003526(),
          )],
          get_003529(),
        ))
      }
      pub(super) fn get_003534() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_003535() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003533() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003534(), get_003535()))
      }
      pub(super) fn get_003536() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_003532() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_003533(),
          )],
          get_003536(),
        ))
      }
      pub(super) fn get_003540() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003541() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_003539() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003540(), get_003541()))
      }
      pub(super) fn get_003542() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003543() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_003538() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003539(),
          vec![get_003542(), get_003543()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003546() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003547() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_003545() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003546(), get_003547()))
      }
      pub(super) fn get_003548() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_003551() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003552() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_003550() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003551(), get_003552()))
      }
      pub(super) fn get_003555() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003556() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003554() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003555(), get_003556()))
      }
      pub(super) fn get_003557() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_003553() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003554(),
          vec![get_003557()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003560() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_003559() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003560()))
      }
      pub(super) fn get_003563() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_003564() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_003562() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003563(), get_003564()))
      }
      pub(super) fn get_003567() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_003566() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003567()]))
      }
      pub(super) fn get_003565() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003566()]))
      }
      pub(super) fn get_003561() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_003562(),
          )],
          get_003565(),
        ))
      }
      pub(super) fn get_003558() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_003559(),
          )],
          get_003561(),
        ))
      }
      pub(super) fn get_003549() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003550(),
          vec![get_003553(), get_003558()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003544() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003545(),
          vec![get_003548(), get_003549()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003537() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_003538(),
          )],
          get_003544(),
        ))
      }
      pub(super) fn get_003524() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_003525(),
          get_003532(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_003537(),
        ))
      }
      pub(super) fn get_003570() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_003569() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003570()))
      }
      pub(super) fn get_003572() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'c' not bound"))
      }
      pub(super) fn get_003571() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003572()))
      }
      pub(super) fn get_003574() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'maxsplits' not bound"))
      }
      pub(super) fn get_003573() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003574()))
      }
      pub(super) fn get_003578() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003579() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_003577() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003578(), get_003579()))
      }
      pub(super) fn get_003580() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 52u32)
        }))
      }
      pub(super) fn get_003576() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003577(),
          vec![get_003580()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003584() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003585() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_003583() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003584(), get_003585()))
      }
      pub(super) fn get_003586() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 53u32)
        }))
      }
      pub(super) fn get_003582() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003583(),
          vec![get_003586()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003590() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003591() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_003589() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003590(), get_003591()))
      }
      pub(super) fn get_003594() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003595() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003593() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003594(), get_003595()))
      }
      pub(super) fn get_003596() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 53u32)
        }))
      }
      pub(super) fn get_003592() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003593(),
          vec![get_003596()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003597() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_003588() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003589(),
          vec![get_003592(), get_003597()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003601() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003602() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_003600() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003601(), get_003602()))
      }
      pub(super) fn get_003603() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("maxsplits", 54u32)
        }))
      }
      pub(super) fn get_003599() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003600(),
          vec![get_003603()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003607() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_003606() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003607()))
      }
      pub(super) fn get_003609() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'delim' not bound"))
      }
      pub(super) fn get_003608() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003609()))
      }
      pub(super) fn get_003611() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_003610() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003611()))
      }
      pub(super) fn get_003613() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_003612() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003613()))
      }
      pub(super) fn get_003615() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_003614() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003615()))
      }
      pub(super) fn get_003618() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 56u32)
        }))
      }
      pub(super) fn get_003619() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 58u32)
        }))
      }
      pub(super) fn get_003617() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003618(), get_003619()))
      }
      pub(super) fn get_003622() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 58u32)
        }))
      }
      pub(super) fn get_003623() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_003621() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003622(),
          CoreBinaryOperator::Plus(None),
          get_003623(),
        ))
      }
      pub(super) fn get_003626() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 58u32)
        }))
      }
      pub(super) fn get_003629() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003630() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003628() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003629(), get_003630()))
      }
      pub(super) fn get_003631() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 56u32)
        }))
      }
      pub(super) fn get_003627() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003628(),
          vec![get_003631()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003625() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003626(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003627(),
        ))
      }
      pub(super) fn get_003633() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 59u32)
        }))
      }
      pub(super) fn get_003635() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 60u32)
        }))
      }
      pub(super) fn get_003634() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003635()]))
      }
      pub(super) fn get_003632() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003633(),
          CoreBinaryOperator::Plus(None),
          get_003634(),
        ))
      }
      pub(super) fn get_003639() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003640() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_003638() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003639(), get_003640()))
      }
      pub(super) fn get_003641() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 61u32)
        }))
      }
      pub(super) fn get_003643() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("delim", 57u32)
        }))
      }
      pub(super) fn get_003647() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003648() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_003646() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003647(), get_003648()))
      }
      pub(super) fn get_003649() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("maxsplits", 54u32)
        }))
      }
      pub(super) fn get_003652() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_003651() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Minus(None),
          get_003652(),
        ))
      }
      pub(super) fn get_003655() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003656() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003654() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003655(), get_003656()))
      }
      pub(super) fn get_003657() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 59u32)
        }))
      }
      pub(super) fn get_003653() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003654(),
          vec![get_003657()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003650() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003651(),
          CoreBinaryOperator::Or(None),
          get_003653(),
        ))
      }
      pub(super) fn get_003645() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003646(),
          vec![get_003649(), get_003650()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003658() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("maxsplits", 54u32)
        }))
      }
      pub(super) fn get_003644() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003645(),
          CoreBinaryOperator::LessThan(None),
          get_003658(),
        ))
      }
      pub(super) fn get_003642() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003643(),
          CoreBinaryOperator::And(None),
          get_003644(),
        ))
      }
      pub(super) fn get_003637() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003638(),
          vec![get_003641(), get_003642()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003660() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 55u32)
        }))
      }
      pub(super) fn get_003661() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 56u32)
        }))
      }
      pub(super) fn get_003662() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("delim", 57u32)
        }))
      }
      pub(super) fn get_003663() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i2", 62u32)
        }))
      }
      pub(super) fn get_003665() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 59u32)
        }))
      }
      pub(super) fn get_003667() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 60u32)
        }))
      }
      pub(super) fn get_003666() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003667()]))
      }
      pub(super) fn get_003664() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003665(),
          CoreBinaryOperator::Plus(None),
          get_003666(),
        ))
      }
      pub(super) fn get_003668() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_003659() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003660(),
          vec![
            get_003661(),
            get_003662(),
            get_003663(),
            get_003664(),
            get_003668(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_003670() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 55u32)
        }))
      }
      pub(super) fn get_003671() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 56u32)
        }))
      }
      pub(super) fn get_003672() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("delim", 57u32)
        }))
      }
      pub(super) fn get_003673() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i2", 62u32)
        }))
      }
      pub(super) fn get_003674() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 59u32)
        }))
      }
      pub(super) fn get_003676() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 60u32)
        }))
      }
      pub(super) fn get_003677() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 61u32)
        }))
      }
      pub(super) fn get_003675() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003676(),
          CoreBinaryOperator::Plus(None),
          get_003677(),
        ))
      }
      pub(super) fn get_003669() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003670(),
          vec![
            get_003671(),
            get_003672(),
            get_003673(),
            get_003674(),
            get_003675(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_003636() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003637(), get_003659(), get_003669()))
      }
      pub(super) fn get_003624() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003625(), get_003632(), get_003636()))
      }
      pub(super) fn get_003620() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i2", 62u32) },
            get_003621(),
          )],
          get_003624(),
        ))
      }
      pub(super) fn get_003616() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("c", 61u32) },
            get_003617(),
          )],
          get_003620(),
        ))
      }
      pub(super) fn get_003605() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 56u32) },
              get_003606(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("delim", 57u32) },
              get_003608(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 58u32) },
              get_003610(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 59u32) },
              get_003612(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("v", 60u32) },
              get_003614(),
            ),
          ],
          get_003616(),
        ))
      }
      pub(super) fn get_003679() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 55u32)
        }))
      }
      pub(super) fn get_003680() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 52u32)
        }))
      }
      pub(super) fn get_003681() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 53u32)
        }))
      }
      pub(super) fn get_003682() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003683() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_003684() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_003678() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003679(),
          vec![
            get_003680(),
            get_003681(),
            get_003682(),
            get_003683(),
            get_003684(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003604() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 55u32) },
            get_003605(),
          )],
          get_003678(),
        ))
      }
      pub(super) fn get_003687() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.splitLimit third parameter should be a number, got ",
        ))
      }
      pub(super) fn get_003690() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003691() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_003689() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003690(), get_003691()))
      }
      pub(super) fn get_003692() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("maxsplits", 54u32)
        }))
      }
      pub(super) fn get_003688() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003689(),
          vec![get_003692()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003686() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003687(),
          CoreBinaryOperator::Plus(None),
          get_003688(),
        ))
      }
      pub(super) fn get_003685() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003686()))
      }
      pub(super) fn get_003598() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003599(), get_003604(), get_003685()))
      }
      pub(super) fn get_003695() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.splitLimit second parameter should have length 1, got ",
        ))
      }
      pub(super) fn get_003698() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003699() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003697() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003698(), get_003699()))
      }
      pub(super) fn get_003700() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 53u32)
        }))
      }
      pub(super) fn get_003696() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003697(),
          vec![get_003700()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003694() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003695(),
          CoreBinaryOperator::Plus(None),
          get_003696(),
        ))
      }
      pub(super) fn get_003693() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003694()))
      }
      pub(super) fn get_003587() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003588(), get_003598(), get_003693()))
      }
      pub(super) fn get_003703() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.splitLimit second parameter should be a string, got ",
        ))
      }
      pub(super) fn get_003706() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003707() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_003705() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003706(), get_003707()))
      }
      pub(super) fn get_003708() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 53u32)
        }))
      }
      pub(super) fn get_003704() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003705(),
          vec![get_003708()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003702() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003703(),
          CoreBinaryOperator::Plus(None),
          get_003704(),
        ))
      }
      pub(super) fn get_003701() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003702()))
      }
      pub(super) fn get_003581() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003582(), get_003587(), get_003701()))
      }
      pub(super) fn get_003711() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.splitLimit first parameter should be a string, got ",
        ))
      }
      pub(super) fn get_003714() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003715() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_003713() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003714(), get_003715()))
      }
      pub(super) fn get_003716() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 52u32)
        }))
      }
      pub(super) fn get_003712() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003713(),
          vec![get_003716()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003710() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003711(),
          CoreBinaryOperator::Plus(None),
          get_003712(),
        ))
      }
      pub(super) fn get_003709() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003710()))
      }
      pub(super) fn get_003575() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003576(), get_003581(), get_003709()))
      }
      pub(super) fn get_003568() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 52u32) },
              get_003569(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("c", 53u32) },
              get_003571(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("maxsplits", 54u32) },
              get_003573(),
            ),
          ],
          get_003575(),
        ))
      }
      pub(super) fn get_003411() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_003412()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_003413(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_003414(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_003418(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_003523(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_003524(),
            ),
          ],
          get_003568(),
        ))
      }
      pub(super) fn get_003717() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("strReplace"))
      }
      pub(super) fn get_003719() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_003720() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_003723() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_003722() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003723()))
      }
      pub(super) fn get_003724() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_003721() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_003722(),
          )],
          get_003724(),
        ))
      }
      pub(super) fn get_003727() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_003726() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003727()))
      }
      pub(super) fn get_003729() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_003728() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003729()))
      }
      pub(super) fn get_003733() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003735() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003736() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003734() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003735(),
          CoreBinaryOperator::And(None),
          get_003736(),
        ))
      }
      pub(super) fn get_003732() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003733(),
          CoreBinaryOperator::GreaterThan(None),
          get_003734(),
        ))
      }
      pub(super) fn get_003737() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_003731() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003732(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_003737(),
        ))
      }
      pub(super) fn get_003741() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003742() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003740() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003741(), get_003742()))
      }
      pub(super) fn get_003743() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_003739() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003740(),
          vec![get_003743()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003747() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003748() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003746() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003747(), get_003748()))
      }
      pub(super) fn get_003749() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_003745() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003746(),
          vec![get_003749()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003753() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003754() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003752() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003753(), get_003754()))
      }
      pub(super) fn get_003755() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_003751() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003752(),
          vec![get_003755()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003759() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_003758() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003759()))
      }
      pub(super) fn get_003761() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_003760() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003761()))
      }
      pub(super) fn get_003765() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003766() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_003764() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003765(), get_003766()))
      }
      pub(super) fn get_003767() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_003763() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003764(),
          vec![get_003767()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003771() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003772() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_003770() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003771(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003772(),
        ))
      }
      pub(super) fn get_003775() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003776() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_003774() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003775(),
          CoreBinaryOperator::Minus(None),
          get_003776(),
        ))
      }
      pub(super) fn get_003777() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_003773() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003774(),
          CoreBinaryOperator::Plus(None),
          get_003777(),
        ))
      }
      pub(super) fn get_003780() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003781() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_003779() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003780(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003781(),
        ))
      }
      pub(super) fn get_003784() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003785() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_003783() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003784(),
          CoreBinaryOperator::Minus(None),
          get_003785(),
        ))
      }
      pub(super) fn get_003786() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_003782() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003783(),
          CoreBinaryOperator::Plus(None),
          get_003786(),
        ))
      }
      pub(super) fn get_003788() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_003789() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_003787() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003788(),
          CoreBinaryOperator::Minus(None),
          get_003789(),
        ))
      }
      pub(super) fn get_003778() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003779(), get_003782(), get_003787()))
      }
      pub(super) fn get_003769() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003770(), get_003773(), get_003778()))
      }
      pub(super) fn get_003793() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_003795() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003796() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_003794() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003795(),
          CoreBinaryOperator::And(None),
          get_003796(),
        ))
      }
      pub(super) fn get_003792() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003793(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_003794(),
        ))
      }
      pub(super) fn get_003797() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003791() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003792(),
          CoreBinaryOperator::LessThan(None),
          get_003797(),
        ))
      }
      pub(super) fn get_003799() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003801() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_003802() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_003800() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003801(),
          CoreBinaryOperator::Plus(None),
          get_003802(),
        ))
      }
      pub(super) fn get_003798() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003799(),
          CoreBinaryOperator::Mult(None),
          get_003800(),
        ))
      }
      pub(super) fn get_003806() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003807() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_003805() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003806(), get_003807()))
      }
      pub(super) fn get_003808() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_003810() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_003811() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003809() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003810(), get_003811()]))
      }
      pub(super) fn get_003804() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003805(),
          vec![get_003808(), get_003809()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003803() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003804()))
      }
      pub(super) fn get_003790() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003791(), get_003798(), get_003803()))
      }
      pub(super) fn get_003768() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_003769(),
          )],
          get_003790(),
        ))
      }
      pub(super) fn get_003762() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_003763(),
          )],
          get_003768(),
        ))
      }
      pub(super) fn get_003757() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_003758(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_003760(),
            ),
          ],
          get_003762(),
        ))
      }
      pub(super) fn get_003814() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003815() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_003813() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003814(), get_003815()))
      }
      pub(super) fn get_003816() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_003819() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003820() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_003818() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003819(), get_003820()))
      }
      pub(super) fn get_003821() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_003817() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003818(),
          vec![get_003821()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003822() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003812() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003813(),
          vec![get_003816(), get_003817(), get_003822()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003756() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_003757(),
          )],
          get_003812(),
        ))
      }
      pub(super) fn get_003750() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_003751(),
          )],
          get_003756(),
        ))
      }
      pub(super) fn get_003744() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_003745(),
          )],
          get_003750(),
        ))
      }
      pub(super) fn get_003738() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_003739(),
          )],
          get_003744(),
        ))
      }
      pub(super) fn get_003826() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003827() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_003825() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003826(), get_003827()))
      }
      pub(super) fn get_003828() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_003829() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_003824() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003825(),
          vec![get_003828(), get_003829()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003823() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003824()))
      }
      pub(super) fn get_003730() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003731(), get_003738(), get_003823()))
      }
      pub(super) fn get_003725() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_003726(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_003728(),
            ),
          ],
          get_003730(),
        ))
      }
      pub(super) fn get_003830() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_003834() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_003835() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003833() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003834(), get_003835()))
      }
      pub(super) fn get_003837() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_003838() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_003836() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003837(), get_003838()))
      }
      pub(super) fn get_003832() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_003833(),
          )],
          get_003836(),
        ))
      }
      pub(super) fn get_003841() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_003842() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003840() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003841(), get_003842()))
      }
      pub(super) fn get_003843() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_003839() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_003840(),
          )],
          get_003843(),
        ))
      }
      pub(super) fn get_003847() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003848() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_003846() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003847(), get_003848()))
      }
      pub(super) fn get_003849() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_003850() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_003845() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003846(),
          vec![get_003849(), get_003850()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003853() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003854() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_003852() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003853(), get_003854()))
      }
      pub(super) fn get_003855() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_003858() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003859() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_003857() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003858(), get_003859()))
      }
      pub(super) fn get_003862() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003863() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003861() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003862(), get_003863()))
      }
      pub(super) fn get_003864() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_003860() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003861(),
          vec![get_003864()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003867() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_003866() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003867()))
      }
      pub(super) fn get_003870() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_003871() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_003869() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003870(), get_003871()))
      }
      pub(super) fn get_003874() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_003873() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003874()]))
      }
      pub(super) fn get_003872() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_003873()]))
      }
      pub(super) fn get_003868() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_003869(),
          )],
          get_003872(),
        ))
      }
      pub(super) fn get_003865() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_003866(),
          )],
          get_003868(),
        ))
      }
      pub(super) fn get_003856() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003857(),
          vec![get_003860(), get_003865()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003851() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003852(),
          vec![get_003855(), get_003856()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003844() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_003845(),
          )],
          get_003851(),
        ))
      }
      pub(super) fn get_003831() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_003832(),
          get_003839(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_003844(),
        ))
      }
      pub(super) fn get_003877() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_003876() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003877()))
      }
      pub(super) fn get_003879() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'from' not bound"))
      }
      pub(super) fn get_003878() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003879()))
      }
      pub(super) fn get_003881() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'to' not bound"))
      }
      pub(super) fn get_003880() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003881()))
      }
      pub(super) fn get_003885() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003886() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_003884() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003885(), get_003886()))
      }
      pub(super) fn get_003887() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 63u32)
        }))
      }
      pub(super) fn get_003883() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003884(),
          vec![get_003887()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003891() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003892() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_003890() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003891(), get_003892()))
      }
      pub(super) fn get_003893() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from", 64u32)
        }))
      }
      pub(super) fn get_003889() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003890(),
          vec![get_003893()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003897() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003898() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_003896() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003897(), get_003898()))
      }
      pub(super) fn get_003899() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("to", 65u32)
        }))
      }
      pub(super) fn get_003895() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003896(),
          vec![get_003899()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003904() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003905() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_003903() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003904(), get_003905()))
      }
      pub(super) fn get_003906() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from", 64u32)
        }))
      }
      pub(super) fn get_003907() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_003902() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003903(),
          vec![get_003906(), get_003907()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003901() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_003902(),
        ))
      }
      pub(super) fn get_003911() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003912() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003910() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003911(), get_003912()))
      }
      pub(super) fn get_003913() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 63u32)
        }))
      }
      pub(super) fn get_003909() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003910(),
          vec![get_003913()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003917() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003918() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003916() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003917(), get_003918()))
      }
      pub(super) fn get_003919() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from", 64u32)
        }))
      }
      pub(super) fn get_003915() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003916(),
          vec![get_003919()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003923() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_003922() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003923()))
      }
      pub(super) fn get_003926() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003927() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_003925() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003926(), get_003927()))
      }
      pub(super) fn get_003930() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003931() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_003929() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003930(), get_003931()))
      }
      pub(super) fn get_003932() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 63u32)
        }))
      }
      pub(super) fn get_003933() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 69u32)
        }))
      }
      pub(super) fn get_003935() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 69u32)
        }))
      }
      pub(super) fn get_003936() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from_len", 67u32)
        }))
      }
      pub(super) fn get_003934() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003935(),
          CoreBinaryOperator::Plus(None),
          get_003936(),
        ))
      }
      pub(super) fn get_003937() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_003928() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003929(),
          vec![get_003932(), get_003933(), get_003934(), get_003937()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003938() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from", 64u32)
        }))
      }
      pub(super) fn get_003924() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003925(),
          vec![get_003928(), get_003938()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003921() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 69u32) },
            get_003922(),
          )],
          get_003924(),
        ))
      }
      pub(super) fn get_003942() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Parameter 'start_index' not bound",
        ))
      }
      pub(super) fn get_003941() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003942()))
      }
      pub(super) fn get_003944() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'curr_index' not bound"))
      }
      pub(super) fn get_003943() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003944()))
      }
      pub(super) fn get_003946() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'acc' not bound"))
      }
      pub(super) fn get_003945() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_003946()))
      }
      pub(super) fn get_003949() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("curr_index", 72u32)
        }))
      }
      pub(super) fn get_003950() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str_len", 66u32)
        }))
      }
      pub(super) fn get_003948() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003949(),
          CoreBinaryOperator::GreaterThan(None),
          get_003950(),
        ))
      }
      pub(super) fn get_003952() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 73u32)
        }))
      }
      pub(super) fn get_003955() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003956() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_003954() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003955(), get_003956()))
      }
      pub(super) fn get_003957() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 63u32)
        }))
      }
      pub(super) fn get_003958() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("start_index", 71u32)
        }))
      }
      pub(super) fn get_003959() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("curr_index", 72u32)
        }))
      }
      pub(super) fn get_003960() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_003953() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003954(),
          vec![get_003957(), get_003958(), get_003959(), get_003960()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003951() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003952(),
          CoreBinaryOperator::Plus(None),
          get_003953(),
        ))
      }
      pub(super) fn get_003963() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("found_at", 68u32)
        }))
      }
      pub(super) fn get_003964() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("curr_index", 72u32)
        }))
      }
      pub(super) fn get_003962() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003963(),
          vec![get_003964()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003967() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("curr_index", 72u32)
        }))
      }
      pub(super) fn get_003970() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003971() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_003969() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003970(), get_003971()))
      }
      pub(super) fn get_003972() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from", 64u32)
        }))
      }
      pub(super) fn get_003968() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003969(),
          vec![get_003972()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003966() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003967(),
          CoreBinaryOperator::Plus(None),
          get_003968(),
        ))
      }
      pub(super) fn get_003974() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("replace_after", 70u32)
        }))
      }
      pub(super) fn get_003975() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("new_index", 74u32)
        }))
      }
      pub(super) fn get_003976() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("new_index", 74u32)
        }))
      }
      pub(super) fn get_003979() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 73u32)
        }))
      }
      pub(super) fn get_003982() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_003983() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_003981() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003982(), get_003983()))
      }
      pub(super) fn get_003984() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 63u32)
        }))
      }
      pub(super) fn get_003985() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("start_index", 71u32)
        }))
      }
      pub(super) fn get_003986() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("curr_index", 72u32)
        }))
      }
      pub(super) fn get_003987() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_003980() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003981(),
          vec![get_003984(), get_003985(), get_003986(), get_003987()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003978() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003979(),
          CoreBinaryOperator::Plus(None),
          get_003980(),
        ))
      }
      pub(super) fn get_003988() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("to", 65u32)
        }))
      }
      pub(super) fn get_003977() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003978(),
          CoreBinaryOperator::Plus(None),
          get_003988(),
        ))
      }
      pub(super) fn get_003973() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003974(),
          vec![get_003975(), get_003976(), get_003977()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_003965() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("new_index", 74u32) },
            get_003966(),
          )],
          get_003973(),
        ))
      }
      pub(super) fn get_003990() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("replace_after", 70u32)
        }))
      }
      pub(super) fn get_003991() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("start_index", 71u32)
        }))
      }
      pub(super) fn get_003993() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("curr_index", 72u32)
        }))
      }
      pub(super) fn get_003994() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_003992() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_003993(),
          CoreBinaryOperator::Plus(None),
          get_003994(),
        ))
      }
      pub(super) fn get_003995() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 73u32)
        }))
      }
      pub(super) fn get_003989() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003990(),
          vec![get_003991(), get_003992(), get_003995()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_003961() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003962(), get_003965(), get_003989()))
      }
      pub(super) fn get_003947() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003948(), get_003951(), get_003961()))
      }
      pub(super) fn get_003940() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("start_index", 71u32) },
              get_003941(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("curr_index", 72u32) },
              get_003943(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("acc", 73u32) },
              get_003945(),
            ),
          ],
          get_003947(),
        ))
      }
      pub(super) fn get_003999() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004000() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_003998() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_003999(), get_004000()))
      }
      pub(super) fn get_004001() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from_len", 67u32)
        }))
      }
      pub(super) fn get_004002() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_003997() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_003998(),
          vec![get_004001(), get_004002()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004005() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004006() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_004004() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004005(), get_004006()))
      }
      pub(super) fn get_004007() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("to", 65u32)
        }))
      }
      pub(super) fn get_004010() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004011() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("split"))
      }
      pub(super) fn get_004009() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004010(), get_004011()))
      }
      pub(super) fn get_004012() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 63u32)
        }))
      }
      pub(super) fn get_004013() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from", 64u32)
        }))
      }
      pub(super) fn get_004008() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004009(),
          vec![get_004012(), get_004013()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004003() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004004(),
          vec![get_004007(), get_004008()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004015() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("replace_after", 70u32)
        }))
      }
      pub(super) fn get_004016() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004017() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004018() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_004014() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004015(),
          vec![get_004016(), get_004017(), get_004018()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_003996() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003997(), get_004003(), get_004014()))
      }
      pub(super) fn get_003939() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("replace_after", 70u32) },
            get_003940(),
          )],
          get_003996(),
        ))
      }
      pub(super) fn get_003920() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("found_at", 68u32) },
            get_003921(),
          )],
          get_003939(),
        ))
      }
      pub(super) fn get_003914() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("from_len", 67u32) },
            get_003915(),
          )],
          get_003920(),
        ))
      }
      pub(super) fn get_003908() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("str_len", 66u32) },
            get_003909(),
          )],
          get_003914(),
        ))
      }
      pub(super) fn get_004020() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "'from' string must not be zero length.",
        ))
      }
      pub(super) fn get_004019() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004020()))
      }
      pub(super) fn get_003900() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003901(), get_003908(), get_004019()))
      }
      pub(super) fn get_004022() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Assertion failed: std.isString(to)",
        ))
      }
      pub(super) fn get_004021() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004022()))
      }
      pub(super) fn get_003894() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003895(), get_003900(), get_004021()))
      }
      pub(super) fn get_004024() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Assertion failed: std.isString(from)",
        ))
      }
      pub(super) fn get_004023() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004024()))
      }
      pub(super) fn get_003888() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003889(), get_003894(), get_004023()))
      }
      pub(super) fn get_004026() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Assertion failed: std.isString(str)",
        ))
      }
      pub(super) fn get_004025() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004026()))
      }
      pub(super) fn get_003882() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_003883(), get_003888(), get_004025()))
      }
      pub(super) fn get_003875() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 63u32) },
              get_003876(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("from", 64u32) },
              get_003878(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("to", 65u32) },
              get_003880(),
            ),
          ],
          get_003882(),
        ))
      }
      pub(super) fn get_003718() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_003719()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_003720(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_003721(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_003725(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_003830(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_003831(),
            ),
          ],
          get_003875(),
        ))
      }
      pub(super) fn get_004027() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("asciiUpper"))
      }
      pub(super) fn get_004029() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_004030() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_004033() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_004032() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004033()))
      }
      pub(super) fn get_004034() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_004031() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_004032(),
          )],
          get_004034(),
        ))
      }
      pub(super) fn get_004037() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_004036() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004037()))
      }
      pub(super) fn get_004039() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_004038() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004039()))
      }
      pub(super) fn get_004043() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004045() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004046() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004044() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004045(),
          CoreBinaryOperator::And(None),
          get_004046(),
        ))
      }
      pub(super) fn get_004042() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004043(),
          CoreBinaryOperator::GreaterThan(None),
          get_004044(),
        ))
      }
      pub(super) fn get_004047() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_004041() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004042(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_004047(),
        ))
      }
      pub(super) fn get_004051() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004052() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004050() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004051(), get_004052()))
      }
      pub(super) fn get_004053() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_004049() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004050(),
          vec![get_004053()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004057() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004058() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004056() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004057(), get_004058()))
      }
      pub(super) fn get_004059() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_004055() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004056(),
          vec![get_004059()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004063() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004064() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004062() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004063(), get_004064()))
      }
      pub(super) fn get_004065() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_004061() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004062(),
          vec![get_004065()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004069() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_004068() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004069()))
      }
      pub(super) fn get_004071() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_004070() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004071()))
      }
      pub(super) fn get_004075() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004076() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004074() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004075(), get_004076()))
      }
      pub(super) fn get_004077() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_004073() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004074(),
          vec![get_004077()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004081() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004082() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_004080() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004081(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004082(),
        ))
      }
      pub(super) fn get_004085() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004086() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_004084() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004085(),
          CoreBinaryOperator::Minus(None),
          get_004086(),
        ))
      }
      pub(super) fn get_004087() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_004083() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004084(),
          CoreBinaryOperator::Plus(None),
          get_004087(),
        ))
      }
      pub(super) fn get_004090() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004091() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_004089() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004090(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004091(),
        ))
      }
      pub(super) fn get_004094() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004095() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_004093() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004094(),
          CoreBinaryOperator::Minus(None),
          get_004095(),
        ))
      }
      pub(super) fn get_004096() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_004092() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004093(),
          CoreBinaryOperator::Plus(None),
          get_004096(),
        ))
      }
      pub(super) fn get_004098() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004099() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_004097() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004098(),
          CoreBinaryOperator::Minus(None),
          get_004099(),
        ))
      }
      pub(super) fn get_004088() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004089(), get_004092(), get_004097()))
      }
      pub(super) fn get_004079() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004080(), get_004083(), get_004088()))
      }
      pub(super) fn get_004103() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004105() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004106() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004104() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004105(),
          CoreBinaryOperator::And(None),
          get_004106(),
        ))
      }
      pub(super) fn get_004102() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004103(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004104(),
        ))
      }
      pub(super) fn get_004107() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004101() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004102(),
          CoreBinaryOperator::LessThan(None),
          get_004107(),
        ))
      }
      pub(super) fn get_004109() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004111() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_004112() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004110() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004111(),
          CoreBinaryOperator::Plus(None),
          get_004112(),
        ))
      }
      pub(super) fn get_004108() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004109(),
          CoreBinaryOperator::Mult(None),
          get_004110(),
        ))
      }
      pub(super) fn get_004116() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004117() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_004115() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004116(), get_004117()))
      }
      pub(super) fn get_004118() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_004120() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_004121() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004119() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004120(), get_004121()]))
      }
      pub(super) fn get_004114() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004115(),
          vec![get_004118(), get_004119()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004113() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004114()))
      }
      pub(super) fn get_004100() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004101(), get_004108(), get_004113()))
      }
      pub(super) fn get_004078() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_004079(),
          )],
          get_004100(),
        ))
      }
      pub(super) fn get_004072() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_004073(),
          )],
          get_004078(),
        ))
      }
      pub(super) fn get_004067() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_004068(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_004070(),
            ),
          ],
          get_004072(),
        ))
      }
      pub(super) fn get_004124() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004125() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_004123() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004124(), get_004125()))
      }
      pub(super) fn get_004126() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_004129() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004130() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_004128() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004129(), get_004130()))
      }
      pub(super) fn get_004131() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_004127() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004128(),
          vec![get_004131()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004132() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004122() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004123(),
          vec![get_004126(), get_004127(), get_004132()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004066() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_004067(),
          )],
          get_004122(),
        ))
      }
      pub(super) fn get_004060() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_004061(),
          )],
          get_004066(),
        ))
      }
      pub(super) fn get_004054() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_004055(),
          )],
          get_004060(),
        ))
      }
      pub(super) fn get_004048() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_004049(),
          )],
          get_004054(),
        ))
      }
      pub(super) fn get_004136() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004137() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_004135() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004136(), get_004137()))
      }
      pub(super) fn get_004138() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_004139() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004134() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004135(),
          vec![get_004138(), get_004139()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004133() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004134()))
      }
      pub(super) fn get_004040() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004041(), get_004048(), get_004133()))
      }
      pub(super) fn get_004035() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_004036(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_004038(),
            ),
          ],
          get_004040(),
        ))
      }
      pub(super) fn get_004140() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_004144() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_004145() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004143() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004144(), get_004145()))
      }
      pub(super) fn get_004147() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_004148() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004146() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004147(), get_004148()))
      }
      pub(super) fn get_004142() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004143(),
          )],
          get_004146(),
        ))
      }
      pub(super) fn get_004151() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_004152() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004150() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004151(), get_004152()))
      }
      pub(super) fn get_004153() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004149() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004150(),
          )],
          get_004153(),
        ))
      }
      pub(super) fn get_004157() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004158() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_004156() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004157(), get_004158()))
      }
      pub(super) fn get_004159() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004160() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_004155() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004156(),
          vec![get_004159(), get_004160()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004163() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004164() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_004162() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004163(), get_004164()))
      }
      pub(super) fn get_004165() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_004168() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004169() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_004167() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004168(), get_004169()))
      }
      pub(super) fn get_004172() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004173() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_004171() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004172(), get_004173()))
      }
      pub(super) fn get_004174() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_004170() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004171(),
          vec![get_004174()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004177() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_004176() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004177()))
      }
      pub(super) fn get_004180() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_004181() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_004179() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004180(), get_004181()))
      }
      pub(super) fn get_004184() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004183() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004184()]))
      }
      pub(super) fn get_004182() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004183()]))
      }
      pub(super) fn get_004178() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004179(),
          )],
          get_004182(),
        ))
      }
      pub(super) fn get_004175() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_004176(),
          )],
          get_004178(),
        ))
      }
      pub(super) fn get_004166() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004167(),
          vec![get_004170(), get_004175()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004161() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004162(),
          vec![get_004165(), get_004166()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004154() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_004155(),
          )],
          get_004161(),
        ))
      }
      pub(super) fn get_004141() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_004142(),
          get_004149(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_004154(),
        ))
      }
      pub(super) fn get_004187() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_004186() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004187()))
      }
      pub(super) fn get_004190() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004191() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004189() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004190(), get_004191()))
      }
      pub(super) fn get_004195() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'c' not bound"))
      }
      pub(super) fn get_004194() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004195()))
      }
      pub(super) fn get_004200() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cp", 76u32)
        }))
      }
      pub(super) fn get_004201() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 78u32)
        }))
      }
      pub(super) fn get_004199() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004200(),
          vec![get_004201()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004203() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(97f64))
      }
      pub(super) fn get_004205() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cp", 76u32)
        }))
      }
      pub(super) fn get_004206() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 78u32)
        }))
      }
      pub(super) fn get_004204() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004205(),
          vec![get_004206()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004202() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004203(),
          CoreBinaryOperator::And(None),
          get_004204(),
        ))
      }
      pub(super) fn get_004198() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004199(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004202(),
        ))
      }
      pub(super) fn get_004207() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(123f64))
      }
      pub(super) fn get_004197() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004198(),
          CoreBinaryOperator::LessThan(None),
          get_004207(),
        ))
      }
      pub(super) fn get_004210() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004211() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("char"))
      }
      pub(super) fn get_004209() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004210(), get_004211()))
      }
      pub(super) fn get_004214() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cp", 76u32)
        }))
      }
      pub(super) fn get_004215() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 78u32)
        }))
      }
      pub(super) fn get_004213() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004214(),
          vec![get_004215()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004216() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(32f64))
      }
      pub(super) fn get_004212() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004213(),
          CoreBinaryOperator::Minus(None),
          get_004216(),
        ))
      }
      pub(super) fn get_004208() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004209(),
          vec![get_004212()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004217() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 78u32)
        }))
      }
      pub(super) fn get_004196() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004197(), get_004208(), get_004217()))
      }
      pub(super) fn get_004193() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("c", 78u32) },
            get_004194(),
          )],
          get_004196(),
        ))
      }
      pub(super) fn get_004220() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004221() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_004219() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004220(), get_004221()))
      }
      pub(super) fn get_004222() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_004225() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004226() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("map"))
      }
      pub(super) fn get_004224() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004225(), get_004226()))
      }
      pub(super) fn get_004227() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("up_letter", 77u32)
        }))
      }
      pub(super) fn get_004230() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004231() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_004229() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004230(), get_004231()))
      }
      pub(super) fn get_004232() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 75u32)
        }))
      }
      pub(super) fn get_004228() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004229(),
          vec![get_004232()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004223() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004224(),
          vec![get_004227(), get_004228()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004218() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004219(),
          vec![get_004222(), get_004223()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004192() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("up_letter", 77u32) },
            get_004193(),
          )],
          get_004218(),
        ))
      }
      pub(super) fn get_004188() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("cp", 76u32) },
            get_004189(),
          )],
          get_004192(),
        ))
      }
      pub(super) fn get_004185() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str", 75u32) },
            get_004186(),
          )],
          get_004188(),
        ))
      }
      pub(super) fn get_004028() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_004029()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_004030(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_004031(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_004035(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_004140(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_004141(),
            ),
          ],
          get_004185(),
        ))
      }
      pub(super) fn get_004233() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("asciiLower"))
      }
      pub(super) fn get_004235() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_004236() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_004239() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_004238() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004239()))
      }
      pub(super) fn get_004240() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_004237() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_004238(),
          )],
          get_004240(),
        ))
      }
      pub(super) fn get_004243() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_004242() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004243()))
      }
      pub(super) fn get_004245() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_004244() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004245()))
      }
      pub(super) fn get_004249() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004251() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004252() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004250() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004251(),
          CoreBinaryOperator::And(None),
          get_004252(),
        ))
      }
      pub(super) fn get_004248() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004249(),
          CoreBinaryOperator::GreaterThan(None),
          get_004250(),
        ))
      }
      pub(super) fn get_004253() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_004247() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004248(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_004253(),
        ))
      }
      pub(super) fn get_004257() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004258() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004256() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004257(), get_004258()))
      }
      pub(super) fn get_004259() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_004255() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004256(),
          vec![get_004259()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004263() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004264() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004262() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004263(), get_004264()))
      }
      pub(super) fn get_004265() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_004261() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004262(),
          vec![get_004265()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004269() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004270() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004268() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004269(), get_004270()))
      }
      pub(super) fn get_004271() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_004267() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004268(),
          vec![get_004271()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004275() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_004274() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004275()))
      }
      pub(super) fn get_004277() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_004276() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004277()))
      }
      pub(super) fn get_004281() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004282() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004280() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004281(), get_004282()))
      }
      pub(super) fn get_004283() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_004279() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004280(),
          vec![get_004283()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004287() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004288() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_004286() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004287(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004288(),
        ))
      }
      pub(super) fn get_004291() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004292() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_004290() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004291(),
          CoreBinaryOperator::Minus(None),
          get_004292(),
        ))
      }
      pub(super) fn get_004293() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_004289() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004290(),
          CoreBinaryOperator::Plus(None),
          get_004293(),
        ))
      }
      pub(super) fn get_004296() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004297() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_004295() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004296(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004297(),
        ))
      }
      pub(super) fn get_004300() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004301() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_004299() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004300(),
          CoreBinaryOperator::Minus(None),
          get_004301(),
        ))
      }
      pub(super) fn get_004302() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_004298() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004299(),
          CoreBinaryOperator::Plus(None),
          get_004302(),
        ))
      }
      pub(super) fn get_004304() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004305() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_004303() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004304(),
          CoreBinaryOperator::Minus(None),
          get_004305(),
        ))
      }
      pub(super) fn get_004294() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004295(), get_004298(), get_004303()))
      }
      pub(super) fn get_004285() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004286(), get_004289(), get_004294()))
      }
      pub(super) fn get_004309() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004311() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004312() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004310() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004311(),
          CoreBinaryOperator::And(None),
          get_004312(),
        ))
      }
      pub(super) fn get_004308() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004309(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004310(),
        ))
      }
      pub(super) fn get_004313() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004307() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004308(),
          CoreBinaryOperator::LessThan(None),
          get_004313(),
        ))
      }
      pub(super) fn get_004315() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004317() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_004318() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004316() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004317(),
          CoreBinaryOperator::Plus(None),
          get_004318(),
        ))
      }
      pub(super) fn get_004314() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004315(),
          CoreBinaryOperator::Mult(None),
          get_004316(),
        ))
      }
      pub(super) fn get_004322() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004323() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_004321() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004322(), get_004323()))
      }
      pub(super) fn get_004324() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_004326() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_004327() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004325() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004326(), get_004327()]))
      }
      pub(super) fn get_004320() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004321(),
          vec![get_004324(), get_004325()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004319() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004320()))
      }
      pub(super) fn get_004306() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004307(), get_004314(), get_004319()))
      }
      pub(super) fn get_004284() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_004285(),
          )],
          get_004306(),
        ))
      }
      pub(super) fn get_004278() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_004279(),
          )],
          get_004284(),
        ))
      }
      pub(super) fn get_004273() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_004274(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_004276(),
            ),
          ],
          get_004278(),
        ))
      }
      pub(super) fn get_004330() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004331() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_004329() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004330(), get_004331()))
      }
      pub(super) fn get_004332() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_004335() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004336() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_004334() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004335(), get_004336()))
      }
      pub(super) fn get_004337() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_004333() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004334(),
          vec![get_004337()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004338() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004328() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004329(),
          vec![get_004332(), get_004333(), get_004338()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004272() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_004273(),
          )],
          get_004328(),
        ))
      }
      pub(super) fn get_004266() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_004267(),
          )],
          get_004272(),
        ))
      }
      pub(super) fn get_004260() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_004261(),
          )],
          get_004266(),
        ))
      }
      pub(super) fn get_004254() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_004255(),
          )],
          get_004260(),
        ))
      }
      pub(super) fn get_004342() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004343() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_004341() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004342(), get_004343()))
      }
      pub(super) fn get_004344() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_004345() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004340() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004341(),
          vec![get_004344(), get_004345()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004339() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004340()))
      }
      pub(super) fn get_004246() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004247(), get_004254(), get_004339()))
      }
      pub(super) fn get_004241() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_004242(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_004244(),
            ),
          ],
          get_004246(),
        ))
      }
      pub(super) fn get_004346() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_004350() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_004351() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004349() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004350(), get_004351()))
      }
      pub(super) fn get_004353() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_004354() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004352() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004353(), get_004354()))
      }
      pub(super) fn get_004348() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004349(),
          )],
          get_004352(),
        ))
      }
      pub(super) fn get_004357() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_004358() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004356() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004357(), get_004358()))
      }
      pub(super) fn get_004359() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004355() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004356(),
          )],
          get_004359(),
        ))
      }
      pub(super) fn get_004363() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004364() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_004362() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004363(), get_004364()))
      }
      pub(super) fn get_004365() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004366() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_004361() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004362(),
          vec![get_004365(), get_004366()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004369() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004370() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_004368() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004369(), get_004370()))
      }
      pub(super) fn get_004371() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_004374() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004375() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_004373() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004374(), get_004375()))
      }
      pub(super) fn get_004378() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004379() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_004377() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004378(), get_004379()))
      }
      pub(super) fn get_004380() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_004376() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004377(),
          vec![get_004380()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004383() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_004382() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004383()))
      }
      pub(super) fn get_004386() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_004387() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_004385() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004386(), get_004387()))
      }
      pub(super) fn get_004390() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004389() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004390()]))
      }
      pub(super) fn get_004388() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004389()]))
      }
      pub(super) fn get_004384() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004385(),
          )],
          get_004388(),
        ))
      }
      pub(super) fn get_004381() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_004382(),
          )],
          get_004384(),
        ))
      }
      pub(super) fn get_004372() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004373(),
          vec![get_004376(), get_004381()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004367() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004368(),
          vec![get_004371(), get_004372()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004360() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_004361(),
          )],
          get_004367(),
        ))
      }
      pub(super) fn get_004347() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_004348(),
          get_004355(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_004360(),
        ))
      }
      pub(super) fn get_004393() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_004392() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004393()))
      }
      pub(super) fn get_004396() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004397() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004395() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004396(), get_004397()))
      }
      pub(super) fn get_004401() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'c' not bound"))
      }
      pub(super) fn get_004400() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004401()))
      }
      pub(super) fn get_004406() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cp", 80u32)
        }))
      }
      pub(super) fn get_004407() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 82u32)
        }))
      }
      pub(super) fn get_004405() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004406(),
          vec![get_004407()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004409() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(65f64))
      }
      pub(super) fn get_004411() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cp", 80u32)
        }))
      }
      pub(super) fn get_004412() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 82u32)
        }))
      }
      pub(super) fn get_004410() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004411(),
          vec![get_004412()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004408() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004409(),
          CoreBinaryOperator::And(None),
          get_004410(),
        ))
      }
      pub(super) fn get_004404() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004405(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004408(),
        ))
      }
      pub(super) fn get_004413() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(91f64))
      }
      pub(super) fn get_004403() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004404(),
          CoreBinaryOperator::LessThan(None),
          get_004413(),
        ))
      }
      pub(super) fn get_004416() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004417() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("char"))
      }
      pub(super) fn get_004415() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004416(), get_004417()))
      }
      pub(super) fn get_004420() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cp", 80u32)
        }))
      }
      pub(super) fn get_004421() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 82u32)
        }))
      }
      pub(super) fn get_004419() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004420(),
          vec![get_004421()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004422() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(32f64))
      }
      pub(super) fn get_004418() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004419(),
          CoreBinaryOperator::Plus(None),
          get_004422(),
        ))
      }
      pub(super) fn get_004414() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004415(),
          vec![get_004418()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004423() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 82u32)
        }))
      }
      pub(super) fn get_004402() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004403(), get_004414(), get_004423()))
      }
      pub(super) fn get_004399() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("c", 82u32) },
            get_004400(),
          )],
          get_004402(),
        ))
      }
      pub(super) fn get_004426() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004427() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_004425() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004426(), get_004427()))
      }
      pub(super) fn get_004428() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_004431() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004432() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("map"))
      }
      pub(super) fn get_004430() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004431(), get_004432()))
      }
      pub(super) fn get_004433() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("down_letter", 81u32)
        }))
      }
      pub(super) fn get_004436() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004437() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_004435() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004436(), get_004437()))
      }
      pub(super) fn get_004438() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 79u32)
        }))
      }
      pub(super) fn get_004434() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004435(),
          vec![get_004438()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004429() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004430(),
          vec![get_004433(), get_004434()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004424() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004425(),
          vec![get_004428(), get_004429()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004398() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("down_letter", 81u32) },
            get_004399(),
          )],
          get_004424(),
        ))
      }
      pub(super) fn get_004394() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("cp", 80u32) },
            get_004395(),
          )],
          get_004398(),
        ))
      }
      pub(super) fn get_004391() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str", 79u32) },
            get_004392(),
          )],
          get_004394(),
        ))
      }
      pub(super) fn get_004234() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_004235()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_004236(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_004237(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_004241(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_004346(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_004347(),
            ),
          ],
          get_004391(),
        ))
      }
      pub(super) fn get_004439() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_004441() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_004442() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_004445() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_004444() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004445()))
      }
      pub(super) fn get_004446() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_004443() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_004444(),
          )],
          get_004446(),
        ))
      }
      pub(super) fn get_004449() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_004448() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004449()))
      }
      pub(super) fn get_004451() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_004450() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004451()))
      }
      pub(super) fn get_004455() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004457() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004458() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004456() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004457(),
          CoreBinaryOperator::And(None),
          get_004458(),
        ))
      }
      pub(super) fn get_004454() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004455(),
          CoreBinaryOperator::GreaterThan(None),
          get_004456(),
        ))
      }
      pub(super) fn get_004459() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_004453() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004454(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_004459(),
        ))
      }
      pub(super) fn get_004463() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004464() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004462() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004463(), get_004464()))
      }
      pub(super) fn get_004465() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_004461() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004462(),
          vec![get_004465()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004469() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004470() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004468() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004469(), get_004470()))
      }
      pub(super) fn get_004471() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_004467() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004468(),
          vec![get_004471()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004475() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004476() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004474() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004475(), get_004476()))
      }
      pub(super) fn get_004477() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_004473() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004474(),
          vec![get_004477()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004481() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_004480() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004481()))
      }
      pub(super) fn get_004483() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_004482() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004483()))
      }
      pub(super) fn get_004487() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004488() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004486() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004487(), get_004488()))
      }
      pub(super) fn get_004489() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_004485() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004486(),
          vec![get_004489()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004493() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004494() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_004492() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004493(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004494(),
        ))
      }
      pub(super) fn get_004497() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004498() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_004496() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004497(),
          CoreBinaryOperator::Minus(None),
          get_004498(),
        ))
      }
      pub(super) fn get_004499() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_004495() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004496(),
          CoreBinaryOperator::Plus(None),
          get_004499(),
        ))
      }
      pub(super) fn get_004502() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004503() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_004501() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004502(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004503(),
        ))
      }
      pub(super) fn get_004506() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004507() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_004505() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004506(),
          CoreBinaryOperator::Minus(None),
          get_004507(),
        ))
      }
      pub(super) fn get_004508() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_004504() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004505(),
          CoreBinaryOperator::Plus(None),
          get_004508(),
        ))
      }
      pub(super) fn get_004510() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004511() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_004509() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004510(),
          CoreBinaryOperator::Minus(None),
          get_004511(),
        ))
      }
      pub(super) fn get_004500() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004501(), get_004504(), get_004509()))
      }
      pub(super) fn get_004491() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004492(), get_004495(), get_004500()))
      }
      pub(super) fn get_004515() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004517() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004518() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004516() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004517(),
          CoreBinaryOperator::And(None),
          get_004518(),
        ))
      }
      pub(super) fn get_004514() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004515(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004516(),
        ))
      }
      pub(super) fn get_004519() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004513() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004514(),
          CoreBinaryOperator::LessThan(None),
          get_004519(),
        ))
      }
      pub(super) fn get_004521() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004523() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_004524() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004522() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004523(),
          CoreBinaryOperator::Plus(None),
          get_004524(),
        ))
      }
      pub(super) fn get_004520() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004521(),
          CoreBinaryOperator::Mult(None),
          get_004522(),
        ))
      }
      pub(super) fn get_004528() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004529() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_004527() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004528(), get_004529()))
      }
      pub(super) fn get_004530() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_004532() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_004533() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004531() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004532(), get_004533()]))
      }
      pub(super) fn get_004526() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004527(),
          vec![get_004530(), get_004531()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004525() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004526()))
      }
      pub(super) fn get_004512() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004513(), get_004520(), get_004525()))
      }
      pub(super) fn get_004490() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_004491(),
          )],
          get_004512(),
        ))
      }
      pub(super) fn get_004484() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_004485(),
          )],
          get_004490(),
        ))
      }
      pub(super) fn get_004479() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_004480(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_004482(),
            ),
          ],
          get_004484(),
        ))
      }
      pub(super) fn get_004536() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004537() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_004535() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004536(), get_004537()))
      }
      pub(super) fn get_004538() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_004541() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004542() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_004540() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004541(), get_004542()))
      }
      pub(super) fn get_004543() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_004539() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004540(),
          vec![get_004543()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004544() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004534() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004535(),
          vec![get_004538(), get_004539(), get_004544()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004478() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_004479(),
          )],
          get_004534(),
        ))
      }
      pub(super) fn get_004472() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_004473(),
          )],
          get_004478(),
        ))
      }
      pub(super) fn get_004466() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_004467(),
          )],
          get_004472(),
        ))
      }
      pub(super) fn get_004460() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_004461(),
          )],
          get_004466(),
        ))
      }
      pub(super) fn get_004548() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004549() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_004547() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004548(), get_004549()))
      }
      pub(super) fn get_004550() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_004551() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004546() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004547(),
          vec![get_004550(), get_004551()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004545() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004546()))
      }
      pub(super) fn get_004452() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004453(), get_004460(), get_004545()))
      }
      pub(super) fn get_004447() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_004448(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_004450(),
            ),
          ],
          get_004452(),
        ))
      }
      pub(super) fn get_004552() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_004556() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_004557() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004555() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004556(), get_004557()))
      }
      pub(super) fn get_004559() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_004560() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004558() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004559(), get_004560()))
      }
      pub(super) fn get_004554() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004555(),
          )],
          get_004558(),
        ))
      }
      pub(super) fn get_004563() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_004564() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004562() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004563(), get_004564()))
      }
      pub(super) fn get_004565() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004561() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004562(),
          )],
          get_004565(),
        ))
      }
      pub(super) fn get_004569() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004570() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_004568() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004569(), get_004570()))
      }
      pub(super) fn get_004571() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004572() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_004567() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004568(),
          vec![get_004571(), get_004572()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004575() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004576() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_004574() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004575(), get_004576()))
      }
      pub(super) fn get_004577() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_004580() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004581() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_004579() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004580(), get_004581()))
      }
      pub(super) fn get_004584() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004585() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_004583() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004584(), get_004585()))
      }
      pub(super) fn get_004586() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_004582() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004583(),
          vec![get_004586()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004589() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_004588() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004589()))
      }
      pub(super) fn get_004592() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_004593() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_004591() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004592(), get_004593()))
      }
      pub(super) fn get_004596() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004595() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004596()]))
      }
      pub(super) fn get_004594() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004595()]))
      }
      pub(super) fn get_004590() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004591(),
          )],
          get_004594(),
        ))
      }
      pub(super) fn get_004587() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_004588(),
          )],
          get_004590(),
        ))
      }
      pub(super) fn get_004578() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004579(),
          vec![get_004582(), get_004587()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004573() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004574(),
          vec![get_004577(), get_004578()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004566() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_004567(),
          )],
          get_004573(),
        ))
      }
      pub(super) fn get_004553() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_004554(),
          get_004561(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_004566(),
        ))
      }
      pub(super) fn get_004599() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'from' not bound"))
      }
      pub(super) fn get_004598() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004599()))
      }
      pub(super) fn get_004601() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'to' not bound"))
      }
      pub(super) fn get_004600() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004601()))
      }
      pub(super) fn get_004604() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004605() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_004603() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004604(), get_004605()))
      }
      pub(super) fn get_004608() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("to", 84u32)
        }))
      }
      pub(super) fn get_004609() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from", 83u32)
        }))
      }
      pub(super) fn get_004607() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004608(),
          CoreBinaryOperator::Minus(None),
          get_004609(),
        ))
      }
      pub(super) fn get_004610() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_004606() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004607(),
          CoreBinaryOperator::Plus(None),
          get_004610(),
        ))
      }
      pub(super) fn get_004613() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_004612() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004613()))
      }
      pub(super) fn get_004615() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 85u32)
        }))
      }
      pub(super) fn get_004616() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("from", 83u32)
        }))
      }
      pub(super) fn get_004614() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004615(),
          CoreBinaryOperator::Plus(None),
          get_004616(),
        ))
      }
      pub(super) fn get_004611() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 85u32) },
            get_004612(),
          )],
          get_004614(),
        ))
      }
      pub(super) fn get_004602() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004603(),
          vec![get_004606(), get_004611()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004597() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("from", 83u32) },
              get_004598(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("to", 84u32) },
              get_004600(),
            ),
          ],
          get_004602(),
        ))
      }
      pub(super) fn get_004440() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_004441()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_004442(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_004443(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_004447(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_004552(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_004553(),
            ),
          ],
          get_004597(),
        ))
      }
      pub(super) fn get_004617() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("repeat"))
      }
      pub(super) fn get_004619() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_004620() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_004623() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_004622() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004623()))
      }
      pub(super) fn get_004624() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_004621() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_004622(),
          )],
          get_004624(),
        ))
      }
      pub(super) fn get_004627() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_004626() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004627()))
      }
      pub(super) fn get_004629() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_004628() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004629()))
      }
      pub(super) fn get_004633() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004635() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004636() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004634() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004635(),
          CoreBinaryOperator::And(None),
          get_004636(),
        ))
      }
      pub(super) fn get_004632() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004633(),
          CoreBinaryOperator::GreaterThan(None),
          get_004634(),
        ))
      }
      pub(super) fn get_004637() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_004631() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004632(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_004637(),
        ))
      }
      pub(super) fn get_004641() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004642() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004640() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004641(), get_004642()))
      }
      pub(super) fn get_004643() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_004639() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004640(),
          vec![get_004643()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004647() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004648() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004646() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004647(), get_004648()))
      }
      pub(super) fn get_004649() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_004645() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004646(),
          vec![get_004649()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004653() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004654() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004652() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004653(), get_004654()))
      }
      pub(super) fn get_004655() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_004651() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004652(),
          vec![get_004655()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004659() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_004658() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004659()))
      }
      pub(super) fn get_004661() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_004660() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004661()))
      }
      pub(super) fn get_004665() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004666() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004664() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004665(), get_004666()))
      }
      pub(super) fn get_004667() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_004663() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004664(),
          vec![get_004667()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004671() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004672() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_004670() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004671(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004672(),
        ))
      }
      pub(super) fn get_004675() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004676() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_004674() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004675(),
          CoreBinaryOperator::Minus(None),
          get_004676(),
        ))
      }
      pub(super) fn get_004677() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_004673() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004674(),
          CoreBinaryOperator::Plus(None),
          get_004677(),
        ))
      }
      pub(super) fn get_004680() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004681() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_004679() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004680(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004681(),
        ))
      }
      pub(super) fn get_004684() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004685() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_004683() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004684(),
          CoreBinaryOperator::Minus(None),
          get_004685(),
        ))
      }
      pub(super) fn get_004686() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_004682() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004683(),
          CoreBinaryOperator::Plus(None),
          get_004686(),
        ))
      }
      pub(super) fn get_004688() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004689() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_004687() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004688(),
          CoreBinaryOperator::Minus(None),
          get_004689(),
        ))
      }
      pub(super) fn get_004678() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004679(), get_004682(), get_004687()))
      }
      pub(super) fn get_004669() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004670(), get_004673(), get_004678()))
      }
      pub(super) fn get_004693() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004695() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004696() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004694() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004695(),
          CoreBinaryOperator::And(None),
          get_004696(),
        ))
      }
      pub(super) fn get_004692() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004693(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004694(),
        ))
      }
      pub(super) fn get_004697() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004691() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004692(),
          CoreBinaryOperator::LessThan(None),
          get_004697(),
        ))
      }
      pub(super) fn get_004699() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004701() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_004702() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004700() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004701(),
          CoreBinaryOperator::Plus(None),
          get_004702(),
        ))
      }
      pub(super) fn get_004698() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004699(),
          CoreBinaryOperator::Mult(None),
          get_004700(),
        ))
      }
      pub(super) fn get_004706() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004707() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_004705() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004706(), get_004707()))
      }
      pub(super) fn get_004708() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_004710() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_004711() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004709() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004710(), get_004711()]))
      }
      pub(super) fn get_004704() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004705(),
          vec![get_004708(), get_004709()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004703() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004704()))
      }
      pub(super) fn get_004690() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004691(), get_004698(), get_004703()))
      }
      pub(super) fn get_004668() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_004669(),
          )],
          get_004690(),
        ))
      }
      pub(super) fn get_004662() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_004663(),
          )],
          get_004668(),
        ))
      }
      pub(super) fn get_004657() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_004658(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_004660(),
            ),
          ],
          get_004662(),
        ))
      }
      pub(super) fn get_004714() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004715() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_004713() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004714(), get_004715()))
      }
      pub(super) fn get_004716() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_004719() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004720() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_004718() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004719(), get_004720()))
      }
      pub(super) fn get_004721() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_004717() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004718(),
          vec![get_004721()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004722() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004712() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004713(),
          vec![get_004716(), get_004717(), get_004722()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004656() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_004657(),
          )],
          get_004712(),
        ))
      }
      pub(super) fn get_004650() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_004651(),
          )],
          get_004656(),
        ))
      }
      pub(super) fn get_004644() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_004645(),
          )],
          get_004650(),
        ))
      }
      pub(super) fn get_004638() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_004639(),
          )],
          get_004644(),
        ))
      }
      pub(super) fn get_004726() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004727() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_004725() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004726(), get_004727()))
      }
      pub(super) fn get_004728() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_004729() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004724() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004725(),
          vec![get_004728(), get_004729()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004723() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004724()))
      }
      pub(super) fn get_004630() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004631(), get_004638(), get_004723()))
      }
      pub(super) fn get_004625() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_004626(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_004628(),
            ),
          ],
          get_004630(),
        ))
      }
      pub(super) fn get_004730() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_004734() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_004735() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004733() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004734(), get_004735()))
      }
      pub(super) fn get_004737() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_004738() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004736() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004737(), get_004738()))
      }
      pub(super) fn get_004732() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004733(),
          )],
          get_004736(),
        ))
      }
      pub(super) fn get_004741() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_004742() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004740() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004741(), get_004742()))
      }
      pub(super) fn get_004743() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004739() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004740(),
          )],
          get_004743(),
        ))
      }
      pub(super) fn get_004747() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004748() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_004746() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004747(), get_004748()))
      }
      pub(super) fn get_004749() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004750() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_004745() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004746(),
          vec![get_004749(), get_004750()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004753() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004754() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_004752() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004753(), get_004754()))
      }
      pub(super) fn get_004755() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_004758() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004759() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_004757() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004758(), get_004759()))
      }
      pub(super) fn get_004762() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004763() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_004761() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004762(), get_004763()))
      }
      pub(super) fn get_004764() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_004760() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004761(),
          vec![get_004764()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004767() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_004766() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004767()))
      }
      pub(super) fn get_004770() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_004771() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_004769() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004770(), get_004771()))
      }
      pub(super) fn get_004774() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004773() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004774()]))
      }
      pub(super) fn get_004772() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004773()]))
      }
      pub(super) fn get_004768() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004769(),
          )],
          get_004772(),
        ))
      }
      pub(super) fn get_004765() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_004766(),
          )],
          get_004768(),
        ))
      }
      pub(super) fn get_004756() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004757(),
          vec![get_004760(), get_004765()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004751() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004752(),
          vec![get_004755(), get_004756()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004744() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_004745(),
          )],
          get_004751(),
        ))
      }
      pub(super) fn get_004731() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_004732(),
          get_004739(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_004744(),
        ))
      }
      pub(super) fn get_004777() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'what' not bound"))
      }
      pub(super) fn get_004776() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004777()))
      }
      pub(super) fn get_004779() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'count' not bound"))
      }
      pub(super) fn get_004778() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004779()))
      }
      pub(super) fn get_004784() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004785() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_004783() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004784(), get_004785()))
      }
      pub(super) fn get_004786() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("what", 86u32)
        }))
      }
      pub(super) fn get_004782() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004783(),
          vec![get_004786()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004787() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_004791() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004792() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_004790() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004791(), get_004792()))
      }
      pub(super) fn get_004793() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("what", 86u32)
        }))
      }
      pub(super) fn get_004789() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004790(),
          vec![get_004793()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004794() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_004796() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.repeat first argument must be an array or a string",
        ))
      }
      pub(super) fn get_004795() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004796()))
      }
      pub(super) fn get_004788() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004789(), get_004794(), get_004795()))
      }
      pub(super) fn get_004781() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004782(), get_004787(), get_004788()))
      }
      pub(super) fn get_004799() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004800() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_004798() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004799(), get_004800()))
      }
      pub(super) fn get_004801() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("joiner", 88u32)
        }))
      }
      pub(super) fn get_004804() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004805() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_004803() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004804(), get_004805()))
      }
      pub(super) fn get_004806() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("count", 87u32)
        }))
      }
      pub(super) fn get_004809() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_004808() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004809()))
      }
      pub(super) fn get_004810() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("what", 86u32)
        }))
      }
      pub(super) fn get_004807() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 89u32) },
            get_004808(),
          )],
          get_004810(),
        ))
      }
      pub(super) fn get_004802() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004803(),
          vec![get_004806(), get_004807()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004797() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004798(),
          vec![get_004801(), get_004802()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004780() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("joiner", 88u32) },
            get_004781(),
          )],
          get_004797(),
        ))
      }
      pub(super) fn get_004775() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("what", 86u32) },
              get_004776(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("count", 87u32) },
              get_004778(),
            ),
          ],
          get_004780(),
        ))
      }
      pub(super) fn get_004618() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_004619()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_004620(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_004621(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_004625(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_004730(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_004731(),
            ),
          ],
          get_004775(),
        ))
      }
      pub(super) fn get_004811() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_004813() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_004814() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_004817() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_004816() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004817()))
      }
      pub(super) fn get_004818() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_004815() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_004816(),
          )],
          get_004818(),
        ))
      }
      pub(super) fn get_004821() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_004820() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004821()))
      }
      pub(super) fn get_004823() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_004822() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004823()))
      }
      pub(super) fn get_004827() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004829() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004830() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004828() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004829(),
          CoreBinaryOperator::And(None),
          get_004830(),
        ))
      }
      pub(super) fn get_004826() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004827(),
          CoreBinaryOperator::GreaterThan(None),
          get_004828(),
        ))
      }
      pub(super) fn get_004831() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_004825() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004826(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_004831(),
        ))
      }
      pub(super) fn get_004835() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004836() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004834() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004835(), get_004836()))
      }
      pub(super) fn get_004837() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_004833() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004834(),
          vec![get_004837()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004841() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004842() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004840() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004841(), get_004842()))
      }
      pub(super) fn get_004843() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_004839() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004840(),
          vec![get_004843()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004847() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004848() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004846() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004847(), get_004848()))
      }
      pub(super) fn get_004849() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_004845() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004846(),
          vec![get_004849()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004853() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_004852() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004853()))
      }
      pub(super) fn get_004855() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_004854() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004855()))
      }
      pub(super) fn get_004859() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004860() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_004858() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004859(), get_004860()))
      }
      pub(super) fn get_004861() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_004857() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004858(),
          vec![get_004861()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004865() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004866() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_004864() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004865(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004866(),
        ))
      }
      pub(super) fn get_004869() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004870() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_004868() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004869(),
          CoreBinaryOperator::Minus(None),
          get_004870(),
        ))
      }
      pub(super) fn get_004871() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_004867() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004868(),
          CoreBinaryOperator::Plus(None),
          get_004871(),
        ))
      }
      pub(super) fn get_004874() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004875() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_004873() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004874(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004875(),
        ))
      }
      pub(super) fn get_004878() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004879() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_004877() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004878(),
          CoreBinaryOperator::Minus(None),
          get_004879(),
        ))
      }
      pub(super) fn get_004880() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_004876() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004877(),
          CoreBinaryOperator::Plus(None),
          get_004880(),
        ))
      }
      pub(super) fn get_004882() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_004883() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_004881() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004882(),
          CoreBinaryOperator::Minus(None),
          get_004883(),
        ))
      }
      pub(super) fn get_004872() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004873(), get_004876(), get_004881()))
      }
      pub(super) fn get_004863() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004864(), get_004867(), get_004872()))
      }
      pub(super) fn get_004887() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004889() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004890() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004888() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004889(),
          CoreBinaryOperator::And(None),
          get_004890(),
        ))
      }
      pub(super) fn get_004886() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004887(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_004888(),
        ))
      }
      pub(super) fn get_004891() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004885() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004886(),
          CoreBinaryOperator::LessThan(None),
          get_004891(),
        ))
      }
      pub(super) fn get_004893() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004895() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_004896() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_004894() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004895(),
          CoreBinaryOperator::Plus(None),
          get_004896(),
        ))
      }
      pub(super) fn get_004892() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_004893(),
          CoreBinaryOperator::Mult(None),
          get_004894(),
        ))
      }
      pub(super) fn get_004900() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004901() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_004899() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004900(), get_004901()))
      }
      pub(super) fn get_004902() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_004904() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_004905() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004903() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004904(), get_004905()]))
      }
      pub(super) fn get_004898() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004899(),
          vec![get_004902(), get_004903()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004897() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004898()))
      }
      pub(super) fn get_004884() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004885(), get_004892(), get_004897()))
      }
      pub(super) fn get_004862() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_004863(),
          )],
          get_004884(),
        ))
      }
      pub(super) fn get_004856() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_004857(),
          )],
          get_004862(),
        ))
      }
      pub(super) fn get_004851() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_004852(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_004854(),
            ),
          ],
          get_004856(),
        ))
      }
      pub(super) fn get_004908() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004909() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_004907() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004908(), get_004909()))
      }
      pub(super) fn get_004910() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_004913() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004914() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_004912() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004913(), get_004914()))
      }
      pub(super) fn get_004915() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_004911() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004912(),
          vec![get_004915()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004916() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004906() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004907(),
          vec![get_004910(), get_004911(), get_004916()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004850() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_004851(),
          )],
          get_004906(),
        ))
      }
      pub(super) fn get_004844() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_004845(),
          )],
          get_004850(),
        ))
      }
      pub(super) fn get_004838() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_004839(),
          )],
          get_004844(),
        ))
      }
      pub(super) fn get_004832() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_004833(),
          )],
          get_004838(),
        ))
      }
      pub(super) fn get_004920() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004921() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_004919() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004920(), get_004921()))
      }
      pub(super) fn get_004922() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_004923() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_004918() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004919(),
          vec![get_004922(), get_004923()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004917() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004918()))
      }
      pub(super) fn get_004824() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004825(), get_004832(), get_004917()))
      }
      pub(super) fn get_004819() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_004820(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_004822(),
            ),
          ],
          get_004824(),
        ))
      }
      pub(super) fn get_004924() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_004928() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_004929() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004927() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004928(), get_004929()))
      }
      pub(super) fn get_004931() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_004932() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004930() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004931(), get_004932()))
      }
      pub(super) fn get_004926() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004927(),
          )],
          get_004930(),
        ))
      }
      pub(super) fn get_004935() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_004936() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004934() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004935(), get_004936()))
      }
      pub(super) fn get_004937() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004933() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004934(),
          )],
          get_004937(),
        ))
      }
      pub(super) fn get_004941() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004942() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_004940() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004941(), get_004942()))
      }
      pub(super) fn get_004943() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004944() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_004939() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004940(),
          vec![get_004943(), get_004944()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004947() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004948() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_004946() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004947(), get_004948()))
      }
      pub(super) fn get_004949() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_004952() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004953() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_004951() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004952(), get_004953()))
      }
      pub(super) fn get_004956() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004957() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_004955() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004956(), get_004957()))
      }
      pub(super) fn get_004958() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_004954() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004955(),
          vec![get_004958()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004961() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_004960() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004961()))
      }
      pub(super) fn get_004964() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_004965() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_004963() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004964(), get_004965()))
      }
      pub(super) fn get_004968() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_004967() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004968()]))
      }
      pub(super) fn get_004966() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_004967()]))
      }
      pub(super) fn get_004962() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_004963(),
          )],
          get_004966(),
        ))
      }
      pub(super) fn get_004959() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_004960(),
          )],
          get_004962(),
        ))
      }
      pub(super) fn get_004950() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004951(),
          vec![get_004954(), get_004959()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004945() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004946(),
          vec![get_004949(), get_004950()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004938() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_004939(),
          )],
          get_004945(),
        ))
      }
      pub(super) fn get_004925() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_004926(),
          get_004933(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_004938(),
        ))
      }
      pub(super) fn get_004971() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'indexable' not bound"))
      }
      pub(super) fn get_004970() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004971()))
      }
      pub(super) fn get_004973() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'index' not bound"))
      }
      pub(super) fn get_004972() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004973()))
      }
      pub(super) fn get_004975() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'end' not bound"))
      }
      pub(super) fn get_004974() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004975()))
      }
      pub(super) fn get_004977() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'step' not bound"))
      }
      pub(super) fn get_004976() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_004977()))
      }
      pub(super) fn get_004980() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("indexable"))
      }
      pub(super) fn get_004982() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("indexable", 90u32)
        }))
      }
      pub(super) fn get_004981() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_004982()))
      }
      pub(super) fn get_004983() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("index"))
      }
      pub(super) fn get_004988() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_004989() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_004987() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004988(), get_004989()))
      }
      pub(super) fn get_004990() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("index", 91u32)
        }))
      }
      pub(super) fn get_004991() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_004986() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004987(),
          vec![get_004990(), get_004991()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_004992() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_004993() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("index", 91u32)
        }))
      }
      pub(super) fn get_004985() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004986(), get_004992(), get_004993()))
      }
      pub(super) fn get_004984() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_004985()))
      }
      pub(super) fn get_004994() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("end"))
      }
      pub(super) fn get_004999() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005000() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_004998() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_004999(), get_005000()))
      }
      pub(super) fn get_005001() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("end", 92u32)
        }))
      }
      pub(super) fn get_005002() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_004997() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_004998(),
          vec![get_005001(), get_005002()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005005() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005006() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_005004() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005005(), get_005006()))
      }
      pub(super) fn get_005007() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("indexable", 90u32)
        }))
      }
      pub(super) fn get_005003() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005004(),
          vec![get_005007()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005008() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("end", 92u32)
        }))
      }
      pub(super) fn get_004996() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_004997(), get_005003(), get_005008()))
      }
      pub(super) fn get_004995() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_004996()))
      }
      pub(super) fn get_005009() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("step"))
      }
      pub(super) fn get_005014() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005015() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_005013() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005014(), get_005015()))
      }
      pub(super) fn get_005016() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("step", 93u32)
        }))
      }
      pub(super) fn get_005017() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_005012() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005013(),
          vec![get_005016(), get_005017()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005018() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_005019() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("step", 93u32)
        }))
      }
      pub(super) fn get_005011() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005012(), get_005018(), get_005019()))
      }
      pub(super) fn get_005010() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_005011()))
      }
      pub(super) fn get_005020() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_005024() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005025() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_005023() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005024(), get_005025()))
      }
      pub(super) fn get_005026() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("indexable", 90u32)
        }))
      }
      pub(super) fn get_005022() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005023(),
          vec![get_005026()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005021() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_005022()))
      }
      pub(super) fn get_005027() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_005031() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005032() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_005030() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005031(), get_005032()))
      }
      pub(super) fn get_005033() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("indexable", 90u32)
        }))
      }
      pub(super) fn get_005029() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005030(),
          vec![get_005033()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005028() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_005029()))
      }
      pub(super) fn get_004979() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_004980(),
              CoreObjectFieldOperator::Default(None),
              get_004981(),
            ),
            CoreObjectField::new(
              get_004983(),
              CoreObjectFieldOperator::Default(None),
              get_004984(),
            ),
            CoreObjectField::new(
              get_004994(),
              CoreObjectFieldOperator::Default(None),
              get_004995(),
            ),
            CoreObjectField::new(
              get_005009(),
              CoreObjectFieldOperator::Default(None),
              get_005010(),
            ),
            CoreObjectField::new(
              get_005020(),
              CoreObjectFieldOperator::Default(None),
              get_005021(),
            ),
            CoreObjectField::new(
              get_005027(),
              CoreObjectFieldOperator::Default(None),
              get_005028(),
            ),
          ],
        ))
      }
      pub(super) fn get_005039() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005040() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("index"))
      }
      pub(super) fn get_005038() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005039(), get_005040()))
      }
      pub(super) fn get_005042() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005044() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005045() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("end"))
      }
      pub(super) fn get_005043() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005044(), get_005045()))
      }
      pub(super) fn get_005041() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005042(),
          CoreBinaryOperator::And(None),
          get_005043(),
        ))
      }
      pub(super) fn get_005037() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005038(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005041(),
        ))
      }
      pub(super) fn get_005047() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005049() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005050() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("step"))
      }
      pub(super) fn get_005048() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005049(), get_005050()))
      }
      pub(super) fn get_005046() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005047(),
          CoreBinaryOperator::And(None),
          get_005048(),
        ))
      }
      pub(super) fn get_005036() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005037(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005046(),
        ))
      }
      pub(super) fn get_005051() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005035() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005036(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005051(),
        ))
      }
      pub(super) fn get_005056() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005057() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_005055() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005056(), get_005057()))
      }
      pub(super) fn get_005058() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("step", 93u32)
        }))
      }
      pub(super) fn get_005059() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005054() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005055(),
          vec![get_005058(), get_005059()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005053() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_005054(),
        ))
      }
      pub(super) fn get_005064() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005065() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_005063() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005064(), get_005065()))
      }
      pub(super) fn get_005066() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("indexable", 90u32)
        }))
      }
      pub(super) fn get_005062() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005063(),
          vec![get_005066()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005069() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005070() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_005068() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005069(), get_005070()))
      }
      pub(super) fn get_005071() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("indexable", 90u32)
        }))
      }
      pub(super) fn get_005067() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005068(),
          vec![get_005071()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005061() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005062(),
          CoreBinaryOperator::Or(None),
          get_005067(),
        ))
      }
      pub(super) fn get_005075() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'slice' not bound"))
      }
      pub(super) fn get_005074() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005075()))
      }
      pub(super) fn get_005077() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'cur' not bound"))
      }
      pub(super) fn get_005076() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005077()))
      }
      pub(super) fn get_005081() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cur", 97u32)
        }))
      }
      pub(super) fn get_005084() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005085() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("end"))
      }
      pub(super) fn get_005083() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005084(), get_005085()))
      }
      pub(super) fn get_005086() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cur", 97u32)
        }))
      }
      pub(super) fn get_005082() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005083(),
          CoreBinaryOperator::Or(None),
          get_005086(),
        ))
      }
      pub(super) fn get_005080() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005081(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005082(),
        ))
      }
      pub(super) fn get_005088() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005089() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_005087() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005088(), get_005089()))
      }
      pub(super) fn get_005079() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005080(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005087(),
        ))
      }
      pub(super) fn get_005090() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("slice", 96u32)
        }))
      }
      pub(super) fn get_005092() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("build", 95u32)
        }))
      }
      pub(super) fn get_005096() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005097() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_005095() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005096(), get_005097()))
      }
      pub(super) fn get_005099() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005100() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_005098() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005099(), get_005100()))
      }
      pub(super) fn get_005101() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("string"))
      }
      pub(super) fn get_005094() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005095(),
          vec![get_005098(), get_005101()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005103() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("slice", 96u32)
        }))
      }
      pub(super) fn get_005106() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005107() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("indexable"))
      }
      pub(super) fn get_005105() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005106(), get_005107()))
      }
      pub(super) fn get_005108() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cur", 97u32)
        }))
      }
      pub(super) fn get_005104() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005105(), get_005108()))
      }
      pub(super) fn get_005102() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005103(),
          CoreBinaryOperator::Plus(None),
          get_005104(),
        ))
      }
      pub(super) fn get_005110() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("slice", 96u32)
        }))
      }
      pub(super) fn get_005114() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005115() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("indexable"))
      }
      pub(super) fn get_005113() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005114(), get_005115()))
      }
      pub(super) fn get_005116() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cur", 97u32)
        }))
      }
      pub(super) fn get_005112() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005113(), get_005116()))
      }
      pub(super) fn get_005111() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005112()]))
      }
      pub(super) fn get_005109() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005110(),
          CoreBinaryOperator::Plus(None),
          get_005111(),
        ))
      }
      pub(super) fn get_005093() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005094(), get_005102(), get_005109()))
      }
      pub(super) fn get_005118() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cur", 97u32)
        }))
      }
      pub(super) fn get_005120() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005121() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("step"))
      }
      pub(super) fn get_005119() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005120(), get_005121()))
      }
      pub(super) fn get_005117() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005118(),
          CoreBinaryOperator::Plus(None),
          get_005119(),
        ))
      }
      pub(super) fn get_005091() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005092(),
          vec![get_005093(), get_005117()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_005078() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005079(), get_005090(), get_005091()))
      }
      pub(super) fn get_005073() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("slice", 96u32) },
              get_005074(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("cur", 97u32) },
              get_005076(),
            ),
          ],
          get_005078(),
        ))
      }
      pub(super) fn get_005123() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("build", 95u32)
        }))
      }
      pub(super) fn get_005127() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005128() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_005126() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005127(), get_005128()))
      }
      pub(super) fn get_005130() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005131() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_005129() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005130(), get_005131()))
      }
      pub(super) fn get_005132() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("string"))
      }
      pub(super) fn get_005125() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005126(),
          vec![get_005129(), get_005132()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005133() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_005134() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_005124() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005125(), get_005133(), get_005134()))
      }
      pub(super) fn get_005136() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005137() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("index"))
      }
      pub(super) fn get_005135() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005136(), get_005137()))
      }
      pub(super) fn get_005122() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005123(),
          vec![get_005124(), get_005135()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005072() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("build", 95u32) },
            get_005073(),
          )],
          get_005122(),
        ))
      }
      pub(super) fn get_005141() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005142() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_005140() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005141(), get_005142()))
      }
      pub(super) fn get_005143() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.slice accepts a string or an array, but got: %s",
        ))
      }
      pub(super) fn get_005146() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005147() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_005145() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005146(), get_005147()))
      }
      pub(super) fn get_005148() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("indexable", 90u32)
        }))
      }
      pub(super) fn get_005144() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005145(),
          vec![get_005148()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005139() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005140(),
          vec![get_005143(), get_005144()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005138() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005139()))
      }
      pub(super) fn get_005060() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005061(), get_005072(), get_005138()))
      }
      pub(super) fn get_005152() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005153() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_005151() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005152(), get_005153()))
      }
      pub(super) fn get_005154() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "got %s but step must be greater than 0",
        ))
      }
      pub(super) fn get_005155() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("step", 93u32)
        }))
      }
      pub(super) fn get_005150() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005151(),
          vec![get_005154(), get_005155()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005149() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005150()))
      }
      pub(super) fn get_005052() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005053(), get_005060(), get_005149()))
      }
      pub(super) fn get_005159() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005160() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_005158() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005159(), get_005160()))
      }
      pub(super) fn get_005161() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "got [%s:%s:%s] but negative index, end, and steps are not supported",
        ))
      }
      pub(super) fn get_005164() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005165() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("index"))
      }
      pub(super) fn get_005163() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005164(), get_005165()))
      }
      pub(super) fn get_005167() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005168() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("end"))
      }
      pub(super) fn get_005166() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005167(), get_005168()))
      }
      pub(super) fn get_005170() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("invar", 94u32)
        }))
      }
      pub(super) fn get_005171() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("step"))
      }
      pub(super) fn get_005169() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005170(), get_005171()))
      }
      pub(super) fn get_005162() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![
          get_005163(),
          get_005166(),
          get_005169(),
        ]))
      }
      pub(super) fn get_005157() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005158(),
          vec![get_005161(), get_005162()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005156() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005157()))
      }
      pub(super) fn get_005034() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005035(), get_005052(), get_005156()))
      }
      pub(super) fn get_004978() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("invar", 94u32) },
            get_004979(),
          )],
          get_005034(),
        ))
      }
      pub(super) fn get_004969() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("indexable", 90u32) },
              get_004970(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("index", 91u32) },
              get_004972(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("end", 92u32) },
              get_004974(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("step", 93u32) },
              get_004976(),
            ),
          ],
          get_004978(),
        ))
      }
      pub(super) fn get_004812() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_004813()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_004814(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_004815(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_004819(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_004924(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_004925(),
            ),
          ],
          get_004969(),
        ))
      }
      pub(super) fn get_005172() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("member"))
      }
      pub(super) fn get_005174() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_005175() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_005178() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_005177() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005178()))
      }
      pub(super) fn get_005179() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_005176() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_005177(),
          )],
          get_005179(),
        ))
      }
      pub(super) fn get_005182() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_005181() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005182()))
      }
      pub(super) fn get_005184() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_005183() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005184()))
      }
      pub(super) fn get_005188() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005190() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005189() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005190(),
          CoreBinaryOperator::And(None),
          get_005191(),
        ))
      }
      pub(super) fn get_005187() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005188(),
          CoreBinaryOperator::GreaterThan(None),
          get_005189(),
        ))
      }
      pub(super) fn get_005192() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_005186() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005187(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_005192(),
        ))
      }
      pub(super) fn get_005196() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005197() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005195() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005196(), get_005197()))
      }
      pub(super) fn get_005198() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_005194() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005195(),
          vec![get_005198()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005202() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005203() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005201() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005202(), get_005203()))
      }
      pub(super) fn get_005204() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_005200() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005201(),
          vec![get_005204()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005208() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005209() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005207() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005208(), get_005209()))
      }
      pub(super) fn get_005210() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_005206() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005207(),
          vec![get_005210()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005214() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_005213() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005214()))
      }
      pub(super) fn get_005216() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_005215() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005216()))
      }
      pub(super) fn get_005220() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005221() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005219() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005220(), get_005221()))
      }
      pub(super) fn get_005222() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_005218() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005219(),
          vec![get_005222()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005226() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005227() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_005225() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005226(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005227(),
        ))
      }
      pub(super) fn get_005230() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005231() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_005229() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005230(),
          CoreBinaryOperator::Minus(None),
          get_005231(),
        ))
      }
      pub(super) fn get_005232() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_005228() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005229(),
          CoreBinaryOperator::Plus(None),
          get_005232(),
        ))
      }
      pub(super) fn get_005235() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005236() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_005234() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005235(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005236(),
        ))
      }
      pub(super) fn get_005239() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005240() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_005238() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005239(),
          CoreBinaryOperator::Minus(None),
          get_005240(),
        ))
      }
      pub(super) fn get_005241() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_005237() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005238(),
          CoreBinaryOperator::Plus(None),
          get_005241(),
        ))
      }
      pub(super) fn get_005243() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005244() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_005242() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005243(),
          CoreBinaryOperator::Minus(None),
          get_005244(),
        ))
      }
      pub(super) fn get_005233() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005234(), get_005237(), get_005242()))
      }
      pub(super) fn get_005224() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005225(), get_005228(), get_005233()))
      }
      pub(super) fn get_005248() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_005250() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005251() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_005249() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005250(),
          CoreBinaryOperator::And(None),
          get_005251(),
        ))
      }
      pub(super) fn get_005247() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005248(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005249(),
        ))
      }
      pub(super) fn get_005252() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005246() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005247(),
          CoreBinaryOperator::LessThan(None),
          get_005252(),
        ))
      }
      pub(super) fn get_005254() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005256() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_005257() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_005255() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005256(),
          CoreBinaryOperator::Plus(None),
          get_005257(),
        ))
      }
      pub(super) fn get_005253() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005254(),
          CoreBinaryOperator::Mult(None),
          get_005255(),
        ))
      }
      pub(super) fn get_005261() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005262() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_005260() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005261(), get_005262()))
      }
      pub(super) fn get_005263() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_005265() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_005266() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005264() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005265(), get_005266()]))
      }
      pub(super) fn get_005259() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005260(),
          vec![get_005263(), get_005264()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005258() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005259()))
      }
      pub(super) fn get_005245() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005246(), get_005253(), get_005258()))
      }
      pub(super) fn get_005223() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_005224(),
          )],
          get_005245(),
        ))
      }
      pub(super) fn get_005217() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_005218(),
          )],
          get_005223(),
        ))
      }
      pub(super) fn get_005212() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_005213(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_005215(),
            ),
          ],
          get_005217(),
        ))
      }
      pub(super) fn get_005269() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005270() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_005268() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005269(), get_005270()))
      }
      pub(super) fn get_005271() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_005274() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005275() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_005273() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005274(), get_005275()))
      }
      pub(super) fn get_005276() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_005272() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005273(),
          vec![get_005276()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005277() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005267() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005268(),
          vec![get_005271(), get_005272(), get_005277()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005211() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_005212(),
          )],
          get_005267(),
        ))
      }
      pub(super) fn get_005205() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_005206(),
          )],
          get_005211(),
        ))
      }
      pub(super) fn get_005199() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_005200(),
          )],
          get_005205(),
        ))
      }
      pub(super) fn get_005193() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_005194(),
          )],
          get_005199(),
        ))
      }
      pub(super) fn get_005281() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005282() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_005280() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005281(), get_005282()))
      }
      pub(super) fn get_005283() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_005284() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005279() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005280(),
          vec![get_005283(), get_005284()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005278() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005279()))
      }
      pub(super) fn get_005185() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005186(), get_005193(), get_005278()))
      }
      pub(super) fn get_005180() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_005181(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_005183(),
            ),
          ],
          get_005185(),
        ))
      }
      pub(super) fn get_005285() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_005289() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_005290() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005288() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005289(), get_005290()))
      }
      pub(super) fn get_005292() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_005293() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_005291() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005292(), get_005293()))
      }
      pub(super) fn get_005287() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_005288(),
          )],
          get_005291(),
        ))
      }
      pub(super) fn get_005296() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_005297() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005295() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005296(), get_005297()))
      }
      pub(super) fn get_005298() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_005294() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_005295(),
          )],
          get_005298(),
        ))
      }
      pub(super) fn get_005302() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005303() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_005301() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005302(), get_005303()))
      }
      pub(super) fn get_005304() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005305() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_005300() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005301(),
          vec![get_005304(), get_005305()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005308() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005309() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_005307() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005308(), get_005309()))
      }
      pub(super) fn get_005310() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_005313() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005314() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_005312() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005313(), get_005314()))
      }
      pub(super) fn get_005317() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005318() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_005316() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005317(), get_005318()))
      }
      pub(super) fn get_005319() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_005315() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005316(),
          vec![get_005319()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005322() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_005321() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005322()))
      }
      pub(super) fn get_005325() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_005326() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_005324() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005325(), get_005326()))
      }
      pub(super) fn get_005329() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_005328() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005329()]))
      }
      pub(super) fn get_005327() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005328()]))
      }
      pub(super) fn get_005323() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_005324(),
          )],
          get_005327(),
        ))
      }
      pub(super) fn get_005320() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_005321(),
          )],
          get_005323(),
        ))
      }
      pub(super) fn get_005311() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005312(),
          vec![get_005315(), get_005320()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005306() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005307(),
          vec![get_005310(), get_005311()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005299() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_005300(),
          )],
          get_005306(),
        ))
      }
      pub(super) fn get_005286() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_005287(),
          get_005294(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_005299(),
        ))
      }
      pub(super) fn get_005332() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_005331() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005332()))
      }
      pub(super) fn get_005334() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_005333() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005334()))
      }
      pub(super) fn get_005338() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005339() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_005337() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005338(), get_005339()))
      }
      pub(super) fn get_005340() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 98u32)
        }))
      }
      pub(super) fn get_005336() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005337(),
          vec![get_005340()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005344() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005345() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("count"))
      }
      pub(super) fn get_005343() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005344(), get_005345()))
      }
      pub(super) fn get_005346() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 98u32)
        }))
      }
      pub(super) fn get_005347() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 99u32)
        }))
      }
      pub(super) fn get_005342() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005343(),
          vec![get_005346(), get_005347()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005348() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005341() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005342(),
          CoreBinaryOperator::GreaterThan(None),
          get_005348(),
        ))
      }
      pub(super) fn get_005352() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005353() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_005351() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005352(), get_005353()))
      }
      pub(super) fn get_005354() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 98u32)
        }))
      }
      pub(super) fn get_005350() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005351(),
          vec![get_005354()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005358() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005359() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_005357() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005358(), get_005359()))
      }
      pub(super) fn get_005362() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005363() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("findSubstr"))
      }
      pub(super) fn get_005361() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005362(), get_005363()))
      }
      pub(super) fn get_005364() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 99u32)
        }))
      }
      pub(super) fn get_005365() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 98u32)
        }))
      }
      pub(super) fn get_005360() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005361(),
          vec![get_005364(), get_005365()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005356() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005357(),
          vec![get_005360()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005366() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005355() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005356(),
          CoreBinaryOperator::GreaterThan(None),
          get_005366(),
        ))
      }
      pub(super) fn get_005368() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.member first argument must be an array or a string",
        ))
      }
      pub(super) fn get_005367() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005368()))
      }
      pub(super) fn get_005349() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005350(), get_005355(), get_005367()))
      }
      pub(super) fn get_005335() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005336(), get_005341(), get_005349()))
      }
      pub(super) fn get_005330() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 98u32) },
              get_005331(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("x", 99u32) },
              get_005333(),
            ),
          ],
          get_005335(),
        ))
      }
      pub(super) fn get_005173() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_005174()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_005175(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_005176(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_005180(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_005285(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_005286(),
            ),
          ],
          get_005330(),
        ))
      }
      pub(super) fn get_005369() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("count"))
      }
      pub(super) fn get_005371() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_005372() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_005375() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_005374() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005375()))
      }
      pub(super) fn get_005376() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_005373() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_005374(),
          )],
          get_005376(),
        ))
      }
      pub(super) fn get_005379() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_005378() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005379()))
      }
      pub(super) fn get_005381() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_005380() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005381()))
      }
      pub(super) fn get_005385() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005387() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005388() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005386() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005387(),
          CoreBinaryOperator::And(None),
          get_005388(),
        ))
      }
      pub(super) fn get_005384() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005385(),
          CoreBinaryOperator::GreaterThan(None),
          get_005386(),
        ))
      }
      pub(super) fn get_005389() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_005383() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005384(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_005389(),
        ))
      }
      pub(super) fn get_005393() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005394() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005392() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005393(), get_005394()))
      }
      pub(super) fn get_005395() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_005391() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005392(),
          vec![get_005395()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005399() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005400() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005398() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005399(), get_005400()))
      }
      pub(super) fn get_005401() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_005397() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005398(),
          vec![get_005401()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005405() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005406() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005404() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005405(), get_005406()))
      }
      pub(super) fn get_005407() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_005403() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005404(),
          vec![get_005407()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005411() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_005410() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005411()))
      }
      pub(super) fn get_005413() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_005412() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005413()))
      }
      pub(super) fn get_005417() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005418() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005416() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005417(), get_005418()))
      }
      pub(super) fn get_005419() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_005415() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005416(),
          vec![get_005419()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005423() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005424() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_005422() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005423(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005424(),
        ))
      }
      pub(super) fn get_005427() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005428() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_005426() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005427(),
          CoreBinaryOperator::Minus(None),
          get_005428(),
        ))
      }
      pub(super) fn get_005429() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_005425() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005426(),
          CoreBinaryOperator::Plus(None),
          get_005429(),
        ))
      }
      pub(super) fn get_005432() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005433() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_005431() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005432(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005433(),
        ))
      }
      pub(super) fn get_005436() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005437() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_005435() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005436(),
          CoreBinaryOperator::Minus(None),
          get_005437(),
        ))
      }
      pub(super) fn get_005438() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_005434() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005435(),
          CoreBinaryOperator::Plus(None),
          get_005438(),
        ))
      }
      pub(super) fn get_005440() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005441() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_005439() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005440(),
          CoreBinaryOperator::Minus(None),
          get_005441(),
        ))
      }
      pub(super) fn get_005430() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005431(), get_005434(), get_005439()))
      }
      pub(super) fn get_005421() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005422(), get_005425(), get_005430()))
      }
      pub(super) fn get_005445() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_005447() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005448() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_005446() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005447(),
          CoreBinaryOperator::And(None),
          get_005448(),
        ))
      }
      pub(super) fn get_005444() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005445(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005446(),
        ))
      }
      pub(super) fn get_005449() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005443() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005444(),
          CoreBinaryOperator::LessThan(None),
          get_005449(),
        ))
      }
      pub(super) fn get_005451() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005453() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_005454() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_005452() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005453(),
          CoreBinaryOperator::Plus(None),
          get_005454(),
        ))
      }
      pub(super) fn get_005450() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005451(),
          CoreBinaryOperator::Mult(None),
          get_005452(),
        ))
      }
      pub(super) fn get_005458() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005459() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_005457() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005458(), get_005459()))
      }
      pub(super) fn get_005460() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_005462() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_005463() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005461() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005462(), get_005463()]))
      }
      pub(super) fn get_005456() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005457(),
          vec![get_005460(), get_005461()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005455() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005456()))
      }
      pub(super) fn get_005442() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005443(), get_005450(), get_005455()))
      }
      pub(super) fn get_005420() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_005421(),
          )],
          get_005442(),
        ))
      }
      pub(super) fn get_005414() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_005415(),
          )],
          get_005420(),
        ))
      }
      pub(super) fn get_005409() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_005410(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_005412(),
            ),
          ],
          get_005414(),
        ))
      }
      pub(super) fn get_005466() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005467() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_005465() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005466(), get_005467()))
      }
      pub(super) fn get_005468() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_005471() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005472() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_005470() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005471(), get_005472()))
      }
      pub(super) fn get_005473() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_005469() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005470(),
          vec![get_005473()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005474() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005464() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005465(),
          vec![get_005468(), get_005469(), get_005474()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005408() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_005409(),
          )],
          get_005464(),
        ))
      }
      pub(super) fn get_005402() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_005403(),
          )],
          get_005408(),
        ))
      }
      pub(super) fn get_005396() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_005397(),
          )],
          get_005402(),
        ))
      }
      pub(super) fn get_005390() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_005391(),
          )],
          get_005396(),
        ))
      }
      pub(super) fn get_005478() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005479() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_005477() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005478(), get_005479()))
      }
      pub(super) fn get_005480() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_005481() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005476() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005477(),
          vec![get_005480(), get_005481()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005475() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005476()))
      }
      pub(super) fn get_005382() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005383(), get_005390(), get_005475()))
      }
      pub(super) fn get_005377() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_005378(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_005380(),
            ),
          ],
          get_005382(),
        ))
      }
      pub(super) fn get_005482() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_005486() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_005487() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005485() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005486(), get_005487()))
      }
      pub(super) fn get_005489() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_005490() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_005488() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005489(), get_005490()))
      }
      pub(super) fn get_005484() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_005485(),
          )],
          get_005488(),
        ))
      }
      pub(super) fn get_005493() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_005494() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005492() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005493(), get_005494()))
      }
      pub(super) fn get_005495() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_005491() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_005492(),
          )],
          get_005495(),
        ))
      }
      pub(super) fn get_005499() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005500() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_005498() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005499(), get_005500()))
      }
      pub(super) fn get_005501() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005502() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_005497() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005498(),
          vec![get_005501(), get_005502()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005505() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005506() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_005504() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005505(), get_005506()))
      }
      pub(super) fn get_005507() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_005510() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005511() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_005509() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005510(), get_005511()))
      }
      pub(super) fn get_005514() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005515() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_005513() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005514(), get_005515()))
      }
      pub(super) fn get_005516() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_005512() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005513(),
          vec![get_005516()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005519() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_005518() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005519()))
      }
      pub(super) fn get_005522() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_005523() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_005521() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005522(), get_005523()))
      }
      pub(super) fn get_005526() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_005525() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005526()]))
      }
      pub(super) fn get_005524() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005525()]))
      }
      pub(super) fn get_005520() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_005521(),
          )],
          get_005524(),
        ))
      }
      pub(super) fn get_005517() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_005518(),
          )],
          get_005520(),
        ))
      }
      pub(super) fn get_005508() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005509(),
          vec![get_005512(), get_005517()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005503() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005504(),
          vec![get_005507(), get_005508()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005496() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_005497(),
          )],
          get_005503(),
        ))
      }
      pub(super) fn get_005483() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_005484(),
          get_005491(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_005496(),
        ))
      }
      pub(super) fn get_005529() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_005528() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005529()))
      }
      pub(super) fn get_005531() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_005530() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005531()))
      }
      pub(super) fn get_005534() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005535() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_005533() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005534(), get_005535()))
      }
      pub(super) fn get_005538() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005539() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("filter"))
      }
      pub(super) fn get_005537() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005538(), get_005539()))
      }
      pub(super) fn get_005542() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_005541() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005542()))
      }
      pub(super) fn get_005545() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005546() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_005544() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005545(), get_005546()))
      }
      pub(super) fn get_005547() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 102u32)
        }))
      }
      pub(super) fn get_005548() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 101u32)
        }))
      }
      pub(super) fn get_005543() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005544(),
          vec![get_005547(), get_005548()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005540() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("v", 102u32) },
            get_005541(),
          )],
          get_005543(),
        ))
      }
      pub(super) fn get_005549() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 100u32)
        }))
      }
      pub(super) fn get_005536() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005537(),
          vec![get_005540(), get_005549()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005532() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005533(),
          vec![get_005536()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005527() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 100u32) },
              get_005528(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("x", 101u32) },
              get_005530(),
            ),
          ],
          get_005532(),
        ))
      }
      pub(super) fn get_005370() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_005371()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_005372(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_005373(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_005377(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_005482(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_005483(),
            ),
          ],
          get_005527(),
        ))
      }
      pub(super) fn get_005550() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_005552() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_005553() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_005556() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_005555() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005556()))
      }
      pub(super) fn get_005557() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_005554() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_005555(),
          )],
          get_005557(),
        ))
      }
      pub(super) fn get_005560() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_005559() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005560()))
      }
      pub(super) fn get_005562() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_005561() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005562()))
      }
      pub(super) fn get_005566() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005568() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005569() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005567() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005568(),
          CoreBinaryOperator::And(None),
          get_005569(),
        ))
      }
      pub(super) fn get_005565() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005566(),
          CoreBinaryOperator::GreaterThan(None),
          get_005567(),
        ))
      }
      pub(super) fn get_005570() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_005564() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005565(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_005570(),
        ))
      }
      pub(super) fn get_005574() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005575() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005573() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005574(), get_005575()))
      }
      pub(super) fn get_005576() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_005572() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005573(),
          vec![get_005576()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005580() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005581() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005579() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005580(), get_005581()))
      }
      pub(super) fn get_005582() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_005578() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005579(),
          vec![get_005582()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005586() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005587() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005585() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005586(), get_005587()))
      }
      pub(super) fn get_005588() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_005584() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005585(),
          vec![get_005588()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005592() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_005591() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005592()))
      }
      pub(super) fn get_005594() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_005593() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005594()))
      }
      pub(super) fn get_005598() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005599() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005597() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005598(), get_005599()))
      }
      pub(super) fn get_005600() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_005596() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005597(),
          vec![get_005600()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005604() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005605() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_005603() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005604(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005605(),
        ))
      }
      pub(super) fn get_005608() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005609() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_005607() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005608(),
          CoreBinaryOperator::Minus(None),
          get_005609(),
        ))
      }
      pub(super) fn get_005610() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_005606() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005607(),
          CoreBinaryOperator::Plus(None),
          get_005610(),
        ))
      }
      pub(super) fn get_005613() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005614() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_005612() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005613(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005614(),
        ))
      }
      pub(super) fn get_005617() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005618() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_005616() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005617(),
          CoreBinaryOperator::Minus(None),
          get_005618(),
        ))
      }
      pub(super) fn get_005619() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_005615() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005616(),
          CoreBinaryOperator::Plus(None),
          get_005619(),
        ))
      }
      pub(super) fn get_005621() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005622() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_005620() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005621(),
          CoreBinaryOperator::Minus(None),
          get_005622(),
        ))
      }
      pub(super) fn get_005611() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005612(), get_005615(), get_005620()))
      }
      pub(super) fn get_005602() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005603(), get_005606(), get_005611()))
      }
      pub(super) fn get_005626() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_005628() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005629() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_005627() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005628(),
          CoreBinaryOperator::And(None),
          get_005629(),
        ))
      }
      pub(super) fn get_005625() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005626(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005627(),
        ))
      }
      pub(super) fn get_005630() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005624() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005625(),
          CoreBinaryOperator::LessThan(None),
          get_005630(),
        ))
      }
      pub(super) fn get_005632() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005634() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_005635() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_005633() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005634(),
          CoreBinaryOperator::Plus(None),
          get_005635(),
        ))
      }
      pub(super) fn get_005631() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005632(),
          CoreBinaryOperator::Mult(None),
          get_005633(),
        ))
      }
      pub(super) fn get_005639() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005640() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_005638() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005639(), get_005640()))
      }
      pub(super) fn get_005641() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_005643() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_005644() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005642() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005643(), get_005644()]))
      }
      pub(super) fn get_005637() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005638(),
          vec![get_005641(), get_005642()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005636() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005637()))
      }
      pub(super) fn get_005623() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005624(), get_005631(), get_005636()))
      }
      pub(super) fn get_005601() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_005602(),
          )],
          get_005623(),
        ))
      }
      pub(super) fn get_005595() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_005596(),
          )],
          get_005601(),
        ))
      }
      pub(super) fn get_005590() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_005591(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_005593(),
            ),
          ],
          get_005595(),
        ))
      }
      pub(super) fn get_005647() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005648() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_005646() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005647(), get_005648()))
      }
      pub(super) fn get_005649() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_005652() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005653() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_005651() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005652(), get_005653()))
      }
      pub(super) fn get_005654() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_005650() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005651(),
          vec![get_005654()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005655() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005645() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005646(),
          vec![get_005649(), get_005650(), get_005655()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005589() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_005590(),
          )],
          get_005645(),
        ))
      }
      pub(super) fn get_005583() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_005584(),
          )],
          get_005589(),
        ))
      }
      pub(super) fn get_005577() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_005578(),
          )],
          get_005583(),
        ))
      }
      pub(super) fn get_005571() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_005572(),
          )],
          get_005577(),
        ))
      }
      pub(super) fn get_005659() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005660() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_005658() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005659(), get_005660()))
      }
      pub(super) fn get_005661() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_005662() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005657() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005658(),
          vec![get_005661(), get_005662()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005656() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005657()))
      }
      pub(super) fn get_005563() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005564(), get_005571(), get_005656()))
      }
      pub(super) fn get_005558() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_005559(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_005561(),
            ),
          ],
          get_005563(),
        ))
      }
      pub(super) fn get_005663() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_005667() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_005668() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005666() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005667(), get_005668()))
      }
      pub(super) fn get_005670() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_005671() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_005669() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005670(), get_005671()))
      }
      pub(super) fn get_005665() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_005666(),
          )],
          get_005669(),
        ))
      }
      pub(super) fn get_005674() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_005675() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005673() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005674(), get_005675()))
      }
      pub(super) fn get_005676() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_005672() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_005673(),
          )],
          get_005676(),
        ))
      }
      pub(super) fn get_005680() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005681() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_005679() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005680(), get_005681()))
      }
      pub(super) fn get_005682() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005683() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_005678() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005679(),
          vec![get_005682(), get_005683()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005686() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005687() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_005685() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005686(), get_005687()))
      }
      pub(super) fn get_005688() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_005691() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005692() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_005690() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005691(), get_005692()))
      }
      pub(super) fn get_005695() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005696() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_005694() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005695(), get_005696()))
      }
      pub(super) fn get_005697() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_005693() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005694(),
          vec![get_005697()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005700() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_005699() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005700()))
      }
      pub(super) fn get_005703() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_005704() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_005702() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005703(), get_005704()))
      }
      pub(super) fn get_005707() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_005706() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005707()]))
      }
      pub(super) fn get_005705() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005706()]))
      }
      pub(super) fn get_005701() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_005702(),
          )],
          get_005705(),
        ))
      }
      pub(super) fn get_005698() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_005699(),
          )],
          get_005701(),
        ))
      }
      pub(super) fn get_005689() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005690(),
          vec![get_005693(), get_005698()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005684() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005685(),
          vec![get_005688(), get_005689()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005677() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_005678(),
          )],
          get_005684(),
        ))
      }
      pub(super) fn get_005664() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_005665(),
          get_005672(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_005677(),
        ))
      }
      pub(super) fn get_005710() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_005709() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005710()))
      }
      pub(super) fn get_005712() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_005711() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005712()))
      }
      pub(super) fn get_005717() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005718() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_005716() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005717(), get_005718()))
      }
      pub(super) fn get_005719() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 103u32)
        }))
      }
      pub(super) fn get_005715() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005716(),
          vec![get_005719()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005722() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005723() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_005721() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005722(), get_005723()))
      }
      pub(super) fn get_005724() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 104u32)
        }))
      }
      pub(super) fn get_005720() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005721(),
          vec![get_005724()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005714() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005715(),
          CoreBinaryOperator::And(None),
          get_005720(),
        ))
      }
      pub(super) fn get_005727() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005728() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("modulo"))
      }
      pub(super) fn get_005726() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005727(), get_005728()))
      }
      pub(super) fn get_005729() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 103u32)
        }))
      }
      pub(super) fn get_005730() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 104u32)
        }))
      }
      pub(super) fn get_005725() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005726(),
          vec![get_005729(), get_005730()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005734() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005735() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_005733() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005734(), get_005735()))
      }
      pub(super) fn get_005736() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 103u32)
        }))
      }
      pub(super) fn get_005732() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005733(),
          vec![get_005736()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005739() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005740() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("format"))
      }
      pub(super) fn get_005738() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005739(), get_005740()))
      }
      pub(super) fn get_005741() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 103u32)
        }))
      }
      pub(super) fn get_005742() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 104u32)
        }))
      }
      pub(super) fn get_005737() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005738(),
          vec![get_005741(), get_005742()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005748() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Operator % cannot be used on types ",
        ))
      }
      pub(super) fn get_005751() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005752() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_005750() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005751(), get_005752()))
      }
      pub(super) fn get_005753() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 103u32)
        }))
      }
      pub(super) fn get_005749() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005750(),
          vec![get_005753()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005747() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005748(),
          CoreBinaryOperator::Plus(None),
          get_005749(),
        ))
      }
      pub(super) fn get_005754() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" and "))
      }
      pub(super) fn get_005746() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005747(),
          CoreBinaryOperator::Plus(None),
          get_005754(),
        ))
      }
      pub(super) fn get_005757() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005758() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_005756() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005757(), get_005758()))
      }
      pub(super) fn get_005759() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 104u32)
        }))
      }
      pub(super) fn get_005755() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005756(),
          vec![get_005759()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005745() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005746(),
          CoreBinaryOperator::Plus(None),
          get_005755(),
        ))
      }
      pub(super) fn get_005760() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("."))
      }
      pub(super) fn get_005744() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005745(),
          CoreBinaryOperator::Plus(None),
          get_005760(),
        ))
      }
      pub(super) fn get_005743() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005744()))
      }
      pub(super) fn get_005731() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005732(), get_005737(), get_005743()))
      }
      pub(super) fn get_005713() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005714(), get_005725(), get_005731()))
      }
      pub(super) fn get_005708() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 103u32) },
              get_005709(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 104u32) },
              get_005711(),
            ),
          ],
          get_005713(),
        ))
      }
      pub(super) fn get_005551() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_005552()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_005553(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_005554(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_005558(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_005663(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_005664(),
            ),
          ],
          get_005708(),
        ))
      }
      pub(super) fn get_005761() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("map"))
      }
      pub(super) fn get_005763() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_005764() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_005767() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_005766() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005767()))
      }
      pub(super) fn get_005768() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_005765() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_005766(),
          )],
          get_005768(),
        ))
      }
      pub(super) fn get_005771() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_005770() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005771()))
      }
      pub(super) fn get_005773() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_005772() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005773()))
      }
      pub(super) fn get_005777() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005779() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005780() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005778() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005779(),
          CoreBinaryOperator::And(None),
          get_005780(),
        ))
      }
      pub(super) fn get_005776() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005777(),
          CoreBinaryOperator::GreaterThan(None),
          get_005778(),
        ))
      }
      pub(super) fn get_005781() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_005775() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005776(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_005781(),
        ))
      }
      pub(super) fn get_005785() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005786() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005784() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005785(), get_005786()))
      }
      pub(super) fn get_005787() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_005783() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005784(),
          vec![get_005787()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005791() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005792() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005790() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005791(), get_005792()))
      }
      pub(super) fn get_005793() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_005789() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005790(),
          vec![get_005793()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005797() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005798() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005796() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005797(), get_005798()))
      }
      pub(super) fn get_005799() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_005795() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005796(),
          vec![get_005799()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005803() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_005802() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005803()))
      }
      pub(super) fn get_005805() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_005804() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005805()))
      }
      pub(super) fn get_005809() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005810() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_005808() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005809(), get_005810()))
      }
      pub(super) fn get_005811() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_005807() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005808(),
          vec![get_005811()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005815() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005816() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_005814() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005815(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005816(),
        ))
      }
      pub(super) fn get_005819() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005820() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_005818() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005819(),
          CoreBinaryOperator::Minus(None),
          get_005820(),
        ))
      }
      pub(super) fn get_005821() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_005817() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005818(),
          CoreBinaryOperator::Plus(None),
          get_005821(),
        ))
      }
      pub(super) fn get_005824() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005825() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_005823() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005824(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005825(),
        ))
      }
      pub(super) fn get_005828() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005829() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_005827() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005828(),
          CoreBinaryOperator::Minus(None),
          get_005829(),
        ))
      }
      pub(super) fn get_005830() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_005826() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005827(),
          CoreBinaryOperator::Plus(None),
          get_005830(),
        ))
      }
      pub(super) fn get_005832() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_005833() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_005831() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005832(),
          CoreBinaryOperator::Minus(None),
          get_005833(),
        ))
      }
      pub(super) fn get_005822() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005823(), get_005826(), get_005831()))
      }
      pub(super) fn get_005813() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005814(), get_005817(), get_005822()))
      }
      pub(super) fn get_005837() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_005839() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005840() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_005838() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005839(),
          CoreBinaryOperator::And(None),
          get_005840(),
        ))
      }
      pub(super) fn get_005836() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005837(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_005838(),
        ))
      }
      pub(super) fn get_005841() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005835() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005836(),
          CoreBinaryOperator::LessThan(None),
          get_005841(),
        ))
      }
      pub(super) fn get_005843() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005845() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_005846() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_005844() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005845(),
          CoreBinaryOperator::Plus(None),
          get_005846(),
        ))
      }
      pub(super) fn get_005842() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005843(),
          CoreBinaryOperator::Mult(None),
          get_005844(),
        ))
      }
      pub(super) fn get_005850() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005851() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_005849() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005850(), get_005851()))
      }
      pub(super) fn get_005852() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_005854() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_005855() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005853() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005854(), get_005855()]))
      }
      pub(super) fn get_005848() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005849(),
          vec![get_005852(), get_005853()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005847() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005848()))
      }
      pub(super) fn get_005834() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005835(), get_005842(), get_005847()))
      }
      pub(super) fn get_005812() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_005813(),
          )],
          get_005834(),
        ))
      }
      pub(super) fn get_005806() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_005807(),
          )],
          get_005812(),
        ))
      }
      pub(super) fn get_005801() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_005802(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_005804(),
            ),
          ],
          get_005806(),
        ))
      }
      pub(super) fn get_005858() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005859() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_005857() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005858(), get_005859()))
      }
      pub(super) fn get_005860() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_005863() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005864() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_005862() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005863(), get_005864()))
      }
      pub(super) fn get_005865() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_005861() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005862(),
          vec![get_005865()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005866() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005856() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005857(),
          vec![get_005860(), get_005861(), get_005866()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005800() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_005801(),
          )],
          get_005856(),
        ))
      }
      pub(super) fn get_005794() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_005795(),
          )],
          get_005800(),
        ))
      }
      pub(super) fn get_005788() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_005789(),
          )],
          get_005794(),
        ))
      }
      pub(super) fn get_005782() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_005783(),
          )],
          get_005788(),
        ))
      }
      pub(super) fn get_005870() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005871() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_005869() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005870(), get_005871()))
      }
      pub(super) fn get_005872() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_005873() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005868() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005869(),
          vec![get_005872(), get_005873()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005867() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005868()))
      }
      pub(super) fn get_005774() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005775(), get_005782(), get_005867()))
      }
      pub(super) fn get_005769() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_005770(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_005772(),
            ),
          ],
          get_005774(),
        ))
      }
      pub(super) fn get_005874() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_005878() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_005879() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005877() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005878(), get_005879()))
      }
      pub(super) fn get_005881() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_005882() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_005880() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005881(), get_005882()))
      }
      pub(super) fn get_005876() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_005877(),
          )],
          get_005880(),
        ))
      }
      pub(super) fn get_005885() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_005886() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005884() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005885(), get_005886()))
      }
      pub(super) fn get_005887() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_005883() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_005884(),
          )],
          get_005887(),
        ))
      }
      pub(super) fn get_005891() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005892() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_005890() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005891(), get_005892()))
      }
      pub(super) fn get_005893() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005894() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_005889() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005890(),
          vec![get_005893(), get_005894()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005897() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005898() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_005896() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005897(), get_005898()))
      }
      pub(super) fn get_005899() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_005902() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005903() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_005901() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005902(), get_005903()))
      }
      pub(super) fn get_005906() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005907() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_005905() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005906(), get_005907()))
      }
      pub(super) fn get_005908() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_005904() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005905(),
          vec![get_005908()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005911() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_005910() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005911()))
      }
      pub(super) fn get_005914() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_005915() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_005913() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005914(), get_005915()))
      }
      pub(super) fn get_005918() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_005917() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005918()]))
      }
      pub(super) fn get_005916() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_005917()]))
      }
      pub(super) fn get_005912() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_005913(),
          )],
          get_005916(),
        ))
      }
      pub(super) fn get_005909() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_005910(),
          )],
          get_005912(),
        ))
      }
      pub(super) fn get_005900() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005901(),
          vec![get_005904(), get_005909()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005895() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005896(),
          vec![get_005899(), get_005900()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005888() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_005889(),
          )],
          get_005895(),
        ))
      }
      pub(super) fn get_005875() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_005876(),
          get_005883(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_005888(),
        ))
      }
      pub(super) fn get_005921() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'func' not bound"))
      }
      pub(super) fn get_005920() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005921()))
      }
      pub(super) fn get_005923() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_005922() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005923()))
      }
      pub(super) fn get_005928() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005929() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isFunction"))
      }
      pub(super) fn get_005927() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005928(), get_005929()))
      }
      pub(super) fn get_005930() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 105u32)
        }))
      }
      pub(super) fn get_005926() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005927(),
          vec![get_005930()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005925() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_005926(),
        ))
      }
      pub(super) fn get_005933() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.map first param must be function, got ",
        ))
      }
      pub(super) fn get_005936() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005937() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_005935() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005936(), get_005937()))
      }
      pub(super) fn get_005938() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 105u32)
        }))
      }
      pub(super) fn get_005934() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005935(),
          vec![get_005938()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005932() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005933(),
          CoreBinaryOperator::Plus(None),
          get_005934(),
        ))
      }
      pub(super) fn get_005931() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005932()))
      }
      pub(super) fn get_005944() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005945() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_005943() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005944(), get_005945()))
      }
      pub(super) fn get_005946() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 106u32)
        }))
      }
      pub(super) fn get_005942() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005943(),
          vec![get_005946()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005941() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_005942(),
        ))
      }
      pub(super) fn get_005950() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005951() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_005949() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005950(), get_005951()))
      }
      pub(super) fn get_005952() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 106u32)
        }))
      }
      pub(super) fn get_005948() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005949(),
          vec![get_005952()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005947() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_005948(),
        ))
      }
      pub(super) fn get_005940() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005941(),
          CoreBinaryOperator::And(None),
          get_005947(),
        ))
      }
      pub(super) fn get_005955() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.map second param must be array / string, got ",
        ))
      }
      pub(super) fn get_005958() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005959() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_005957() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005958(), get_005959()))
      }
      pub(super) fn get_005960() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 106u32)
        }))
      }
      pub(super) fn get_005956() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005957(),
          vec![get_005960()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005954() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005955(),
          CoreBinaryOperator::Plus(None),
          get_005956(),
        ))
      }
      pub(super) fn get_005953() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005954()))
      }
      pub(super) fn get_005963() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005964() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_005962() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005963(), get_005964()))
      }
      pub(super) fn get_005967() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_005968() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_005966() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005967(), get_005968()))
      }
      pub(super) fn get_005969() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 106u32)
        }))
      }
      pub(super) fn get_005965() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005966(),
          vec![get_005969()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005972() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_005971() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005972()))
      }
      pub(super) fn get_005974() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 105u32)
        }))
      }
      pub(super) fn get_005976() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 106u32)
        }))
      }
      pub(super) fn get_005977() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 107u32)
        }))
      }
      pub(super) fn get_005975() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_005976(), get_005977()))
      }
      pub(super) fn get_005973() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005974(),
          vec![get_005975()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005970() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 107u32) },
            get_005971(),
          )],
          get_005973(),
        ))
      }
      pub(super) fn get_005961() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_005962(),
          vec![get_005965(), get_005970()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_005939() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005940(), get_005953(), get_005961()))
      }
      pub(super) fn get_005924() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005925(), get_005931(), get_005939()))
      }
      pub(super) fn get_005919() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("func", 105u32) },
              get_005920(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 106u32) },
              get_005922(),
            ),
          ],
          get_005924(),
        ))
      }
      pub(super) fn get_005762() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_005763()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_005764(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_005765(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_005769(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_005874(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_005875(),
            ),
          ],
          get_005919(),
        ))
      }
      pub(super) fn get_005978() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mapWithIndex"))
      }
      pub(super) fn get_005980() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_005981() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_005984() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_005983() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005984()))
      }
      pub(super) fn get_005985() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_005982() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_005983(),
          )],
          get_005985(),
        ))
      }
      pub(super) fn get_005988() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_005987() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005988()))
      }
      pub(super) fn get_005990() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_005989() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_005990()))
      }
      pub(super) fn get_005994() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005996() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_005997() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_005995() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005996(),
          CoreBinaryOperator::And(None),
          get_005997(),
        ))
      }
      pub(super) fn get_005993() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005994(),
          CoreBinaryOperator::GreaterThan(None),
          get_005995(),
        ))
      }
      pub(super) fn get_005998() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_005992() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_005993(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_005998(),
        ))
      }
      pub(super) fn get_006002() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006003() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006001() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006002(), get_006003()))
      }
      pub(super) fn get_006004() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_006000() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006001(),
          vec![get_006004()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006008() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006009() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006007() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006008(), get_006009()))
      }
      pub(super) fn get_006010() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_006006() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006007(),
          vec![get_006010()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006014() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006015() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006013() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006014(), get_006015()))
      }
      pub(super) fn get_006016() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_006012() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006013(),
          vec![get_006016()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006020() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_006019() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006020()))
      }
      pub(super) fn get_006022() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_006021() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006022()))
      }
      pub(super) fn get_006026() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006027() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006025() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006026(), get_006027()))
      }
      pub(super) fn get_006028() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_006024() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006025(),
          vec![get_006028()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006032() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006033() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_006031() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006032(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006033(),
        ))
      }
      pub(super) fn get_006036() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006037() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_006035() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006036(),
          CoreBinaryOperator::Minus(None),
          get_006037(),
        ))
      }
      pub(super) fn get_006038() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_006034() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006035(),
          CoreBinaryOperator::Plus(None),
          get_006038(),
        ))
      }
      pub(super) fn get_006041() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006042() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_006040() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006041(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006042(),
        ))
      }
      pub(super) fn get_006045() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006046() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_006044() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006045(),
          CoreBinaryOperator::Minus(None),
          get_006046(),
        ))
      }
      pub(super) fn get_006047() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_006043() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006044(),
          CoreBinaryOperator::Plus(None),
          get_006047(),
        ))
      }
      pub(super) fn get_006049() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006050() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_006048() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006049(),
          CoreBinaryOperator::Minus(None),
          get_006050(),
        ))
      }
      pub(super) fn get_006039() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006040(), get_006043(), get_006048()))
      }
      pub(super) fn get_006030() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006031(), get_006034(), get_006039()))
      }
      pub(super) fn get_006054() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_006056() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006057() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_006055() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006056(),
          CoreBinaryOperator::And(None),
          get_006057(),
        ))
      }
      pub(super) fn get_006053() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006054(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006055(),
        ))
      }
      pub(super) fn get_006058() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006052() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006053(),
          CoreBinaryOperator::LessThan(None),
          get_006058(),
        ))
      }
      pub(super) fn get_006060() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006062() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_006063() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_006061() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006062(),
          CoreBinaryOperator::Plus(None),
          get_006063(),
        ))
      }
      pub(super) fn get_006059() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006060(),
          CoreBinaryOperator::Mult(None),
          get_006061(),
        ))
      }
      pub(super) fn get_006067() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006068() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_006066() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006067(), get_006068()))
      }
      pub(super) fn get_006069() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_006071() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_006072() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006070() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006071(), get_006072()]))
      }
      pub(super) fn get_006065() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006066(),
          vec![get_006069(), get_006070()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006064() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006065()))
      }
      pub(super) fn get_006051() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006052(), get_006059(), get_006064()))
      }
      pub(super) fn get_006029() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_006030(),
          )],
          get_006051(),
        ))
      }
      pub(super) fn get_006023() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_006024(),
          )],
          get_006029(),
        ))
      }
      pub(super) fn get_006018() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_006019(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_006021(),
            ),
          ],
          get_006023(),
        ))
      }
      pub(super) fn get_006075() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006076() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_006074() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006075(), get_006076()))
      }
      pub(super) fn get_006077() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_006080() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006081() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_006079() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006080(), get_006081()))
      }
      pub(super) fn get_006082() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_006078() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006079(),
          vec![get_006082()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006083() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006073() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006074(),
          vec![get_006077(), get_006078(), get_006083()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006017() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_006018(),
          )],
          get_006073(),
        ))
      }
      pub(super) fn get_006011() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_006012(),
          )],
          get_006017(),
        ))
      }
      pub(super) fn get_006005() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_006006(),
          )],
          get_006011(),
        ))
      }
      pub(super) fn get_005999() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_006000(),
          )],
          get_006005(),
        ))
      }
      pub(super) fn get_006087() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006088() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_006086() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006087(), get_006088()))
      }
      pub(super) fn get_006089() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_006090() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006085() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006086(),
          vec![get_006089(), get_006090()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006084() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006085()))
      }
      pub(super) fn get_005991() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_005992(), get_005999(), get_006084()))
      }
      pub(super) fn get_005986() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_005987(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_005989(),
            ),
          ],
          get_005991(),
        ))
      }
      pub(super) fn get_006091() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_006095() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_006096() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006094() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006095(), get_006096()))
      }
      pub(super) fn get_006098() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_006099() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_006097() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006098(), get_006099()))
      }
      pub(super) fn get_006093() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_006094(),
          )],
          get_006097(),
        ))
      }
      pub(super) fn get_006102() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_006103() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006101() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006102(), get_006103()))
      }
      pub(super) fn get_006104() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_006100() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_006101(),
          )],
          get_006104(),
        ))
      }
      pub(super) fn get_006108() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006109() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_006107() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006108(), get_006109()))
      }
      pub(super) fn get_006110() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006111() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_006106() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006107(),
          vec![get_006110(), get_006111()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006114() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006115() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_006113() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006114(), get_006115()))
      }
      pub(super) fn get_006116() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_006119() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006120() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_006118() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006119(), get_006120()))
      }
      pub(super) fn get_006123() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006124() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_006122() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006123(), get_006124()))
      }
      pub(super) fn get_006125() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_006121() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006122(),
          vec![get_006125()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006128() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_006127() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006128()))
      }
      pub(super) fn get_006131() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_006132() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_006130() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006131(), get_006132()))
      }
      pub(super) fn get_006135() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_006134() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006135()]))
      }
      pub(super) fn get_006133() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006134()]))
      }
      pub(super) fn get_006129() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_006130(),
          )],
          get_006133(),
        ))
      }
      pub(super) fn get_006126() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_006127(),
          )],
          get_006129(),
        ))
      }
      pub(super) fn get_006117() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006118(),
          vec![get_006121(), get_006126()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006112() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006113(),
          vec![get_006116(), get_006117()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006105() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_006106(),
          )],
          get_006112(),
        ))
      }
      pub(super) fn get_006092() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_006093(),
          get_006100(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_006105(),
        ))
      }
      pub(super) fn get_006138() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'func' not bound"))
      }
      pub(super) fn get_006137() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006138()))
      }
      pub(super) fn get_006140() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_006139() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006140()))
      }
      pub(super) fn get_006145() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006146() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isFunction"))
      }
      pub(super) fn get_006144() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006145(), get_006146()))
      }
      pub(super) fn get_006147() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 108u32)
        }))
      }
      pub(super) fn get_006143() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006144(),
          vec![get_006147()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006142() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_006143(),
        ))
      }
      pub(super) fn get_006150() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.mapWithIndex first param must be function, got ",
        ))
      }
      pub(super) fn get_006153() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006154() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_006152() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006153(), get_006154()))
      }
      pub(super) fn get_006155() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 108u32)
        }))
      }
      pub(super) fn get_006151() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006152(),
          vec![get_006155()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006149() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006150(),
          CoreBinaryOperator::Plus(None),
          get_006151(),
        ))
      }
      pub(super) fn get_006148() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006149()))
      }
      pub(super) fn get_006161() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006162() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_006160() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006161(), get_006162()))
      }
      pub(super) fn get_006163() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 109u32)
        }))
      }
      pub(super) fn get_006159() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006160(),
          vec![get_006163()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006158() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_006159(),
        ))
      }
      pub(super) fn get_006167() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006168() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_006166() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006167(), get_006168()))
      }
      pub(super) fn get_006169() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 109u32)
        }))
      }
      pub(super) fn get_006165() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006166(),
          vec![get_006169()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006164() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_006165(),
        ))
      }
      pub(super) fn get_006157() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006158(),
          CoreBinaryOperator::And(None),
          get_006164(),
        ))
      }
      pub(super) fn get_006172() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.mapWithIndex second param must be array, got ",
        ))
      }
      pub(super) fn get_006175() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006176() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_006174() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006175(), get_006176()))
      }
      pub(super) fn get_006177() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 109u32)
        }))
      }
      pub(super) fn get_006173() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006174(),
          vec![get_006177()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006171() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006172(),
          CoreBinaryOperator::Plus(None),
          get_006173(),
        ))
      }
      pub(super) fn get_006170() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006171()))
      }
      pub(super) fn get_006180() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006181() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_006179() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006180(), get_006181()))
      }
      pub(super) fn get_006184() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006185() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_006183() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006184(), get_006185()))
      }
      pub(super) fn get_006186() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 109u32)
        }))
      }
      pub(super) fn get_006182() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006183(),
          vec![get_006186()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006189() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_006188() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006189()))
      }
      pub(super) fn get_006191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 108u32)
        }))
      }
      pub(super) fn get_006192() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 110u32)
        }))
      }
      pub(super) fn get_006194() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 109u32)
        }))
      }
      pub(super) fn get_006195() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 110u32)
        }))
      }
      pub(super) fn get_006193() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006194(), get_006195()))
      }
      pub(super) fn get_006190() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006191(),
          vec![get_006192(), get_006193()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006187() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 110u32) },
            get_006188(),
          )],
          get_006190(),
        ))
      }
      pub(super) fn get_006178() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006179(),
          vec![get_006182(), get_006187()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006156() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006157(), get_006170(), get_006178()))
      }
      pub(super) fn get_006141() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006142(), get_006148(), get_006156()))
      }
      pub(super) fn get_006136() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("func", 108u32) },
              get_006137(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 109u32) },
              get_006139(),
            ),
          ],
          get_006141(),
        ))
      }
      pub(super) fn get_005979() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_005980()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_005981(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_005982(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_005986(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_006091(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_006092(),
            ),
          ],
          get_006136(),
        ))
      }
      pub(super) fn get_006196() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mapWithKey"))
      }
      pub(super) fn get_006198() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_006199() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_006202() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_006201() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006202()))
      }
      pub(super) fn get_006203() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_006200() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_006201(),
          )],
          get_006203(),
        ))
      }
      pub(super) fn get_006206() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_006205() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006206()))
      }
      pub(super) fn get_006208() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_006207() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006208()))
      }
      pub(super) fn get_006212() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006214() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006215() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006213() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006214(),
          CoreBinaryOperator::And(None),
          get_006215(),
        ))
      }
      pub(super) fn get_006211() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006212(),
          CoreBinaryOperator::GreaterThan(None),
          get_006213(),
        ))
      }
      pub(super) fn get_006216() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_006210() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006211(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_006216(),
        ))
      }
      pub(super) fn get_006220() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006221() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006219() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006220(), get_006221()))
      }
      pub(super) fn get_006222() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_006218() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006219(),
          vec![get_006222()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006226() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006227() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006225() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006226(), get_006227()))
      }
      pub(super) fn get_006228() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_006224() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006225(),
          vec![get_006228()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006232() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006233() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006231() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006232(), get_006233()))
      }
      pub(super) fn get_006234() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_006230() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006231(),
          vec![get_006234()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006238() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_006237() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006238()))
      }
      pub(super) fn get_006240() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_006239() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006240()))
      }
      pub(super) fn get_006244() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006245() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006243() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006244(), get_006245()))
      }
      pub(super) fn get_006246() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_006242() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006243(),
          vec![get_006246()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006250() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006251() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_006249() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006250(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006251(),
        ))
      }
      pub(super) fn get_006254() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006255() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_006253() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006254(),
          CoreBinaryOperator::Minus(None),
          get_006255(),
        ))
      }
      pub(super) fn get_006256() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_006252() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006253(),
          CoreBinaryOperator::Plus(None),
          get_006256(),
        ))
      }
      pub(super) fn get_006259() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006260() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_006258() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006259(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006260(),
        ))
      }
      pub(super) fn get_006263() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006264() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_006262() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006263(),
          CoreBinaryOperator::Minus(None),
          get_006264(),
        ))
      }
      pub(super) fn get_006265() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_006261() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006262(),
          CoreBinaryOperator::Plus(None),
          get_006265(),
        ))
      }
      pub(super) fn get_006267() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006268() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_006266() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006267(),
          CoreBinaryOperator::Minus(None),
          get_006268(),
        ))
      }
      pub(super) fn get_006257() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006258(), get_006261(), get_006266()))
      }
      pub(super) fn get_006248() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006249(), get_006252(), get_006257()))
      }
      pub(super) fn get_006272() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_006274() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006275() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_006273() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006274(),
          CoreBinaryOperator::And(None),
          get_006275(),
        ))
      }
      pub(super) fn get_006271() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006272(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006273(),
        ))
      }
      pub(super) fn get_006276() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006270() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006271(),
          CoreBinaryOperator::LessThan(None),
          get_006276(),
        ))
      }
      pub(super) fn get_006278() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006280() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_006281() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_006279() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006280(),
          CoreBinaryOperator::Plus(None),
          get_006281(),
        ))
      }
      pub(super) fn get_006277() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006278(),
          CoreBinaryOperator::Mult(None),
          get_006279(),
        ))
      }
      pub(super) fn get_006285() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006286() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_006284() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006285(), get_006286()))
      }
      pub(super) fn get_006287() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_006289() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_006290() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006288() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006289(), get_006290()]))
      }
      pub(super) fn get_006283() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006284(),
          vec![get_006287(), get_006288()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006282() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006283()))
      }
      pub(super) fn get_006269() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006270(), get_006277(), get_006282()))
      }
      pub(super) fn get_006247() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_006248(),
          )],
          get_006269(),
        ))
      }
      pub(super) fn get_006241() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_006242(),
          )],
          get_006247(),
        ))
      }
      pub(super) fn get_006236() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_006237(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_006239(),
            ),
          ],
          get_006241(),
        ))
      }
      pub(super) fn get_006293() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006294() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_006292() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006293(), get_006294()))
      }
      pub(super) fn get_006295() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_006298() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006299() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_006297() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006298(), get_006299()))
      }
      pub(super) fn get_006300() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_006296() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006297(),
          vec![get_006300()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006301() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006291() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006292(),
          vec![get_006295(), get_006296(), get_006301()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006235() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_006236(),
          )],
          get_006291(),
        ))
      }
      pub(super) fn get_006229() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_006230(),
          )],
          get_006235(),
        ))
      }
      pub(super) fn get_006223() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_006224(),
          )],
          get_006229(),
        ))
      }
      pub(super) fn get_006217() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_006218(),
          )],
          get_006223(),
        ))
      }
      pub(super) fn get_006305() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006306() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_006304() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006305(), get_006306()))
      }
      pub(super) fn get_006307() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_006308() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006303() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006304(),
          vec![get_006307(), get_006308()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006302() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006303()))
      }
      pub(super) fn get_006209() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006210(), get_006217(), get_006302()))
      }
      pub(super) fn get_006204() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_006205(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_006207(),
            ),
          ],
          get_006209(),
        ))
      }
      pub(super) fn get_006309() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_006313() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_006314() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006312() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006313(), get_006314()))
      }
      pub(super) fn get_006316() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_006317() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_006315() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006316(), get_006317()))
      }
      pub(super) fn get_006311() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_006312(),
          )],
          get_006315(),
        ))
      }
      pub(super) fn get_006320() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_006321() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006319() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006320(), get_006321()))
      }
      pub(super) fn get_006322() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_006318() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_006319(),
          )],
          get_006322(),
        ))
      }
      pub(super) fn get_006326() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006327() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_006325() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006326(), get_006327()))
      }
      pub(super) fn get_006328() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006329() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_006324() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006325(),
          vec![get_006328(), get_006329()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006332() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006333() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_006331() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006332(), get_006333()))
      }
      pub(super) fn get_006334() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_006337() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006338() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_006336() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006337(), get_006338()))
      }
      pub(super) fn get_006341() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006342() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_006340() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006341(), get_006342()))
      }
      pub(super) fn get_006343() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_006339() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006340(),
          vec![get_006343()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006346() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_006345() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006346()))
      }
      pub(super) fn get_006349() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_006350() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_006348() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006349(), get_006350()))
      }
      pub(super) fn get_006353() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_006352() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006353()]))
      }
      pub(super) fn get_006351() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006352()]))
      }
      pub(super) fn get_006347() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_006348(),
          )],
          get_006351(),
        ))
      }
      pub(super) fn get_006344() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_006345(),
          )],
          get_006347(),
        ))
      }
      pub(super) fn get_006335() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006336(),
          vec![get_006339(), get_006344()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006330() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006331(),
          vec![get_006334(), get_006335()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006323() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_006324(),
          )],
          get_006330(),
        ))
      }
      pub(super) fn get_006310() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_006311(),
          get_006318(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_006323(),
        ))
      }
      pub(super) fn get_006356() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'func' not bound"))
      }
      pub(super) fn get_006355() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006356()))
      }
      pub(super) fn get_006358() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'obj' not bound"))
      }
      pub(super) fn get_006357() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006358()))
      }
      pub(super) fn get_006363() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006364() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isFunction"))
      }
      pub(super) fn get_006362() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006363(), get_006364()))
      }
      pub(super) fn get_006365() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 111u32)
        }))
      }
      pub(super) fn get_006361() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006362(),
          vec![get_006365()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006360() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_006361(),
        ))
      }
      pub(super) fn get_006368() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.mapWithKey first param must be function, got ",
        ))
      }
      pub(super) fn get_006371() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006372() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_006370() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006371(), get_006372()))
      }
      pub(super) fn get_006373() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 111u32)
        }))
      }
      pub(super) fn get_006369() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006370(),
          vec![get_006373()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006367() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006368(),
          CoreBinaryOperator::Plus(None),
          get_006369(),
        ))
      }
      pub(super) fn get_006366() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006367()))
      }
      pub(super) fn get_006378() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006379() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_006377() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006378(), get_006379()))
      }
      pub(super) fn get_006380() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("obj", 112u32)
        }))
      }
      pub(super) fn get_006376() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006377(),
          vec![get_006380()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006375() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_006376(),
        ))
      }
      pub(super) fn get_006383() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.mapWithKey second param must be object, got ",
        ))
      }
      pub(super) fn get_006386() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006387() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_006385() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006386(), get_006387()))
      }
      pub(super) fn get_006388() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("obj", 112u32)
        }))
      }
      pub(super) fn get_006384() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006385(),
          vec![get_006388()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006382() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006383(),
          CoreBinaryOperator::Plus(None),
          get_006384(),
        ))
      }
      pub(super) fn get_006381() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006382()))
      }
      pub(super) fn get_006392() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 113u32)
        }))
      }
      pub(super) fn get_006393() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006391() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006392(), get_006393()))
      }
      pub(super) fn get_006394() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 114u32)
        }))
      }
      pub(super) fn get_006390() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 114u32) },
            get_006391(),
          )],
          get_006394(),
        ))
      }
      pub(super) fn get_006397() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 113u32)
        }))
      }
      pub(super) fn get_006398() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006396() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006397(), get_006398()))
      }
      pub(super) fn get_006400() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 111u32)
        }))
      }
      pub(super) fn get_006401() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 114u32)
        }))
      }
      pub(super) fn get_006403() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("obj", 112u32)
        }))
      }
      pub(super) fn get_006404() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 114u32)
        }))
      }
      pub(super) fn get_006402() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006403(), get_006404()))
      }
      pub(super) fn get_006399() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006400(),
          vec![get_006401(), get_006402()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006395() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 114u32) },
            get_006396(),
          )],
          get_006399(),
        ))
      }
      pub(super) fn get_006408() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006409() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_006407() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006408(), get_006409()))
      }
      pub(super) fn get_006410() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("obj", 112u32)
        }))
      }
      pub(super) fn get_006406() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006407(),
          vec![get_006410()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006413() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006414() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_006412() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006413(), get_006414()))
      }
      pub(super) fn get_006415() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_006418() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006419() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_006417() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006418(), get_006419()))
      }
      pub(super) fn get_006422() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006423() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_006421() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006422(), get_006423()))
      }
      pub(super) fn get_006424() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 115u32)
        }))
      }
      pub(super) fn get_006420() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006421(),
          vec![get_006424()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006427() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_006426() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006427()))
      }
      pub(super) fn get_006430() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 115u32)
        }))
      }
      pub(super) fn get_006431() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 116u32)
        }))
      }
      pub(super) fn get_006429() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006430(), get_006431()))
      }
      pub(super) fn get_006434() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 114u32)
        }))
      }
      pub(super) fn get_006433() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006434()]))
      }
      pub(super) fn get_006432() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006433()]))
      }
      pub(super) fn get_006428() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 114u32) },
            get_006429(),
          )],
          get_006432(),
        ))
      }
      pub(super) fn get_006425() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 116u32) },
            get_006426(),
          )],
          get_006428(),
        ))
      }
      pub(super) fn get_006416() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006417(),
          vec![get_006420(), get_006425()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006411() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006412(),
          vec![get_006415(), get_006416()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006405() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 115u32) },
            get_006406(),
          )],
          get_006411(),
        ))
      }
      pub(super) fn get_006389() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_006390(),
          get_006395(),
          unsafe { CoreIdent::new_unchecked("$arr", 113u32) },
          get_006405(),
        ))
      }
      pub(super) fn get_006374() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006375(), get_006381(), get_006389()))
      }
      pub(super) fn get_006359() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006360(), get_006366(), get_006374()))
      }
      pub(super) fn get_006354() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("func", 111u32) },
              get_006355(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("obj", 112u32) },
              get_006357(),
            ),
          ],
          get_006359(),
        ))
      }
      pub(super) fn get_006197() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_006198()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_006199(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_006200(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_006204(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_006309(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_006310(),
            ),
          ],
          get_006354(),
        ))
      }
      pub(super) fn get_006435() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("flatMap"))
      }
      pub(super) fn get_006437() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_006438() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_006441() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_006440() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006441()))
      }
      pub(super) fn get_006442() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_006439() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_006440(),
          )],
          get_006442(),
        ))
      }
      pub(super) fn get_006445() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_006444() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006445()))
      }
      pub(super) fn get_006447() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_006446() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006447()))
      }
      pub(super) fn get_006451() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006453() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006454() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006452() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006453(),
          CoreBinaryOperator::And(None),
          get_006454(),
        ))
      }
      pub(super) fn get_006450() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006451(),
          CoreBinaryOperator::GreaterThan(None),
          get_006452(),
        ))
      }
      pub(super) fn get_006455() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_006449() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006450(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_006455(),
        ))
      }
      pub(super) fn get_006459() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006460() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006458() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006459(), get_006460()))
      }
      pub(super) fn get_006461() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_006457() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006458(),
          vec![get_006461()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006465() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006466() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006464() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006465(), get_006466()))
      }
      pub(super) fn get_006467() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_006463() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006464(),
          vec![get_006467()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006471() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006472() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006470() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006471(), get_006472()))
      }
      pub(super) fn get_006473() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_006469() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006470(),
          vec![get_006473()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006477() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_006476() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006477()))
      }
      pub(super) fn get_006479() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_006478() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006479()))
      }
      pub(super) fn get_006483() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006484() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006482() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006483(), get_006484()))
      }
      pub(super) fn get_006485() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_006481() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006482(),
          vec![get_006485()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006489() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006490() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_006488() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006489(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006490(),
        ))
      }
      pub(super) fn get_006493() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006494() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_006492() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006493(),
          CoreBinaryOperator::Minus(None),
          get_006494(),
        ))
      }
      pub(super) fn get_006495() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_006491() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006492(),
          CoreBinaryOperator::Plus(None),
          get_006495(),
        ))
      }
      pub(super) fn get_006498() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006499() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_006497() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006498(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006499(),
        ))
      }
      pub(super) fn get_006502() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006503() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_006501() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006502(),
          CoreBinaryOperator::Minus(None),
          get_006503(),
        ))
      }
      pub(super) fn get_006504() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_006500() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006501(),
          CoreBinaryOperator::Plus(None),
          get_006504(),
        ))
      }
      pub(super) fn get_006506() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006507() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_006505() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006506(),
          CoreBinaryOperator::Minus(None),
          get_006507(),
        ))
      }
      pub(super) fn get_006496() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006497(), get_006500(), get_006505()))
      }
      pub(super) fn get_006487() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006488(), get_006491(), get_006496()))
      }
      pub(super) fn get_006511() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_006513() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006514() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_006512() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006513(),
          CoreBinaryOperator::And(None),
          get_006514(),
        ))
      }
      pub(super) fn get_006510() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006511(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006512(),
        ))
      }
      pub(super) fn get_006515() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006509() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006510(),
          CoreBinaryOperator::LessThan(None),
          get_006515(),
        ))
      }
      pub(super) fn get_006517() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006519() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_006520() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_006518() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006519(),
          CoreBinaryOperator::Plus(None),
          get_006520(),
        ))
      }
      pub(super) fn get_006516() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006517(),
          CoreBinaryOperator::Mult(None),
          get_006518(),
        ))
      }
      pub(super) fn get_006524() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006525() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_006523() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006524(), get_006525()))
      }
      pub(super) fn get_006526() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_006528() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_006529() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006527() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006528(), get_006529()]))
      }
      pub(super) fn get_006522() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006523(),
          vec![get_006526(), get_006527()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006521() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006522()))
      }
      pub(super) fn get_006508() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006509(), get_006516(), get_006521()))
      }
      pub(super) fn get_006486() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_006487(),
          )],
          get_006508(),
        ))
      }
      pub(super) fn get_006480() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_006481(),
          )],
          get_006486(),
        ))
      }
      pub(super) fn get_006475() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_006476(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_006478(),
            ),
          ],
          get_006480(),
        ))
      }
      pub(super) fn get_006532() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006533() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_006531() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006532(), get_006533()))
      }
      pub(super) fn get_006534() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_006537() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006538() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_006536() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006537(), get_006538()))
      }
      pub(super) fn get_006539() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_006535() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006536(),
          vec![get_006539()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006540() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006530() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006531(),
          vec![get_006534(), get_006535(), get_006540()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006474() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_006475(),
          )],
          get_006530(),
        ))
      }
      pub(super) fn get_006468() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_006469(),
          )],
          get_006474(),
        ))
      }
      pub(super) fn get_006462() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_006463(),
          )],
          get_006468(),
        ))
      }
      pub(super) fn get_006456() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_006457(),
          )],
          get_006462(),
        ))
      }
      pub(super) fn get_006544() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006545() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_006543() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006544(), get_006545()))
      }
      pub(super) fn get_006546() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_006547() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006542() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006543(),
          vec![get_006546(), get_006547()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006541() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006542()))
      }
      pub(super) fn get_006448() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006449(), get_006456(), get_006541()))
      }
      pub(super) fn get_006443() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_006444(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_006446(),
            ),
          ],
          get_006448(),
        ))
      }
      pub(super) fn get_006548() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_006552() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_006553() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006551() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006552(), get_006553()))
      }
      pub(super) fn get_006555() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_006556() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_006554() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006555(), get_006556()))
      }
      pub(super) fn get_006550() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_006551(),
          )],
          get_006554(),
        ))
      }
      pub(super) fn get_006559() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_006560() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006558() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006559(), get_006560()))
      }
      pub(super) fn get_006561() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_006557() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_006558(),
          )],
          get_006561(),
        ))
      }
      pub(super) fn get_006565() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006566() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_006564() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006565(), get_006566()))
      }
      pub(super) fn get_006567() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006568() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_006563() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006564(),
          vec![get_006567(), get_006568()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006571() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006572() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_006570() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006571(), get_006572()))
      }
      pub(super) fn get_006573() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_006576() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006577() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_006575() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006576(), get_006577()))
      }
      pub(super) fn get_006580() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006581() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_006579() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006580(), get_006581()))
      }
      pub(super) fn get_006582() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_006578() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006579(),
          vec![get_006582()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006585() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_006584() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006585()))
      }
      pub(super) fn get_006588() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_006589() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_006587() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006588(), get_006589()))
      }
      pub(super) fn get_006592() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_006591() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006592()]))
      }
      pub(super) fn get_006590() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006591()]))
      }
      pub(super) fn get_006586() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_006587(),
          )],
          get_006590(),
        ))
      }
      pub(super) fn get_006583() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_006584(),
          )],
          get_006586(),
        ))
      }
      pub(super) fn get_006574() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006575(),
          vec![get_006578(), get_006583()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006569() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006570(),
          vec![get_006573(), get_006574()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006562() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_006563(),
          )],
          get_006569(),
        ))
      }
      pub(super) fn get_006549() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_006550(),
          get_006557(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_006562(),
        ))
      }
      pub(super) fn get_006595() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'func' not bound"))
      }
      pub(super) fn get_006594() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006595()))
      }
      pub(super) fn get_006597() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_006596() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006597()))
      }
      pub(super) fn get_006602() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006603() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isFunction"))
      }
      pub(super) fn get_006601() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006602(), get_006603()))
      }
      pub(super) fn get_006604() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 117u32)
        }))
      }
      pub(super) fn get_006600() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006601(),
          vec![get_006604()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006599() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_006600(),
        ))
      }
      pub(super) fn get_006607() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.flatMap first param must be function, got ",
        ))
      }
      pub(super) fn get_006610() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006611() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_006609() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006610(), get_006611()))
      }
      pub(super) fn get_006612() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 117u32)
        }))
      }
      pub(super) fn get_006608() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006609(),
          vec![get_006612()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006606() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006607(),
          CoreBinaryOperator::Plus(None),
          get_006608(),
        ))
      }
      pub(super) fn get_006605() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006606()))
      }
      pub(super) fn get_006616() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006617() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_006615() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006616(), get_006617()))
      }
      pub(super) fn get_006618() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 118u32)
        }))
      }
      pub(super) fn get_006614() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006615(),
          vec![get_006618()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006621() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006622() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("flattenArrays"))
      }
      pub(super) fn get_006620() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006621(), get_006622()))
      }
      pub(super) fn get_006625() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006626() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_006624() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006625(), get_006626()))
      }
      pub(super) fn get_006629() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006630() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_006628() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006629(), get_006630()))
      }
      pub(super) fn get_006631() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 118u32)
        }))
      }
      pub(super) fn get_006627() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006628(),
          vec![get_006631()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006634() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_006633() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006634()))
      }
      pub(super) fn get_006636() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 117u32)
        }))
      }
      pub(super) fn get_006638() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 118u32)
        }))
      }
      pub(super) fn get_006639() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 119u32)
        }))
      }
      pub(super) fn get_006637() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006638(), get_006639()))
      }
      pub(super) fn get_006635() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006636(),
          vec![get_006637()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006632() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 119u32) },
            get_006633(),
          )],
          get_006635(),
        ))
      }
      pub(super) fn get_006623() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006624(),
          vec![get_006627(), get_006632()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006619() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006620(),
          vec![get_006623()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006643() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006644() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_006642() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006643(), get_006644()))
      }
      pub(super) fn get_006645() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 118u32)
        }))
      }
      pub(super) fn get_006641() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006642(),
          vec![get_006645()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006648() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006649() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_006647() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006648(), get_006649()))
      }
      pub(super) fn get_006650() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_006653() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006654() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_006652() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006653(), get_006654()))
      }
      pub(super) fn get_006657() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006658() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_006656() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006657(), get_006658()))
      }
      pub(super) fn get_006659() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 118u32)
        }))
      }
      pub(super) fn get_006655() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006656(),
          vec![get_006659()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006662() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_006661() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006662()))
      }
      pub(super) fn get_006664() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 117u32)
        }))
      }
      pub(super) fn get_006666() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 118u32)
        }))
      }
      pub(super) fn get_006667() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 120u32)
        }))
      }
      pub(super) fn get_006665() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006666(), get_006667()))
      }
      pub(super) fn get_006663() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006664(),
          vec![get_006665()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006660() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 120u32) },
            get_006661(),
          )],
          get_006663(),
        ))
      }
      pub(super) fn get_006651() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006652(),
          vec![get_006655(), get_006660()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006646() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006647(),
          vec![get_006650(), get_006651()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006670() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.flatMap second param must be array / string, got ",
        ))
      }
      pub(super) fn get_006673() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006674() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_006672() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006673(), get_006674()))
      }
      pub(super) fn get_006675() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 118u32)
        }))
      }
      pub(super) fn get_006671() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006672(),
          vec![get_006675()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006669() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006670(),
          CoreBinaryOperator::Plus(None),
          get_006671(),
        ))
      }
      pub(super) fn get_006668() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006669()))
      }
      pub(super) fn get_006640() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006641(), get_006646(), get_006668()))
      }
      pub(super) fn get_006613() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006614(), get_006619(), get_006640()))
      }
      pub(super) fn get_006598() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006599(), get_006605(), get_006613()))
      }
      pub(super) fn get_006593() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("func", 117u32) },
              get_006594(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 118u32) },
              get_006596(),
            ),
          ],
          get_006598(),
        ))
      }
      pub(super) fn get_006436() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_006437()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_006438(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_006439(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_006443(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_006548(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_006549(),
            ),
          ],
          get_006593(),
        ))
      }
      pub(super) fn get_006676() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_006678() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_006679() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_006682() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_006681() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006682()))
      }
      pub(super) fn get_006683() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_006680() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_006681(),
          )],
          get_006683(),
        ))
      }
      pub(super) fn get_006686() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_006685() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006686()))
      }
      pub(super) fn get_006688() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_006687() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006688()))
      }
      pub(super) fn get_006692() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006694() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006695() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006693() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006694(),
          CoreBinaryOperator::And(None),
          get_006695(),
        ))
      }
      pub(super) fn get_006691() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006692(),
          CoreBinaryOperator::GreaterThan(None),
          get_006693(),
        ))
      }
      pub(super) fn get_006696() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_006690() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006691(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_006696(),
        ))
      }
      pub(super) fn get_006700() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006701() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006699() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006700(), get_006701()))
      }
      pub(super) fn get_006702() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_006698() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006699(),
          vec![get_006702()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006706() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006707() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006705() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006706(), get_006707()))
      }
      pub(super) fn get_006708() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_006704() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006705(),
          vec![get_006708()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006712() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006713() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006711() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006712(), get_006713()))
      }
      pub(super) fn get_006714() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_006710() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006711(),
          vec![get_006714()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006718() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_006717() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006718()))
      }
      pub(super) fn get_006720() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_006719() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006720()))
      }
      pub(super) fn get_006724() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006725() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_006723() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006724(), get_006725()))
      }
      pub(super) fn get_006726() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_006722() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006723(),
          vec![get_006726()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006730() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006731() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_006729() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006730(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006731(),
        ))
      }
      pub(super) fn get_006734() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006735() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_006733() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006734(),
          CoreBinaryOperator::Minus(None),
          get_006735(),
        ))
      }
      pub(super) fn get_006736() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_006732() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006733(),
          CoreBinaryOperator::Plus(None),
          get_006736(),
        ))
      }
      pub(super) fn get_006739() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006740() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_006738() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006739(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006740(),
        ))
      }
      pub(super) fn get_006743() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006744() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_006742() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006743(),
          CoreBinaryOperator::Minus(None),
          get_006744(),
        ))
      }
      pub(super) fn get_006745() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_006741() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006742(),
          CoreBinaryOperator::Plus(None),
          get_006745(),
        ))
      }
      pub(super) fn get_006747() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_006748() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_006746() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006747(),
          CoreBinaryOperator::Minus(None),
          get_006748(),
        ))
      }
      pub(super) fn get_006737() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006738(), get_006741(), get_006746()))
      }
      pub(super) fn get_006728() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006729(), get_006732(), get_006737()))
      }
      pub(super) fn get_006752() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_006754() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006755() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_006753() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006754(),
          CoreBinaryOperator::And(None),
          get_006755(),
        ))
      }
      pub(super) fn get_006751() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006752(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006753(),
        ))
      }
      pub(super) fn get_006756() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006750() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006751(),
          CoreBinaryOperator::LessThan(None),
          get_006756(),
        ))
      }
      pub(super) fn get_006758() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006760() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_006761() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_006759() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006760(),
          CoreBinaryOperator::Plus(None),
          get_006761(),
        ))
      }
      pub(super) fn get_006757() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006758(),
          CoreBinaryOperator::Mult(None),
          get_006759(),
        ))
      }
      pub(super) fn get_006765() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006766() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_006764() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006765(), get_006766()))
      }
      pub(super) fn get_006767() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_006769() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_006770() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006768() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006769(), get_006770()]))
      }
      pub(super) fn get_006763() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006764(),
          vec![get_006767(), get_006768()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006762() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006763()))
      }
      pub(super) fn get_006749() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006750(), get_006757(), get_006762()))
      }
      pub(super) fn get_006727() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_006728(),
          )],
          get_006749(),
        ))
      }
      pub(super) fn get_006721() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_006722(),
          )],
          get_006727(),
        ))
      }
      pub(super) fn get_006716() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_006717(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_006719(),
            ),
          ],
          get_006721(),
        ))
      }
      pub(super) fn get_006773() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006774() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_006772() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006773(), get_006774()))
      }
      pub(super) fn get_006775() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_006778() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006779() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_006777() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006778(), get_006779()))
      }
      pub(super) fn get_006780() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_006776() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006777(),
          vec![get_006780()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006781() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006771() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006772(),
          vec![get_006775(), get_006776(), get_006781()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006715() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_006716(),
          )],
          get_006771(),
        ))
      }
      pub(super) fn get_006709() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_006710(),
          )],
          get_006715(),
        ))
      }
      pub(super) fn get_006703() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_006704(),
          )],
          get_006709(),
        ))
      }
      pub(super) fn get_006697() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_006698(),
          )],
          get_006703(),
        ))
      }
      pub(super) fn get_006785() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006786() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_006784() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006785(), get_006786()))
      }
      pub(super) fn get_006787() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_006788() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_006783() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006784(),
          vec![get_006787(), get_006788()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006782() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006783()))
      }
      pub(super) fn get_006689() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006690(), get_006697(), get_006782()))
      }
      pub(super) fn get_006684() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_006685(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_006687(),
            ),
          ],
          get_006689(),
        ))
      }
      pub(super) fn get_006789() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_006793() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_006794() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006792() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006793(), get_006794()))
      }
      pub(super) fn get_006796() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_006797() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_006795() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006796(), get_006797()))
      }
      pub(super) fn get_006791() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_006792(),
          )],
          get_006795(),
        ))
      }
      pub(super) fn get_006800() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_006801() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006799() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006800(), get_006801()))
      }
      pub(super) fn get_006802() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_006798() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_006799(),
          )],
          get_006802(),
        ))
      }
      pub(super) fn get_006806() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006807() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_006805() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006806(), get_006807()))
      }
      pub(super) fn get_006808() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006809() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_006804() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006805(),
          vec![get_006808(), get_006809()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006812() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006813() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_006811() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006812(), get_006813()))
      }
      pub(super) fn get_006814() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_006817() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006818() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_006816() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006817(), get_006818()))
      }
      pub(super) fn get_006821() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006822() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_006820() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006821(), get_006822()))
      }
      pub(super) fn get_006823() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_006819() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006820(),
          vec![get_006823()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006826() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_006825() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006826()))
      }
      pub(super) fn get_006829() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_006830() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_006828() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006829(), get_006830()))
      }
      pub(super) fn get_006833() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_006832() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006833()]))
      }
      pub(super) fn get_006831() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_006832()]))
      }
      pub(super) fn get_006827() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_006828(),
          )],
          get_006831(),
        ))
      }
      pub(super) fn get_006824() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_006825(),
          )],
          get_006827(),
        ))
      }
      pub(super) fn get_006815() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006816(),
          vec![get_006819(), get_006824()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006810() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006811(),
          vec![get_006814(), get_006815()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006803() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_006804(),
          )],
          get_006810(),
        ))
      }
      pub(super) fn get_006790() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_006791(),
          get_006798(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_006803(),
        ))
      }
      pub(super) fn get_006836() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'sep' not bound"))
      }
      pub(super) fn get_006835() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006836()))
      }
      pub(super) fn get_006838() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_006837() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006838()))
      }
      pub(super) fn get_006842() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_006841() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006842()))
      }
      pub(super) fn get_006844() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_006843() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006844()))
      }
      pub(super) fn get_006846() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'first' not bound"))
      }
      pub(super) fn get_006845() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006846()))
      }
      pub(super) fn get_006848() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'running' not bound"))
      }
      pub(super) fn get_006847() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006848()))
      }
      pub(super) fn get_006851() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 125u32)
        }))
      }
      pub(super) fn get_006854() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006855() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_006853() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006854(), get_006855()))
      }
      pub(super) fn get_006856() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 124u32)
        }))
      }
      pub(super) fn get_006852() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006853(),
          vec![get_006856()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006850() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006851(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_006852(),
        ))
      }
      pub(super) fn get_006857() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("running", 127u32)
        }))
      }
      pub(super) fn get_006861() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006862() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_006860() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006861(), get_006862()))
      }
      pub(super) fn get_006864() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 124u32)
        }))
      }
      pub(super) fn get_006865() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 125u32)
        }))
      }
      pub(super) fn get_006863() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006864(), get_006865()))
      }
      pub(super) fn get_006866() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_006859() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006860(),
          vec![get_006863(), get_006866()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006868() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 123u32)
        }))
      }
      pub(super) fn get_006869() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 124u32)
        }))
      }
      pub(super) fn get_006871() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 125u32)
        }))
      }
      pub(super) fn get_006872() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_006870() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006871(),
          CoreBinaryOperator::Plus(None),
          get_006872(),
        ))
      }
      pub(super) fn get_006873() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("first", 126u32)
        }))
      }
      pub(super) fn get_006874() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("running", 127u32)
        }))
      }
      pub(super) fn get_006867() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006868(),
          vec![get_006869(), get_006870(), get_006873(), get_006874()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_006879() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006880() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_006878() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006879(), get_006880()))
      }
      pub(super) fn get_006883() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006884() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_006882() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006883(), get_006884()))
      }
      pub(super) fn get_006886() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 124u32)
        }))
      }
      pub(super) fn get_006887() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 125u32)
        }))
      }
      pub(super) fn get_006885() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006886(), get_006887()))
      }
      pub(super) fn get_006881() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006882(),
          vec![get_006885()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006890() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006891() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_006889() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006890(), get_006891()))
      }
      pub(super) fn get_006892() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("sep", 121u32)
        }))
      }
      pub(super) fn get_006888() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006889(),
          vec![get_006892()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006877() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006878(),
          vec![get_006881(), get_006888()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006876() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_006877(),
        ))
      }
      pub(super) fn get_006896() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006897() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_006895() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006896(), get_006897()))
      }
      pub(super) fn get_006898() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("expected %s but arr[%d] was %s "))
      }
      pub(super) fn get_006902() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006903() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_006901() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006902(), get_006903()))
      }
      pub(super) fn get_006904() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("sep", 121u32)
        }))
      }
      pub(super) fn get_006900() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006901(),
          vec![get_006904()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006905() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 125u32)
        }))
      }
      pub(super) fn get_006908() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006909() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_006907() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006908(), get_006909()))
      }
      pub(super) fn get_006911() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 124u32)
        }))
      }
      pub(super) fn get_006912() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 125u32)
        }))
      }
      pub(super) fn get_006910() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006911(), get_006912()))
      }
      pub(super) fn get_006906() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006907(),
          vec![get_006910()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006899() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![
          get_006900(),
          get_006905(),
          get_006906(),
        ]))
      }
      pub(super) fn get_006894() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006895(),
          vec![get_006898(), get_006899()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006893() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006894()))
      }
      pub(super) fn get_006914() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("first", 126u32)
        }))
      }
      pub(super) fn get_006916() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 123u32)
        }))
      }
      pub(super) fn get_006917() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 124u32)
        }))
      }
      pub(super) fn get_006919() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 125u32)
        }))
      }
      pub(super) fn get_006920() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_006918() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006919(),
          CoreBinaryOperator::Plus(None),
          get_006920(),
        ))
      }
      pub(super) fn get_006921() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_006923() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("running", 127u32)
        }))
      }
      pub(super) fn get_006925() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 124u32)
        }))
      }
      pub(super) fn get_006926() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 125u32)
        }))
      }
      pub(super) fn get_006924() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006925(), get_006926()))
      }
      pub(super) fn get_006922() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006923(),
          CoreBinaryOperator::Plus(None),
          get_006924(),
        ))
      }
      pub(super) fn get_006915() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006916(),
          vec![get_006917(), get_006918(), get_006921(), get_006922()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_006928() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 123u32)
        }))
      }
      pub(super) fn get_006929() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 124u32)
        }))
      }
      pub(super) fn get_006931() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 125u32)
        }))
      }
      pub(super) fn get_006932() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_006930() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006931(),
          CoreBinaryOperator::Plus(None),
          get_006932(),
        ))
      }
      pub(super) fn get_006933() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_006936() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("running", 127u32)
        }))
      }
      pub(super) fn get_006937() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("sep", 121u32)
        }))
      }
      pub(super) fn get_006935() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006936(),
          CoreBinaryOperator::Plus(None),
          get_006937(),
        ))
      }
      pub(super) fn get_006939() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 124u32)
        }))
      }
      pub(super) fn get_006940() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 125u32)
        }))
      }
      pub(super) fn get_006938() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006939(), get_006940()))
      }
      pub(super) fn get_006934() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006935(),
          CoreBinaryOperator::Plus(None),
          get_006938(),
        ))
      }
      pub(super) fn get_006927() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006928(),
          vec![get_006929(), get_006930(), get_006933(), get_006934()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_006913() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006914(), get_006915(), get_006927()))
      }
      pub(super) fn get_006875() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006876(), get_006893(), get_006913()))
      }
      pub(super) fn get_006858() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006859(), get_006867(), get_006875()))
      }
      pub(super) fn get_006849() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006850(), get_006857(), get_006858()))
      }
      pub(super) fn get_006840() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 124u32) },
              get_006841(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 125u32) },
              get_006843(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("first", 126u32) },
              get_006845(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("running", 127u32) },
              get_006847(),
            ),
          ],
          get_006849(),
        ))
      }
      pub(super) fn get_006945() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006946() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_006944() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006945(), get_006946()))
      }
      pub(super) fn get_006947() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 122u32)
        }))
      }
      pub(super) fn get_006943() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006944(),
          vec![get_006947()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006942() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_006943(),
        ))
      }
      pub(super) fn get_006950() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "join second parameter should be array, got ",
        ))
      }
      pub(super) fn get_006953() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006954() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_006952() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006953(), get_006954()))
      }
      pub(super) fn get_006955() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 122u32)
        }))
      }
      pub(super) fn get_006951() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006952(),
          vec![get_006955()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006949() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006950(),
          CoreBinaryOperator::Plus(None),
          get_006951(),
        ))
      }
      pub(super) fn get_006948() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006949()))
      }
      pub(super) fn get_006959() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006960() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_006958() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006959(), get_006960()))
      }
      pub(super) fn get_006961() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("sep", 121u32)
        }))
      }
      pub(super) fn get_006957() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006958(),
          vec![get_006961()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006963() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 123u32)
        }))
      }
      pub(super) fn get_006964() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 122u32)
        }))
      }
      pub(super) fn get_006965() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006966() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_006967() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_006962() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006963(),
          vec![get_006964(), get_006965(), get_006966(), get_006967()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006971() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006972() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_006970() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006971(), get_006972()))
      }
      pub(super) fn get_006973() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("sep", 121u32)
        }))
      }
      pub(super) fn get_006969() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006970(),
          vec![get_006973()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006975() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 123u32)
        }))
      }
      pub(super) fn get_006976() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 122u32)
        }))
      }
      pub(super) fn get_006977() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_006978() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_006979() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_006974() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006975(),
          vec![get_006976(), get_006977(), get_006978(), get_006979()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006982() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "join first parameter should be string or array, got ",
        ))
      }
      pub(super) fn get_006985() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_006986() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_006984() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_006985(), get_006986()))
      }
      pub(super) fn get_006987() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("sep", 121u32)
        }))
      }
      pub(super) fn get_006983() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_006984(),
          vec![get_006987()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_006981() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_006982(),
          CoreBinaryOperator::Plus(None),
          get_006983(),
        ))
      }
      pub(super) fn get_006980() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006981()))
      }
      pub(super) fn get_006968() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006969(), get_006974(), get_006980()))
      }
      pub(super) fn get_006956() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006957(), get_006962(), get_006968()))
      }
      pub(super) fn get_006941() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_006942(), get_006948(), get_006956()))
      }
      pub(super) fn get_006839() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 123u32) },
            get_006840(),
          )],
          get_006941(),
        ))
      }
      pub(super) fn get_006834() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("sep", 121u32) },
              get_006835(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 122u32) },
              get_006837(),
            ),
          ],
          get_006839(),
        ))
      }
      pub(super) fn get_006677() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_006678()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_006679(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_006680(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_006684(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_006789(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_006790(),
            ),
          ],
          get_006834(),
        ))
      }
      pub(super) fn get_006988() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("lines"))
      }
      pub(super) fn get_006990() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_006991() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_006994() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_006993() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006994()))
      }
      pub(super) fn get_006995() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_006992() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_006993(),
          )],
          get_006995(),
        ))
      }
      pub(super) fn get_006998() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_006997() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_006998()))
      }
      pub(super) fn get_007000() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_006999() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007000()))
      }
      pub(super) fn get_007004() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007006() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007007() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007005() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007006(),
          CoreBinaryOperator::And(None),
          get_007007(),
        ))
      }
      pub(super) fn get_007003() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007004(),
          CoreBinaryOperator::GreaterThan(None),
          get_007005(),
        ))
      }
      pub(super) fn get_007008() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_007002() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007003(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_007008(),
        ))
      }
      pub(super) fn get_007012() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007013() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_007011() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007012(), get_007013()))
      }
      pub(super) fn get_007014() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_007010() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007011(),
          vec![get_007014()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007018() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007019() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_007017() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007018(), get_007019()))
      }
      pub(super) fn get_007020() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_007016() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007017(),
          vec![get_007020()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007024() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007025() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_007023() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007024(), get_007025()))
      }
      pub(super) fn get_007026() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_007022() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007023(),
          vec![get_007026()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007030() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_007029() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007030()))
      }
      pub(super) fn get_007032() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_007031() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007032()))
      }
      pub(super) fn get_007036() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007037() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_007035() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007036(), get_007037()))
      }
      pub(super) fn get_007038() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_007034() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007035(),
          vec![get_007038()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007042() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007043() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_007041() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007042(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_007043(),
        ))
      }
      pub(super) fn get_007046() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007047() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_007045() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007046(),
          CoreBinaryOperator::Minus(None),
          get_007047(),
        ))
      }
      pub(super) fn get_007048() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007044() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007045(),
          CoreBinaryOperator::Plus(None),
          get_007048(),
        ))
      }
      pub(super) fn get_007051() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007052() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_007050() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007051(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_007052(),
        ))
      }
      pub(super) fn get_007055() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007056() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_007054() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007055(),
          CoreBinaryOperator::Minus(None),
          get_007056(),
        ))
      }
      pub(super) fn get_007057() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007053() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007054(),
          CoreBinaryOperator::Plus(None),
          get_007057(),
        ))
      }
      pub(super) fn get_007059() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007060() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_007058() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007059(),
          CoreBinaryOperator::Minus(None),
          get_007060(),
        ))
      }
      pub(super) fn get_007049() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007050(), get_007053(), get_007058()))
      }
      pub(super) fn get_007040() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007041(), get_007044(), get_007049()))
      }
      pub(super) fn get_007064() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_007066() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007067() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_007065() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007066(),
          CoreBinaryOperator::And(None),
          get_007067(),
        ))
      }
      pub(super) fn get_007063() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007064(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_007065(),
        ))
      }
      pub(super) fn get_007068() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007062() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007063(),
          CoreBinaryOperator::LessThan(None),
          get_007068(),
        ))
      }
      pub(super) fn get_007070() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007072() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_007073() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_007071() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007072(),
          CoreBinaryOperator::Plus(None),
          get_007073(),
        ))
      }
      pub(super) fn get_007069() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007070(),
          CoreBinaryOperator::Mult(None),
          get_007071(),
        ))
      }
      pub(super) fn get_007077() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007078() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_007076() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007077(), get_007078()))
      }
      pub(super) fn get_007079() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_007081() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_007082() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007080() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_007081(), get_007082()]))
      }
      pub(super) fn get_007075() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007076(),
          vec![get_007079(), get_007080()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007074() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007075()))
      }
      pub(super) fn get_007061() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007062(), get_007069(), get_007074()))
      }
      pub(super) fn get_007039() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_007040(),
          )],
          get_007061(),
        ))
      }
      pub(super) fn get_007033() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_007034(),
          )],
          get_007039(),
        ))
      }
      pub(super) fn get_007028() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_007029(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_007031(),
            ),
          ],
          get_007033(),
        ))
      }
      pub(super) fn get_007085() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007086() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_007084() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007085(), get_007086()))
      }
      pub(super) fn get_007087() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_007090() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007091() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_007089() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007090(), get_007091()))
      }
      pub(super) fn get_007092() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_007088() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007089(),
          vec![get_007092()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007093() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007083() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007084(),
          vec![get_007087(), get_007088(), get_007093()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007027() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_007028(),
          )],
          get_007083(),
        ))
      }
      pub(super) fn get_007021() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_007022(),
          )],
          get_007027(),
        ))
      }
      pub(super) fn get_007015() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_007016(),
          )],
          get_007021(),
        ))
      }
      pub(super) fn get_007009() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_007010(),
          )],
          get_007015(),
        ))
      }
      pub(super) fn get_007097() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007098() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_007096() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007097(), get_007098()))
      }
      pub(super) fn get_007099() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_007100() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007095() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007096(),
          vec![get_007099(), get_007100()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007094() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007095()))
      }
      pub(super) fn get_007001() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007002(), get_007009(), get_007094()))
      }
      pub(super) fn get_006996() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_006997(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_006999(),
            ),
          ],
          get_007001(),
        ))
      }
      pub(super) fn get_007101() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_007105() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_007106() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007104() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007105(), get_007106()))
      }
      pub(super) fn get_007108() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_007109() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_007107() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007108(), get_007109()))
      }
      pub(super) fn get_007103() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_007104(),
          )],
          get_007107(),
        ))
      }
      pub(super) fn get_007112() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_007113() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007111() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007112(), get_007113()))
      }
      pub(super) fn get_007114() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_007110() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_007111(),
          )],
          get_007114(),
        ))
      }
      pub(super) fn get_007118() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007119() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_007117() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007118(), get_007119()))
      }
      pub(super) fn get_007120() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007121() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_007116() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007117(),
          vec![get_007120(), get_007121()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007124() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007125() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_007123() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007124(), get_007125()))
      }
      pub(super) fn get_007126() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_007129() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007130() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_007128() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007129(), get_007130()))
      }
      pub(super) fn get_007133() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007134() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_007132() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007133(), get_007134()))
      }
      pub(super) fn get_007135() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_007131() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007132(),
          vec![get_007135()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007138() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_007137() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007138()))
      }
      pub(super) fn get_007141() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_007142() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_007140() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007141(), get_007142()))
      }
      pub(super) fn get_007145() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_007144() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_007145()]))
      }
      pub(super) fn get_007143() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_007144()]))
      }
      pub(super) fn get_007139() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_007140(),
          )],
          get_007143(),
        ))
      }
      pub(super) fn get_007136() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_007137(),
          )],
          get_007139(),
        ))
      }
      pub(super) fn get_007127() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007128(),
          vec![get_007131(), get_007136()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007122() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007123(),
          vec![get_007126(), get_007127()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007115() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_007116(),
          )],
          get_007122(),
        ))
      }
      pub(super) fn get_007102() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_007103(),
          get_007110(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_007115(),
        ))
      }
      pub(super) fn get_007148() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_007147() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007148()))
      }
      pub(super) fn get_007151() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007152() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_007150() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007151(), get_007152()))
      }
      pub(super) fn get_007153() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_007155() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 128u32)
        }))
      }
      pub(super) fn get_007157() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_007156() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_007157()]))
      }
      pub(super) fn get_007154() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007155(),
          CoreBinaryOperator::Plus(None),
          get_007156(),
        ))
      }
      pub(super) fn get_007149() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007150(),
          vec![get_007153(), get_007154()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007146() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("arr", 128u32) },
            get_007147(),
          )],
          get_007149(),
        ))
      }
      pub(super) fn get_006989() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_006990()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_006991(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_006992(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_006996(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_007101(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_007102(),
            ),
          ],
          get_007146(),
        ))
      }
      pub(super) fn get_007158() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("deepJoin"))
      }
      pub(super) fn get_007160() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_007161() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_007164() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_007163() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007164()))
      }
      pub(super) fn get_007165() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_007162() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_007163(),
          )],
          get_007165(),
        ))
      }
      pub(super) fn get_007168() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_007167() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007168()))
      }
      pub(super) fn get_007170() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_007169() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007170()))
      }
      pub(super) fn get_007174() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007176() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007177() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007175() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007176(),
          CoreBinaryOperator::And(None),
          get_007177(),
        ))
      }
      pub(super) fn get_007173() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007174(),
          CoreBinaryOperator::GreaterThan(None),
          get_007175(),
        ))
      }
      pub(super) fn get_007178() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_007172() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007173(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_007178(),
        ))
      }
      pub(super) fn get_007182() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007183() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_007181() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007182(), get_007183()))
      }
      pub(super) fn get_007184() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_007180() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007181(),
          vec![get_007184()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007188() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007189() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_007187() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007188(), get_007189()))
      }
      pub(super) fn get_007190() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_007186() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007187(),
          vec![get_007190()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007194() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007195() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_007193() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007194(), get_007195()))
      }
      pub(super) fn get_007196() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_007192() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007193(),
          vec![get_007196()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007200() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_007199() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007200()))
      }
      pub(super) fn get_007202() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_007201() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007202()))
      }
      pub(super) fn get_007206() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007207() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_007205() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007206(), get_007207()))
      }
      pub(super) fn get_007208() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_007204() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007205(),
          vec![get_007208()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007212() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007213() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_007211() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007212(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_007213(),
        ))
      }
      pub(super) fn get_007216() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007217() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_007215() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007216(),
          CoreBinaryOperator::Minus(None),
          get_007217(),
        ))
      }
      pub(super) fn get_007218() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007214() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007215(),
          CoreBinaryOperator::Plus(None),
          get_007218(),
        ))
      }
      pub(super) fn get_007221() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007222() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_007220() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007221(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_007222(),
        ))
      }
      pub(super) fn get_007225() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007226() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_007224() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007225(),
          CoreBinaryOperator::Minus(None),
          get_007226(),
        ))
      }
      pub(super) fn get_007227() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007223() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007224(),
          CoreBinaryOperator::Plus(None),
          get_007227(),
        ))
      }
      pub(super) fn get_007229() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007230() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_007228() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007229(),
          CoreBinaryOperator::Minus(None),
          get_007230(),
        ))
      }
      pub(super) fn get_007219() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007220(), get_007223(), get_007228()))
      }
      pub(super) fn get_007210() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007211(), get_007214(), get_007219()))
      }
      pub(super) fn get_007234() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_007236() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007237() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_007235() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007236(),
          CoreBinaryOperator::And(None),
          get_007237(),
        ))
      }
      pub(super) fn get_007233() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007234(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_007235(),
        ))
      }
      pub(super) fn get_007238() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007232() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007233(),
          CoreBinaryOperator::LessThan(None),
          get_007238(),
        ))
      }
      pub(super) fn get_007240() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007242() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_007243() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_007241() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007242(),
          CoreBinaryOperator::Plus(None),
          get_007243(),
        ))
      }
      pub(super) fn get_007239() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007240(),
          CoreBinaryOperator::Mult(None),
          get_007241(),
        ))
      }
      pub(super) fn get_007247() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007248() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_007246() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007247(), get_007248()))
      }
      pub(super) fn get_007249() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_007251() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_007252() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007250() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_007251(), get_007252()]))
      }
      pub(super) fn get_007245() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007246(),
          vec![get_007249(), get_007250()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007244() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007245()))
      }
      pub(super) fn get_007231() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007232(), get_007239(), get_007244()))
      }
      pub(super) fn get_007209() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_007210(),
          )],
          get_007231(),
        ))
      }
      pub(super) fn get_007203() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_007204(),
          )],
          get_007209(),
        ))
      }
      pub(super) fn get_007198() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_007199(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_007201(),
            ),
          ],
          get_007203(),
        ))
      }
      pub(super) fn get_007255() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007256() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_007254() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007255(), get_007256()))
      }
      pub(super) fn get_007257() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_007260() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007261() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_007259() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007260(), get_007261()))
      }
      pub(super) fn get_007262() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_007258() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007259(),
          vec![get_007262()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007263() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007253() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007254(),
          vec![get_007257(), get_007258(), get_007263()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007197() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_007198(),
          )],
          get_007253(),
        ))
      }
      pub(super) fn get_007191() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_007192(),
          )],
          get_007197(),
        ))
      }
      pub(super) fn get_007185() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_007186(),
          )],
          get_007191(),
        ))
      }
      pub(super) fn get_007179() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_007180(),
          )],
          get_007185(),
        ))
      }
      pub(super) fn get_007267() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007268() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_007266() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007267(), get_007268()))
      }
      pub(super) fn get_007269() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_007270() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007265() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007266(),
          vec![get_007269(), get_007270()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007264() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007265()))
      }
      pub(super) fn get_007171() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007172(), get_007179(), get_007264()))
      }
      pub(super) fn get_007166() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_007167(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_007169(),
            ),
          ],
          get_007171(),
        ))
      }
      pub(super) fn get_007271() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_007275() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_007276() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007274() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007275(), get_007276()))
      }
      pub(super) fn get_007278() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_007279() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_007277() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007278(), get_007279()))
      }
      pub(super) fn get_007273() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_007274(),
          )],
          get_007277(),
        ))
      }
      pub(super) fn get_007282() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_007283() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007281() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007282(), get_007283()))
      }
      pub(super) fn get_007284() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_007280() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_007281(),
          )],
          get_007284(),
        ))
      }
      pub(super) fn get_007288() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007289() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_007287() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007288(), get_007289()))
      }
      pub(super) fn get_007290() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007291() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_007286() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007287(),
          vec![get_007290(), get_007291()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007294() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007295() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_007293() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007294(), get_007295()))
      }
      pub(super) fn get_007296() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_007299() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007300() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_007298() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007299(), get_007300()))
      }
      pub(super) fn get_007303() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007304() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_007302() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007303(), get_007304()))
      }
      pub(super) fn get_007305() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_007301() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007302(),
          vec![get_007305()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007308() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_007307() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007308()))
      }
      pub(super) fn get_007311() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_007312() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_007310() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007311(), get_007312()))
      }
      pub(super) fn get_007315() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_007314() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_007315()]))
      }
      pub(super) fn get_007313() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_007314()]))
      }
      pub(super) fn get_007309() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_007310(),
          )],
          get_007313(),
        ))
      }
      pub(super) fn get_007306() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_007307(),
          )],
          get_007309(),
        ))
      }
      pub(super) fn get_007297() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007298(),
          vec![get_007301(), get_007306()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007292() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007293(),
          vec![get_007296(), get_007297()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007285() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_007286(),
          )],
          get_007292(),
        ))
      }
      pub(super) fn get_007272() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_007273(),
          get_007280(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_007285(),
        ))
      }
      pub(super) fn get_007318() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_007317() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007318()))
      }
      pub(super) fn get_007322() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007323() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_007321() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007322(), get_007323()))
      }
      pub(super) fn get_007324() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 129u32)
        }))
      }
      pub(super) fn get_007320() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007321(),
          vec![get_007324()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007325() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 129u32)
        }))
      }
      pub(super) fn get_007329() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007330() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_007328() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007329(), get_007330()))
      }
      pub(super) fn get_007331() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 129u32)
        }))
      }
      pub(super) fn get_007327() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007328(),
          vec![get_007331()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007334() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007335() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_007333() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007334(), get_007335()))
      }
      pub(super) fn get_007336() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_007338() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 129u32)
        }))
      }
      pub(super) fn get_007341() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007342() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_007340() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007341(), get_007342()))
      }
      pub(super) fn get_007343() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_007346() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007347() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_007345() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007346(), get_007347()))
      }
      pub(super) fn get_007350() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007351() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_007349() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007350(), get_007351()))
      }
      pub(super) fn get_007352() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 131u32)
        }))
      }
      pub(super) fn get_007348() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007349(),
          vec![get_007352()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007355() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_007354() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007355()))
      }
      pub(super) fn get_007358() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 131u32)
        }))
      }
      pub(super) fn get_007359() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 132u32)
        }))
      }
      pub(super) fn get_007357() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007358(), get_007359()))
      }
      pub(super) fn get_007363() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007364() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("deepJoin"))
      }
      pub(super) fn get_007362() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007363(), get_007364()))
      }
      pub(super) fn get_007365() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 130u32)
        }))
      }
      pub(super) fn get_007361() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007362(),
          vec![get_007365()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007360() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_007361()]))
      }
      pub(super) fn get_007356() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("x", 130u32) },
            get_007357(),
          )],
          get_007360(),
        ))
      }
      pub(super) fn get_007353() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 132u32) },
            get_007354(),
          )],
          get_007356(),
        ))
      }
      pub(super) fn get_007344() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007345(),
          vec![get_007348(), get_007353()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007339() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007340(),
          vec![get_007343(), get_007344()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007337() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 131u32) },
            get_007338(),
          )],
          get_007339(),
        ))
      }
      pub(super) fn get_007332() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007333(),
          vec![get_007336(), get_007337()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007369() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007370() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_007368() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007369(), get_007370()))
      }
      pub(super) fn get_007371() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Expected string or array, got %s"))
      }
      pub(super) fn get_007374() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007375() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_007373() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007374(), get_007375()))
      }
      pub(super) fn get_007376() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 129u32)
        }))
      }
      pub(super) fn get_007372() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007373(),
          vec![get_007376()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007367() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007368(),
          vec![get_007371(), get_007372()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007366() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007367()))
      }
      pub(super) fn get_007326() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007327(), get_007332(), get_007366()))
      }
      pub(super) fn get_007319() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007320(), get_007325(), get_007326()))
      }
      pub(super) fn get_007316() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("arr", 129u32) },
            get_007317(),
          )],
          get_007319(),
        ))
      }
      pub(super) fn get_007159() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_007160()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_007161(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_007162(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_007166(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_007271(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_007272(),
            ),
          ],
          get_007316(),
        ))
      }
      pub(super) fn get_007377() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("format"))
      }
      pub(super) fn get_007379() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_007380() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_007383() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_007382() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007383()))
      }
      pub(super) fn get_007384() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_007381() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_007382(),
          )],
          get_007384(),
        ))
      }
      pub(super) fn get_007387() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_007386() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007387()))
      }
      pub(super) fn get_007389() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_007388() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007389()))
      }
      pub(super) fn get_007393() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007395() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007396() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007394() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007395(),
          CoreBinaryOperator::And(None),
          get_007396(),
        ))
      }
      pub(super) fn get_007392() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007393(),
          CoreBinaryOperator::GreaterThan(None),
          get_007394(),
        ))
      }
      pub(super) fn get_007397() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_007391() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007392(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_007397(),
        ))
      }
      pub(super) fn get_007401() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007402() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_007400() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007401(), get_007402()))
      }
      pub(super) fn get_007403() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_007399() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007400(),
          vec![get_007403()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007407() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007408() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_007406() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007407(), get_007408()))
      }
      pub(super) fn get_007409() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_007405() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007406(),
          vec![get_007409()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007413() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007414() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_007412() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007413(), get_007414()))
      }
      pub(super) fn get_007415() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_007411() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007412(),
          vec![get_007415()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007419() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_007418() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007419()))
      }
      pub(super) fn get_007421() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_007420() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007421()))
      }
      pub(super) fn get_007425() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007426() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_007424() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007425(), get_007426()))
      }
      pub(super) fn get_007427() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_007423() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007424(),
          vec![get_007427()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007431() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007432() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_007430() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007431(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_007432(),
        ))
      }
      pub(super) fn get_007435() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007436() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_007434() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007435(),
          CoreBinaryOperator::Minus(None),
          get_007436(),
        ))
      }
      pub(super) fn get_007437() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007433() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007434(),
          CoreBinaryOperator::Plus(None),
          get_007437(),
        ))
      }
      pub(super) fn get_007440() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007441() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_007439() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007440(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_007441(),
        ))
      }
      pub(super) fn get_007444() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007445() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_007443() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007444(),
          CoreBinaryOperator::Minus(None),
          get_007445(),
        ))
      }
      pub(super) fn get_007446() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007442() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007443(),
          CoreBinaryOperator::Plus(None),
          get_007446(),
        ))
      }
      pub(super) fn get_007448() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_007449() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_007447() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007448(),
          CoreBinaryOperator::Minus(None),
          get_007449(),
        ))
      }
      pub(super) fn get_007438() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007439(), get_007442(), get_007447()))
      }
      pub(super) fn get_007429() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007430(), get_007433(), get_007438()))
      }
      pub(super) fn get_007453() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_007455() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007456() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_007454() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007455(),
          CoreBinaryOperator::And(None),
          get_007456(),
        ))
      }
      pub(super) fn get_007452() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007453(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_007454(),
        ))
      }
      pub(super) fn get_007457() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007451() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007452(),
          CoreBinaryOperator::LessThan(None),
          get_007457(),
        ))
      }
      pub(super) fn get_007459() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007461() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_007462() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_007460() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007461(),
          CoreBinaryOperator::Plus(None),
          get_007462(),
        ))
      }
      pub(super) fn get_007458() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007459(),
          CoreBinaryOperator::Mult(None),
          get_007460(),
        ))
      }
      pub(super) fn get_007466() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007467() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_007465() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007466(), get_007467()))
      }
      pub(super) fn get_007468() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_007470() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_007471() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007469() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_007470(), get_007471()]))
      }
      pub(super) fn get_007464() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007465(),
          vec![get_007468(), get_007469()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007463() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007464()))
      }
      pub(super) fn get_007450() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007451(), get_007458(), get_007463()))
      }
      pub(super) fn get_007428() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_007429(),
          )],
          get_007450(),
        ))
      }
      pub(super) fn get_007422() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_007423(),
          )],
          get_007428(),
        ))
      }
      pub(super) fn get_007417() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_007418(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_007420(),
            ),
          ],
          get_007422(),
        ))
      }
      pub(super) fn get_007474() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007475() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_007473() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007474(), get_007475()))
      }
      pub(super) fn get_007476() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_007479() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007480() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_007478() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007479(), get_007480()))
      }
      pub(super) fn get_007481() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_007477() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007478(),
          vec![get_007481()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007482() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007472() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007473(),
          vec![get_007476(), get_007477(), get_007482()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007416() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_007417(),
          )],
          get_007472(),
        ))
      }
      pub(super) fn get_007410() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_007411(),
          )],
          get_007416(),
        ))
      }
      pub(super) fn get_007404() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_007405(),
          )],
          get_007410(),
        ))
      }
      pub(super) fn get_007398() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_007399(),
          )],
          get_007404(),
        ))
      }
      pub(super) fn get_007486() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007487() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_007485() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007486(), get_007487()))
      }
      pub(super) fn get_007488() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_007489() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_007484() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007485(),
          vec![get_007488(), get_007489()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007483() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007484()))
      }
      pub(super) fn get_007390() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007391(), get_007398(), get_007483()))
      }
      pub(super) fn get_007385() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_007386(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_007388(),
            ),
          ],
          get_007390(),
        ))
      }
      pub(super) fn get_007490() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_007494() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_007495() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007493() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007494(), get_007495()))
      }
      pub(super) fn get_007497() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_007498() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_007496() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007497(), get_007498()))
      }
      pub(super) fn get_007492() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_007493(),
          )],
          get_007496(),
        ))
      }
      pub(super) fn get_007501() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_007502() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007500() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007501(), get_007502()))
      }
      pub(super) fn get_007503() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_007499() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_007500(),
          )],
          get_007503(),
        ))
      }
      pub(super) fn get_007507() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007508() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_007506() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007507(), get_007508()))
      }
      pub(super) fn get_007509() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007510() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_007505() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007506(),
          vec![get_007509(), get_007510()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007513() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007514() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_007512() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007513(), get_007514()))
      }
      pub(super) fn get_007515() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_007518() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007519() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_007517() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007518(), get_007519()))
      }
      pub(super) fn get_007522() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007523() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_007521() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007522(), get_007523()))
      }
      pub(super) fn get_007524() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_007520() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007521(),
          vec![get_007524()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007527() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_007526() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007527()))
      }
      pub(super) fn get_007530() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_007531() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_007529() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007530(), get_007531()))
      }
      pub(super) fn get_007534() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_007533() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_007534()]))
      }
      pub(super) fn get_007532() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_007533()]))
      }
      pub(super) fn get_007528() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_007529(),
          )],
          get_007532(),
        ))
      }
      pub(super) fn get_007525() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_007526(),
          )],
          get_007528(),
        ))
      }
      pub(super) fn get_007516() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007517(),
          vec![get_007520(), get_007525()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007511() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007512(),
          vec![get_007515(), get_007516()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007504() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_007505(),
          )],
          get_007511(),
        ))
      }
      pub(super) fn get_007491() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_007492(),
          get_007499(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_007504(),
        ))
      }
      pub(super) fn get_007537() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_007536() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007537()))
      }
      pub(super) fn get_007539() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'vals' not bound"))
      }
      pub(super) fn get_007538() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007539()))
      }
      pub(super) fn get_007543() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_007542() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007543()))
      }
      pub(super) fn get_007545() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_007544() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007545()))
      }
      pub(super) fn get_007548() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 137u32)
        }))
      }
      pub(super) fn get_007551() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007552() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_007550() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007551(), get_007552()))
      }
      pub(super) fn get_007553() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 136u32)
        }))
      }
      pub(super) fn get_007549() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007550(),
          vec![get_007553()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007547() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007548(),
          CoreBinaryOperator::LessThan(None),
          get_007549(),
        ))
      }
      pub(super) fn get_007556() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 136u32)
        }))
      }
      pub(super) fn get_007557() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 137u32)
        }))
      }
      pub(super) fn get_007555() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007556(), get_007557()))
      }
      pub(super) fn get_007561() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007562() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007560() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007561(), get_007562()))
      }
      pub(super) fn get_007563() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 138u32)
        }))
      }
      pub(super) fn get_007564() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("("))
      }
      pub(super) fn get_007559() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007560(),
          vec![get_007563(), get_007564()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007568() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_007567() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007568()))
      }
      pub(super) fn get_007570() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'j' not bound"))
      }
      pub(super) fn get_007569() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007570()))
      }
      pub(super) fn get_007572() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_007571() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007572()))
      }
      pub(super) fn get_007575() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 141u32)
        }))
      }
      pub(super) fn get_007578() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007579() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_007577() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007578(), get_007579()))
      }
      pub(super) fn get_007580() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 140u32)
        }))
      }
      pub(super) fn get_007576() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007577(),
          vec![get_007580()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007574() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007575(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_007576(),
        ))
      }
      pub(super) fn get_007582() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Truncated format code."))
      }
      pub(super) fn get_007581() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007582()))
      }
      pub(super) fn get_007585() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 140u32)
        }))
      }
      pub(super) fn get_007586() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 141u32)
        }))
      }
      pub(super) fn get_007584() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007585(), get_007586()))
      }
      pub(super) fn get_007591() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007592() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007590() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007591(), get_007592()))
      }
      pub(super) fn get_007593() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 143u32)
        }))
      }
      pub(super) fn get_007594() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(")"))
      }
      pub(super) fn get_007589() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007590(),
          vec![get_007593(), get_007594()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007588() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_007589(),
        ))
      }
      pub(super) fn get_007596() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 139u32)
        }))
      }
      pub(super) fn get_007597() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 140u32)
        }))
      }
      pub(super) fn get_007599() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 141u32)
        }))
      }
      pub(super) fn get_007600() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007598() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007599(),
          CoreBinaryOperator::Plus(None),
          get_007600(),
        ))
      }
      pub(super) fn get_007602() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 142u32)
        }))
      }
      pub(super) fn get_007603() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 143u32)
        }))
      }
      pub(super) fn get_007601() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007602(),
          CoreBinaryOperator::Plus(None),
          get_007603(),
        ))
      }
      pub(super) fn get_007595() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007596(),
          vec![get_007597(), get_007598(), get_007601()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007605() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_007608() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 141u32)
        }))
      }
      pub(super) fn get_007609() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007607() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007608(),
          CoreBinaryOperator::Plus(None),
          get_007609(),
        ))
      }
      pub(super) fn get_007606() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007607()))
      }
      pub(super) fn get_007610() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_007612() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 142u32)
        }))
      }
      pub(super) fn get_007611() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007612()))
      }
      pub(super) fn get_007604() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_007605(),
              CoreObjectFieldOperator::Default(None),
              get_007606(),
            ),
            CoreObjectField::new(
              get_007610(),
              CoreObjectFieldOperator::Default(None),
              get_007611(),
            ),
          ],
        ))
      }
      pub(super) fn get_007587() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007588(), get_007595(), get_007604()))
      }
      pub(super) fn get_007583() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("c", 143u32) },
            get_007584(),
          )],
          get_007587(),
        ))
      }
      pub(super) fn get_007573() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007574(), get_007581(), get_007583()))
      }
      pub(super) fn get_007566() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 140u32) },
              get_007567(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("j", 141u32) },
              get_007569(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("v", 142u32) },
              get_007571(),
            ),
          ],
          get_007573(),
        ))
      }
      pub(super) fn get_007614() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 139u32)
        }))
      }
      pub(super) fn get_007615() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 136u32)
        }))
      }
      pub(super) fn get_007617() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 137u32)
        }))
      }
      pub(super) fn get_007618() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007616() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007617(),
          CoreBinaryOperator::Plus(None),
          get_007618(),
        ))
      }
      pub(super) fn get_007619() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_007613() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007614(),
          vec![get_007615(), get_007616(), get_007619()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007565() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("consume", 139u32) },
            get_007566(),
          )],
          get_007613(),
        ))
      }
      pub(super) fn get_007621() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_007623() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 137u32)
        }))
      }
      pub(super) fn get_007622() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007623()))
      }
      pub(super) fn get_007624() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_007626() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_007625() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007626()))
      }
      pub(super) fn get_007620() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_007621(),
              CoreObjectFieldOperator::Default(None),
              get_007622(),
            ),
            CoreObjectField::new(
              get_007624(),
              CoreObjectFieldOperator::Default(None),
              get_007625(),
            ),
          ],
        ))
      }
      pub(super) fn get_007558() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007559(), get_007565(), get_007620()))
      }
      pub(super) fn get_007554() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("c", 138u32) },
            get_007555(),
          )],
          get_007558(),
        ))
      }
      pub(super) fn get_007628() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Truncated format code."))
      }
      pub(super) fn get_007627() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007628()))
      }
      pub(super) fn get_007546() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007547(), get_007554(), get_007627()))
      }
      pub(super) fn get_007541() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 136u32) },
              get_007542(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 137u32) },
              get_007544(),
            ),
          ],
          get_007546(),
        ))
      }
      pub(super) fn get_007632() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_007631() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007632()))
      }
      pub(super) fn get_007634() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_007633() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007634()))
      }
      pub(super) fn get_007638() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_007637() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007638()))
      }
      pub(super) fn get_007640() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'j' not bound"))
      }
      pub(super) fn get_007639() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007640()))
      }
      pub(super) fn get_007642() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_007641() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007642()))
      }
      pub(super) fn get_007645() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 149u32)
        }))
      }
      pub(super) fn get_007648() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007649() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_007647() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007648(), get_007649()))
      }
      pub(super) fn get_007650() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 148u32)
        }))
      }
      pub(super) fn get_007646() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007647(),
          vec![get_007650()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007644() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007645(),
          CoreBinaryOperator::LessThan(None),
          get_007646(),
        ))
      }
      pub(super) fn get_007653() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 148u32)
        }))
      }
      pub(super) fn get_007654() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 149u32)
        }))
      }
      pub(super) fn get_007652() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007653(), get_007654()))
      }
      pub(super) fn get_007658() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007659() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007657() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007658(), get_007659()))
      }
      pub(super) fn get_007660() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 151u32)
        }))
      }
      pub(super) fn get_007661() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("#"))
      }
      pub(super) fn get_007656() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007657(),
          vec![get_007660(), get_007661()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007663() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 147u32)
        }))
      }
      pub(super) fn get_007664() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 148u32)
        }))
      }
      pub(super) fn get_007666() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 149u32)
        }))
      }
      pub(super) fn get_007667() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007665() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007666(),
          CoreBinaryOperator::Plus(None),
          get_007667(),
        ))
      }
      pub(super) fn get_007669() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 150u32)
        }))
      }
      pub(super) fn get_007671() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("alt"))
      }
      pub(super) fn get_007673() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_007672() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007673()))
      }
      pub(super) fn get_007670() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![CoreObjectField::new(
            get_007671(),
            CoreObjectFieldOperator::Default(None),
            get_007672(),
          )],
        ))
      }
      pub(super) fn get_007668() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007669(),
          CoreBinaryOperator::Plus(None),
          get_007670(),
        ))
      }
      pub(super) fn get_007662() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007663(),
          vec![get_007664(), get_007665(), get_007668()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007677() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007678() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007676() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007677(), get_007678()))
      }
      pub(super) fn get_007679() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 151u32)
        }))
      }
      pub(super) fn get_007680() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_007675() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007676(),
          vec![get_007679(), get_007680()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007682() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 147u32)
        }))
      }
      pub(super) fn get_007683() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 148u32)
        }))
      }
      pub(super) fn get_007685() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 149u32)
        }))
      }
      pub(super) fn get_007686() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007684() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007685(),
          CoreBinaryOperator::Plus(None),
          get_007686(),
        ))
      }
      pub(super) fn get_007688() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 150u32)
        }))
      }
      pub(super) fn get_007690() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("zero"))
      }
      pub(super) fn get_007692() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_007691() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007692()))
      }
      pub(super) fn get_007689() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![CoreObjectField::new(
            get_007690(),
            CoreObjectFieldOperator::Default(None),
            get_007691(),
          )],
        ))
      }
      pub(super) fn get_007687() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007688(),
          CoreBinaryOperator::Plus(None),
          get_007689(),
        ))
      }
      pub(super) fn get_007681() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007682(),
          vec![get_007683(), get_007684(), get_007687()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007696() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007697() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007695() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007696(), get_007697()))
      }
      pub(super) fn get_007698() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 151u32)
        }))
      }
      pub(super) fn get_007699() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("-"))
      }
      pub(super) fn get_007694() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007695(),
          vec![get_007698(), get_007699()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007701() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 147u32)
        }))
      }
      pub(super) fn get_007702() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 148u32)
        }))
      }
      pub(super) fn get_007704() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 149u32)
        }))
      }
      pub(super) fn get_007705() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007703() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007704(),
          CoreBinaryOperator::Plus(None),
          get_007705(),
        ))
      }
      pub(super) fn get_007707() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 150u32)
        }))
      }
      pub(super) fn get_007709() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("left"))
      }
      pub(super) fn get_007711() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_007710() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007711()))
      }
      pub(super) fn get_007708() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![CoreObjectField::new(
            get_007709(),
            CoreObjectFieldOperator::Default(None),
            get_007710(),
          )],
        ))
      }
      pub(super) fn get_007706() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007707(),
          CoreBinaryOperator::Plus(None),
          get_007708(),
        ))
      }
      pub(super) fn get_007700() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007701(),
          vec![get_007702(), get_007703(), get_007706()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007715() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007716() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007714() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007715(), get_007716()))
      }
      pub(super) fn get_007717() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 151u32)
        }))
      }
      pub(super) fn get_007718() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" "))
      }
      pub(super) fn get_007713() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007714(),
          vec![get_007717(), get_007718()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007720() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 147u32)
        }))
      }
      pub(super) fn get_007721() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 148u32)
        }))
      }
      pub(super) fn get_007723() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 149u32)
        }))
      }
      pub(super) fn get_007724() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007722() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007723(),
          CoreBinaryOperator::Plus(None),
          get_007724(),
        ))
      }
      pub(super) fn get_007726() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 150u32)
        }))
      }
      pub(super) fn get_007728() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("blank"))
      }
      pub(super) fn get_007730() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_007729() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007730()))
      }
      pub(super) fn get_007727() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![CoreObjectField::new(
            get_007728(),
            CoreObjectFieldOperator::Default(None),
            get_007729(),
          )],
        ))
      }
      pub(super) fn get_007725() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007726(),
          CoreBinaryOperator::Plus(None),
          get_007727(),
        ))
      }
      pub(super) fn get_007719() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007720(),
          vec![get_007721(), get_007722(), get_007725()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007734() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007735() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007733() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007734(), get_007735()))
      }
      pub(super) fn get_007736() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 151u32)
        }))
      }
      pub(super) fn get_007737() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("+"))
      }
      pub(super) fn get_007732() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007733(),
          vec![get_007736(), get_007737()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007739() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 147u32)
        }))
      }
      pub(super) fn get_007740() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 148u32)
        }))
      }
      pub(super) fn get_007742() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 149u32)
        }))
      }
      pub(super) fn get_007743() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007741() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007742(),
          CoreBinaryOperator::Plus(None),
          get_007743(),
        ))
      }
      pub(super) fn get_007745() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 150u32)
        }))
      }
      pub(super) fn get_007747() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("plus"))
      }
      pub(super) fn get_007749() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_007748() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007749()))
      }
      pub(super) fn get_007746() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![CoreObjectField::new(
            get_007747(),
            CoreObjectFieldOperator::Default(None),
            get_007748(),
          )],
        ))
      }
      pub(super) fn get_007744() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007745(),
          CoreBinaryOperator::Plus(None),
          get_007746(),
        ))
      }
      pub(super) fn get_007738() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007739(),
          vec![get_007740(), get_007741(), get_007744()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007751() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_007753() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 149u32)
        }))
      }
      pub(super) fn get_007752() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007753()))
      }
      pub(super) fn get_007754() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_007756() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 150u32)
        }))
      }
      pub(super) fn get_007755() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007756()))
      }
      pub(super) fn get_007750() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_007751(),
              CoreObjectFieldOperator::Default(None),
              get_007752(),
            ),
            CoreObjectField::new(
              get_007754(),
              CoreObjectFieldOperator::Default(None),
              get_007755(),
            ),
          ],
        ))
      }
      pub(super) fn get_007731() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007732(), get_007738(), get_007750()))
      }
      pub(super) fn get_007712() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007713(), get_007719(), get_007731()))
      }
      pub(super) fn get_007693() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007694(), get_007700(), get_007712()))
      }
      pub(super) fn get_007674() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007675(), get_007681(), get_007693()))
      }
      pub(super) fn get_007655() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007656(), get_007662(), get_007674()))
      }
      pub(super) fn get_007651() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("c", 151u32) },
            get_007652(),
          )],
          get_007655(),
        ))
      }
      pub(super) fn get_007758() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Truncated format code."))
      }
      pub(super) fn get_007757() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007758()))
      }
      pub(super) fn get_007643() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007644(), get_007651(), get_007757()))
      }
      pub(super) fn get_007636() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 148u32) },
              get_007637(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("j", 149u32) },
              get_007639(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("v", 150u32) },
              get_007641(),
            ),
          ],
          get_007643(),
        ))
      }
      pub(super) fn get_007760() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 147u32)
        }))
      }
      pub(super) fn get_007761() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 145u32)
        }))
      }
      pub(super) fn get_007762() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 146u32)
        }))
      }
      pub(super) fn get_007764() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("alt"))
      }
      pub(super) fn get_007766() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_007765() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007766()))
      }
      pub(super) fn get_007767() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("zero"))
      }
      pub(super) fn get_007769() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_007768() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007769()))
      }
      pub(super) fn get_007770() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("left"))
      }
      pub(super) fn get_007772() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_007771() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007772()))
      }
      pub(super) fn get_007773() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("blank"))
      }
      pub(super) fn get_007775() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_007774() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007775()))
      }
      pub(super) fn get_007776() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("plus"))
      }
      pub(super) fn get_007778() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_007777() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007778()))
      }
      pub(super) fn get_007763() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_007764(),
              CoreObjectFieldOperator::Default(None),
              get_007765(),
            ),
            CoreObjectField::new(
              get_007767(),
              CoreObjectFieldOperator::Default(None),
              get_007768(),
            ),
            CoreObjectField::new(
              get_007770(),
              CoreObjectFieldOperator::Default(None),
              get_007771(),
            ),
            CoreObjectField::new(
              get_007773(),
              CoreObjectFieldOperator::Default(None),
              get_007774(),
            ),
            CoreObjectField::new(
              get_007776(),
              CoreObjectFieldOperator::Default(None),
              get_007777(),
            ),
          ],
        ))
      }
      pub(super) fn get_007759() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007760(),
          vec![get_007761(), get_007762(), get_007763()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007635() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("consume", 147u32) },
            get_007636(),
          )],
          get_007759(),
        ))
      }
      pub(super) fn get_007630() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 145u32) },
              get_007631(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 146u32) },
              get_007633(),
            ),
          ],
          get_007635(),
        ))
      }
      pub(super) fn get_007782() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_007781() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007782()))
      }
      pub(super) fn get_007784() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_007783() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007784()))
      }
      pub(super) fn get_007787() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 154u32)
        }))
      }
      pub(super) fn get_007790() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007791() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007789() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007790(), get_007791()))
      }
      pub(super) fn get_007795() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007796() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_007794() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007795(), get_007796()))
      }
      pub(super) fn get_007797() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 153u32)
        }))
      }
      pub(super) fn get_007793() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007794(),
          vec![get_007797()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007799() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 153u32)
        }))
      }
      pub(super) fn get_007800() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 154u32)
        }))
      }
      pub(super) fn get_007798() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007799(), get_007800()))
      }
      pub(super) fn get_007792() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007793(),
          CoreBinaryOperator::And(None),
          get_007798(),
        ))
      }
      pub(super) fn get_007801() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("*"))
      }
      pub(super) fn get_007788() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007789(),
          vec![get_007792(), get_007801()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007786() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007787(),
          CoreBinaryOperator::LessThan(None),
          get_007788(),
        ))
      }
      pub(super) fn get_007803() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_007806() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 154u32)
        }))
      }
      pub(super) fn get_007807() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007805() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007806(),
          CoreBinaryOperator::Plus(None),
          get_007807(),
        ))
      }
      pub(super) fn get_007804() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007805()))
      }
      pub(super) fn get_007808() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_007810() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("*"))
      }
      pub(super) fn get_007809() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_007810()))
      }
      pub(super) fn get_007802() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_007803(),
              CoreObjectFieldOperator::Default(None),
              get_007804(),
            ),
            CoreObjectField::new(
              get_007808(),
              CoreObjectFieldOperator::Default(None),
              get_007809(),
            ),
          ],
        ))
      }
      pub(super) fn get_007814() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_007813() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007814()))
      }
      pub(super) fn get_007816() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'j' not bound"))
      }
      pub(super) fn get_007815() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007816()))
      }
      pub(super) fn get_007818() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_007817() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_007818()))
      }
      pub(super) fn get_007821() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_007824() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007825() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_007823() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007824(), get_007825()))
      }
      pub(super) fn get_007826() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 156u32)
        }))
      }
      pub(super) fn get_007822() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007823(),
          vec![get_007826()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007820() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007821(),
          CoreBinaryOperator::LessThan(None),
          get_007822(),
        ))
      }
      pub(super) fn get_007829() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 156u32)
        }))
      }
      pub(super) fn get_007830() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_007828() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007829(), get_007830()))
      }
      pub(super) fn get_007834() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007835() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007833() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007834(), get_007835()))
      }
      pub(super) fn get_007836() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 159u32)
        }))
      }
      pub(super) fn get_007837() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_007832() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007833(),
          vec![get_007836(), get_007837()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007839() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 155u32)
        }))
      }
      pub(super) fn get_007840() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 156u32)
        }))
      }
      pub(super) fn get_007842() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_007843() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007841() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007842(),
          CoreBinaryOperator::Plus(None),
          get_007843(),
        ))
      }
      pub(super) fn get_007845() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 158u32)
        }))
      }
      pub(super) fn get_007847() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007848() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_007846() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007847(),
          CoreBinaryOperator::Plus(None),
          get_007848(),
        ))
      }
      pub(super) fn get_007844() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007845(),
          CoreBinaryOperator::Mult(None),
          get_007846(),
        ))
      }
      pub(super) fn get_007838() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007839(),
          vec![get_007840(), get_007841(), get_007844()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007852() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007853() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007851() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007852(), get_007853()))
      }
      pub(super) fn get_007854() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 159u32)
        }))
      }
      pub(super) fn get_007855() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("1"))
      }
      pub(super) fn get_007850() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007851(),
          vec![get_007854(), get_007855()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007857() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 155u32)
        }))
      }
      pub(super) fn get_007858() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 156u32)
        }))
      }
      pub(super) fn get_007860() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_007861() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007859() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007860(),
          CoreBinaryOperator::Plus(None),
          get_007861(),
        ))
      }
      pub(super) fn get_007863() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 158u32)
        }))
      }
      pub(super) fn get_007865() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007866() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007864() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007865(),
          CoreBinaryOperator::Plus(None),
          get_007866(),
        ))
      }
      pub(super) fn get_007862() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007863(),
          CoreBinaryOperator::Mult(None),
          get_007864(),
        ))
      }
      pub(super) fn get_007856() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007857(),
          vec![get_007858(), get_007859(), get_007862()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007870() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007871() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007869() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007870(), get_007871()))
      }
      pub(super) fn get_007872() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 159u32)
        }))
      }
      pub(super) fn get_007873() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("2"))
      }
      pub(super) fn get_007868() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007869(),
          vec![get_007872(), get_007873()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007875() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 155u32)
        }))
      }
      pub(super) fn get_007876() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 156u32)
        }))
      }
      pub(super) fn get_007878() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_007879() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007877() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007878(),
          CoreBinaryOperator::Plus(None),
          get_007879(),
        ))
      }
      pub(super) fn get_007881() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 158u32)
        }))
      }
      pub(super) fn get_007883() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007884() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_007882() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007883(),
          CoreBinaryOperator::Plus(None),
          get_007884(),
        ))
      }
      pub(super) fn get_007880() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007881(),
          CoreBinaryOperator::Mult(None),
          get_007882(),
        ))
      }
      pub(super) fn get_007874() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007875(),
          vec![get_007876(), get_007877(), get_007880()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007888() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007889() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007887() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007888(), get_007889()))
      }
      pub(super) fn get_007890() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 159u32)
        }))
      }
      pub(super) fn get_007891() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("3"))
      }
      pub(super) fn get_007886() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007887(),
          vec![get_007890(), get_007891()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007893() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 155u32)
        }))
      }
      pub(super) fn get_007894() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 156u32)
        }))
      }
      pub(super) fn get_007896() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_007897() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007895() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007896(),
          CoreBinaryOperator::Plus(None),
          get_007897(),
        ))
      }
      pub(super) fn get_007899() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 158u32)
        }))
      }
      pub(super) fn get_007901() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007902() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(3f64))
      }
      pub(super) fn get_007900() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007901(),
          CoreBinaryOperator::Plus(None),
          get_007902(),
        ))
      }
      pub(super) fn get_007898() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007899(),
          CoreBinaryOperator::Mult(None),
          get_007900(),
        ))
      }
      pub(super) fn get_007892() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007893(),
          vec![get_007894(), get_007895(), get_007898()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007906() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007907() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007905() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007906(), get_007907()))
      }
      pub(super) fn get_007908() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 159u32)
        }))
      }
      pub(super) fn get_007909() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("4"))
      }
      pub(super) fn get_007904() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007905(),
          vec![get_007908(), get_007909()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007911() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 155u32)
        }))
      }
      pub(super) fn get_007912() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 156u32)
        }))
      }
      pub(super) fn get_007914() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_007915() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007913() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007914(),
          CoreBinaryOperator::Plus(None),
          get_007915(),
        ))
      }
      pub(super) fn get_007917() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 158u32)
        }))
      }
      pub(super) fn get_007919() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007920() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(4f64))
      }
      pub(super) fn get_007918() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007919(),
          CoreBinaryOperator::Plus(None),
          get_007920(),
        ))
      }
      pub(super) fn get_007916() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007917(),
          CoreBinaryOperator::Mult(None),
          get_007918(),
        ))
      }
      pub(super) fn get_007910() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007911(),
          vec![get_007912(), get_007913(), get_007916()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007924() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007925() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007923() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007924(), get_007925()))
      }
      pub(super) fn get_007926() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 159u32)
        }))
      }
      pub(super) fn get_007927() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("5"))
      }
      pub(super) fn get_007922() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007923(),
          vec![get_007926(), get_007927()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007929() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 155u32)
        }))
      }
      pub(super) fn get_007930() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 156u32)
        }))
      }
      pub(super) fn get_007932() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_007933() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007931() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007932(),
          CoreBinaryOperator::Plus(None),
          get_007933(),
        ))
      }
      pub(super) fn get_007935() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 158u32)
        }))
      }
      pub(super) fn get_007937() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007938() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(5f64))
      }
      pub(super) fn get_007936() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007937(),
          CoreBinaryOperator::Plus(None),
          get_007938(),
        ))
      }
      pub(super) fn get_007934() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007935(),
          CoreBinaryOperator::Mult(None),
          get_007936(),
        ))
      }
      pub(super) fn get_007928() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007929(),
          vec![get_007930(), get_007931(), get_007934()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007942() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007943() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007941() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007942(), get_007943()))
      }
      pub(super) fn get_007944() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 159u32)
        }))
      }
      pub(super) fn get_007945() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("6"))
      }
      pub(super) fn get_007940() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007941(),
          vec![get_007944(), get_007945()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007947() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 155u32)
        }))
      }
      pub(super) fn get_007948() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 156u32)
        }))
      }
      pub(super) fn get_007950() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_007951() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007949() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007950(),
          CoreBinaryOperator::Plus(None),
          get_007951(),
        ))
      }
      pub(super) fn get_007953() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 158u32)
        }))
      }
      pub(super) fn get_007955() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007956() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(6f64))
      }
      pub(super) fn get_007954() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007955(),
          CoreBinaryOperator::Plus(None),
          get_007956(),
        ))
      }
      pub(super) fn get_007952() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007953(),
          CoreBinaryOperator::Mult(None),
          get_007954(),
        ))
      }
      pub(super) fn get_007946() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007947(),
          vec![get_007948(), get_007949(), get_007952()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007960() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007961() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007959() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007960(), get_007961()))
      }
      pub(super) fn get_007962() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 159u32)
        }))
      }
      pub(super) fn get_007963() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("7"))
      }
      pub(super) fn get_007958() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007959(),
          vec![get_007962(), get_007963()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007965() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 155u32)
        }))
      }
      pub(super) fn get_007966() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 156u32)
        }))
      }
      pub(super) fn get_007968() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_007969() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007967() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007968(),
          CoreBinaryOperator::Plus(None),
          get_007969(),
        ))
      }
      pub(super) fn get_007971() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 158u32)
        }))
      }
      pub(super) fn get_007973() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007974() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(7f64))
      }
      pub(super) fn get_007972() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007973(),
          CoreBinaryOperator::Plus(None),
          get_007974(),
        ))
      }
      pub(super) fn get_007970() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007971(),
          CoreBinaryOperator::Mult(None),
          get_007972(),
        ))
      }
      pub(super) fn get_007964() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007965(),
          vec![get_007966(), get_007967(), get_007970()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007978() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007979() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007977() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007978(), get_007979()))
      }
      pub(super) fn get_007980() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 159u32)
        }))
      }
      pub(super) fn get_007981() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("8"))
      }
      pub(super) fn get_007976() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007977(),
          vec![get_007980(), get_007981()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007983() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 155u32)
        }))
      }
      pub(super) fn get_007984() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 156u32)
        }))
      }
      pub(super) fn get_007986() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_007987() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_007985() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007986(),
          CoreBinaryOperator::Plus(None),
          get_007987(),
        ))
      }
      pub(super) fn get_007989() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 158u32)
        }))
      }
      pub(super) fn get_007991() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_007992() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(8f64))
      }
      pub(super) fn get_007990() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007991(),
          CoreBinaryOperator::Plus(None),
          get_007992(),
        ))
      }
      pub(super) fn get_007988() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_007989(),
          CoreBinaryOperator::Mult(None),
          get_007990(),
        ))
      }
      pub(super) fn get_007982() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007983(),
          vec![get_007984(), get_007985(), get_007988()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007996() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_007997() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_007995() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_007996(), get_007997()))
      }
      pub(super) fn get_007998() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 159u32)
        }))
      }
      pub(super) fn get_007999() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("9"))
      }
      pub(super) fn get_007994() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_007995(),
          vec![get_007998(), get_007999()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008001() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 155u32)
        }))
      }
      pub(super) fn get_008002() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 156u32)
        }))
      }
      pub(super) fn get_008004() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_008005() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008003() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008004(),
          CoreBinaryOperator::Plus(None),
          get_008005(),
        ))
      }
      pub(super) fn get_008007() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 158u32)
        }))
      }
      pub(super) fn get_008009() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_008010() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(9f64))
      }
      pub(super) fn get_008008() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008009(),
          CoreBinaryOperator::Plus(None),
          get_008010(),
        ))
      }
      pub(super) fn get_008006() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008007(),
          CoreBinaryOperator::Mult(None),
          get_008008(),
        ))
      }
      pub(super) fn get_008000() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008001(),
          vec![get_008002(), get_008003(), get_008006()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008012() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008014() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 157u32)
        }))
      }
      pub(super) fn get_008013() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008014()))
      }
      pub(super) fn get_008015() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008017() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 158u32)
        }))
      }
      pub(super) fn get_008016() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008017()))
      }
      pub(super) fn get_008011() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008012(),
              CoreObjectFieldOperator::Default(None),
              get_008013(),
            ),
            CoreObjectField::new(
              get_008015(),
              CoreObjectFieldOperator::Default(None),
              get_008016(),
            ),
          ],
        ))
      }
      pub(super) fn get_007993() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007994(), get_008000(), get_008011()))
      }
      pub(super) fn get_007975() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007976(), get_007982(), get_007993()))
      }
      pub(super) fn get_007957() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007958(), get_007964(), get_007975()))
      }
      pub(super) fn get_007939() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007940(), get_007946(), get_007957()))
      }
      pub(super) fn get_007921() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007922(), get_007928(), get_007939()))
      }
      pub(super) fn get_007903() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007904(), get_007910(), get_007921()))
      }
      pub(super) fn get_007885() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007886(), get_007892(), get_007903()))
      }
      pub(super) fn get_007867() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007868(), get_007874(), get_007885()))
      }
      pub(super) fn get_007849() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007850(), get_007856(), get_007867()))
      }
      pub(super) fn get_007831() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007832(), get_007838(), get_007849()))
      }
      pub(super) fn get_007827() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("c", 159u32) },
            get_007828(),
          )],
          get_007831(),
        ))
      }
      pub(super) fn get_008019() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Truncated format code."))
      }
      pub(super) fn get_008018() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008019()))
      }
      pub(super) fn get_007819() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007820(), get_007827(), get_008018()))
      }
      pub(super) fn get_007812() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 156u32) },
              get_007813(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("j", 157u32) },
              get_007815(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("v", 158u32) },
              get_007817(),
            ),
          ],
          get_007819(),
        ))
      }
      pub(super) fn get_008021() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("consume", 155u32)
        }))
      }
      pub(super) fn get_008022() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 153u32)
        }))
      }
      pub(super) fn get_008023() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 154u32)
        }))
      }
      pub(super) fn get_008024() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008020() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008021(),
          vec![get_008022(), get_008023(), get_008024()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_007811() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("consume", 155u32) },
            get_007812(),
          )],
          get_008020(),
        ))
      }
      pub(super) fn get_007785() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_007786(), get_007802(), get_007811()))
      }
      pub(super) fn get_007780() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 153u32) },
              get_007781(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 154u32) },
              get_007783(),
            ),
          ],
          get_007785(),
        ))
      }
      pub(super) fn get_008028() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_008027() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008028()))
      }
      pub(super) fn get_008030() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_008029() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008030()))
      }
      pub(super) fn get_008033() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 162u32)
        }))
      }
      pub(super) fn get_008036() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008037() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_008035() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008036(), get_008037()))
      }
      pub(super) fn get_008038() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 161u32)
        }))
      }
      pub(super) fn get_008034() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008035(),
          vec![get_008038()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008032() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008033(),
          CoreBinaryOperator::LessThan(None),
          get_008034(),
        ))
      }
      pub(super) fn get_008041() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 161u32)
        }))
      }
      pub(super) fn get_008042() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 162u32)
        }))
      }
      pub(super) fn get_008040() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008041(), get_008042()))
      }
      pub(super) fn get_008046() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008047() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008045() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008046(), get_008047()))
      }
      pub(super) fn get_008048() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 163u32)
        }))
      }
      pub(super) fn get_008049() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("."))
      }
      pub(super) fn get_008044() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008045(),
          vec![get_008048(), get_008049()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008051() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("try_parse_field_width", 152u32)
        }))
      }
      pub(super) fn get_008052() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 161u32)
        }))
      }
      pub(super) fn get_008054() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 162u32)
        }))
      }
      pub(super) fn get_008055() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008053() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008054(),
          CoreBinaryOperator::Plus(None),
          get_008055(),
        ))
      }
      pub(super) fn get_008050() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008051(),
          vec![get_008052(), get_008053()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008057() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008059() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 162u32)
        }))
      }
      pub(super) fn get_008058() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008059()))
      }
      pub(super) fn get_008060() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008062() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_008061() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008062()))
      }
      pub(super) fn get_008056() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008057(),
              CoreObjectFieldOperator::Default(None),
              get_008058(),
            ),
            CoreObjectField::new(
              get_008060(),
              CoreObjectFieldOperator::Default(None),
              get_008061(),
            ),
          ],
        ))
      }
      pub(super) fn get_008043() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008044(), get_008050(), get_008056()))
      }
      pub(super) fn get_008039() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("c", 163u32) },
            get_008040(),
          )],
          get_008043(),
        ))
      }
      pub(super) fn get_008064() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Truncated format code."))
      }
      pub(super) fn get_008063() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008064()))
      }
      pub(super) fn get_008031() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008032(), get_008039(), get_008063()))
      }
      pub(super) fn get_008026() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 161u32) },
              get_008027(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 162u32) },
              get_008029(),
            ),
          ],
          get_008031(),
        ))
      }
      pub(super) fn get_008068() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_008067() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008068()))
      }
      pub(super) fn get_008070() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_008069() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008070()))
      }
      pub(super) fn get_008073() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 166u32)
        }))
      }
      pub(super) fn get_008076() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008077() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_008075() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008076(), get_008077()))
      }
      pub(super) fn get_008078() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 165u32)
        }))
      }
      pub(super) fn get_008074() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008075(),
          vec![get_008078()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008072() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008073(),
          CoreBinaryOperator::LessThan(None),
          get_008074(),
        ))
      }
      pub(super) fn get_008081() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 165u32)
        }))
      }
      pub(super) fn get_008082() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 166u32)
        }))
      }
      pub(super) fn get_008080() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008081(), get_008082()))
      }
      pub(super) fn get_008086() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008087() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008085() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008086(), get_008087()))
      }
      pub(super) fn get_008090() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008091() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008089() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008090(), get_008091()))
      }
      pub(super) fn get_008094() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008095() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008093() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008094(), get_008095()))
      }
      pub(super) fn get_008096() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 167u32)
        }))
      }
      pub(super) fn get_008098() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("h"))
      }
      pub(super) fn get_008099() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 167u32)
        }))
      }
      pub(super) fn get_008097() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008098(),
          CoreBinaryOperator::Or(None),
          get_008099(),
        ))
      }
      pub(super) fn get_008092() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008093(),
          vec![get_008096(), get_008097()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008101() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("l"))
      }
      pub(super) fn get_008102() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 167u32)
        }))
      }
      pub(super) fn get_008100() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008101(),
          CoreBinaryOperator::Or(None),
          get_008102(),
        ))
      }
      pub(super) fn get_008088() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008089(),
          vec![get_008092(), get_008100()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008103() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("L"))
      }
      pub(super) fn get_008084() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008085(),
          vec![get_008088(), get_008103()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008105() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 166u32)
        }))
      }
      pub(super) fn get_008106() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008104() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008105(),
          CoreBinaryOperator::Plus(None),
          get_008106(),
        ))
      }
      pub(super) fn get_008107() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 166u32)
        }))
      }
      pub(super) fn get_008083() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008084(), get_008104(), get_008107()))
      }
      pub(super) fn get_008079() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("c", 167u32) },
            get_008080(),
          )],
          get_008083(),
        ))
      }
      pub(super) fn get_008109() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Truncated format code."))
      }
      pub(super) fn get_008108() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008109()))
      }
      pub(super) fn get_008071() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008072(), get_008079(), get_008108()))
      }
      pub(super) fn get_008066() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 165u32) },
              get_008067(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 166u32) },
              get_008069(),
            ),
          ],
          get_008071(),
        ))
      }
      pub(super) fn get_008113() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_008112() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008113()))
      }
      pub(super) fn get_008115() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_008114() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008115()))
      }
      pub(super) fn get_008118() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008121() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008122() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_008120() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008121(), get_008122()))
      }
      pub(super) fn get_008123() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 169u32)
        }))
      }
      pub(super) fn get_008119() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008120(),
          vec![get_008123()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008117() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008118(),
          CoreBinaryOperator::LessThan(None),
          get_008119(),
        ))
      }
      pub(super) fn get_008126() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 169u32)
        }))
      }
      pub(super) fn get_008127() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008125() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008126(), get_008127()))
      }
      pub(super) fn get_008131() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008132() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008130() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008131(), get_008132()))
      }
      pub(super) fn get_008135() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008136() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008134() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008135(), get_008136()))
      }
      pub(super) fn get_008139() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008140() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008138() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008139(), get_008140()))
      }
      pub(super) fn get_008141() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008143() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("d"))
      }
      pub(super) fn get_008144() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008142() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008143(),
          CoreBinaryOperator::Or(None),
          get_008144(),
        ))
      }
      pub(super) fn get_008137() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008138(),
          vec![get_008141(), get_008142()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008146() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008147() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008145() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008146(),
          CoreBinaryOperator::Or(None),
          get_008147(),
        ))
      }
      pub(super) fn get_008133() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008134(),
          vec![get_008137(), get_008145()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008148() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("u"))
      }
      pub(super) fn get_008129() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008130(),
          vec![get_008133(), get_008148()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008150() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008153() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008154() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008152() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008153(),
          CoreBinaryOperator::Plus(None),
          get_008154(),
        ))
      }
      pub(super) fn get_008151() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008152()))
      }
      pub(super) fn get_008155() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008157() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("d"))
      }
      pub(super) fn get_008156() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008157()))
      }
      pub(super) fn get_008158() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008160() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_008159() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008160()))
      }
      pub(super) fn get_008149() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008150(),
              CoreObjectFieldOperator::Default(None),
              get_008151(),
            ),
            CoreObjectField::new(
              get_008155(),
              CoreObjectFieldOperator::Default(None),
              get_008156(),
            ),
            CoreObjectField::new(
              get_008158(),
              CoreObjectFieldOperator::Default(None),
              get_008159(),
            ),
          ],
        ))
      }
      pub(super) fn get_008164() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008165() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008163() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008164(), get_008165()))
      }
      pub(super) fn get_008166() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008167() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("o"))
      }
      pub(super) fn get_008162() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008163(),
          vec![get_008166(), get_008167()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008169() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008172() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008173() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008171() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008172(),
          CoreBinaryOperator::Plus(None),
          get_008173(),
        ))
      }
      pub(super) fn get_008170() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008171()))
      }
      pub(super) fn get_008174() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008176() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("o"))
      }
      pub(super) fn get_008175() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008176()))
      }
      pub(super) fn get_008177() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008179() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_008178() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008179()))
      }
      pub(super) fn get_008168() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008169(),
              CoreObjectFieldOperator::Default(None),
              get_008170(),
            ),
            CoreObjectField::new(
              get_008174(),
              CoreObjectFieldOperator::Default(None),
              get_008175(),
            ),
            CoreObjectField::new(
              get_008177(),
              CoreObjectFieldOperator::Default(None),
              get_008178(),
            ),
          ],
        ))
      }
      pub(super) fn get_008183() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008184() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008182() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008183(), get_008184()))
      }
      pub(super) fn get_008185() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008186() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("x"))
      }
      pub(super) fn get_008181() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008182(),
          vec![get_008185(), get_008186()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008188() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008192() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008190() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008191(),
          CoreBinaryOperator::Plus(None),
          get_008192(),
        ))
      }
      pub(super) fn get_008189() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008190()))
      }
      pub(super) fn get_008193() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008195() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("x"))
      }
      pub(super) fn get_008194() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008195()))
      }
      pub(super) fn get_008196() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008198() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_008197() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008198()))
      }
      pub(super) fn get_008187() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008188(),
              CoreObjectFieldOperator::Default(None),
              get_008189(),
            ),
            CoreObjectField::new(
              get_008193(),
              CoreObjectFieldOperator::Default(None),
              get_008194(),
            ),
            CoreObjectField::new(
              get_008196(),
              CoreObjectFieldOperator::Default(None),
              get_008197(),
            ),
          ],
        ))
      }
      pub(super) fn get_008202() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008203() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008201() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008202(), get_008203()))
      }
      pub(super) fn get_008204() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008205() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("X"))
      }
      pub(super) fn get_008200() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008201(),
          vec![get_008204(), get_008205()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008207() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008210() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008211() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008209() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008210(),
          CoreBinaryOperator::Plus(None),
          get_008211(),
        ))
      }
      pub(super) fn get_008208() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008209()))
      }
      pub(super) fn get_008212() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008214() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("x"))
      }
      pub(super) fn get_008213() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008214()))
      }
      pub(super) fn get_008215() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008217() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_008216() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008217()))
      }
      pub(super) fn get_008206() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008207(),
              CoreObjectFieldOperator::Default(None),
              get_008208(),
            ),
            CoreObjectField::new(
              get_008212(),
              CoreObjectFieldOperator::Default(None),
              get_008213(),
            ),
            CoreObjectField::new(
              get_008215(),
              CoreObjectFieldOperator::Default(None),
              get_008216(),
            ),
          ],
        ))
      }
      pub(super) fn get_008221() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008222() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008220() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008221(), get_008222()))
      }
      pub(super) fn get_008223() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008224() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("e"))
      }
      pub(super) fn get_008219() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008220(),
          vec![get_008223(), get_008224()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008226() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008229() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008230() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008228() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008229(),
          CoreBinaryOperator::Plus(None),
          get_008230(),
        ))
      }
      pub(super) fn get_008227() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008228()))
      }
      pub(super) fn get_008231() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008233() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("e"))
      }
      pub(super) fn get_008232() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008233()))
      }
      pub(super) fn get_008234() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008236() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_008235() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008236()))
      }
      pub(super) fn get_008225() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008226(),
              CoreObjectFieldOperator::Default(None),
              get_008227(),
            ),
            CoreObjectField::new(
              get_008231(),
              CoreObjectFieldOperator::Default(None),
              get_008232(),
            ),
            CoreObjectField::new(
              get_008234(),
              CoreObjectFieldOperator::Default(None),
              get_008235(),
            ),
          ],
        ))
      }
      pub(super) fn get_008240() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008241() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008239() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008240(), get_008241()))
      }
      pub(super) fn get_008242() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008243() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("E"))
      }
      pub(super) fn get_008238() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008239(),
          vec![get_008242(), get_008243()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008245() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008248() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008249() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008247() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008248(),
          CoreBinaryOperator::Plus(None),
          get_008249(),
        ))
      }
      pub(super) fn get_008246() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008247()))
      }
      pub(super) fn get_008250() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008252() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("e"))
      }
      pub(super) fn get_008251() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008252()))
      }
      pub(super) fn get_008253() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008255() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_008254() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008255()))
      }
      pub(super) fn get_008244() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008245(),
              CoreObjectFieldOperator::Default(None),
              get_008246(),
            ),
            CoreObjectField::new(
              get_008250(),
              CoreObjectFieldOperator::Default(None),
              get_008251(),
            ),
            CoreObjectField::new(
              get_008253(),
              CoreObjectFieldOperator::Default(None),
              get_008254(),
            ),
          ],
        ))
      }
      pub(super) fn get_008259() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008260() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008258() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008259(), get_008260()))
      }
      pub(super) fn get_008261() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008262() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("f"))
      }
      pub(super) fn get_008257() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008258(),
          vec![get_008261(), get_008262()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008264() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008267() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008268() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008266() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008267(),
          CoreBinaryOperator::Plus(None),
          get_008268(),
        ))
      }
      pub(super) fn get_008265() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008266()))
      }
      pub(super) fn get_008269() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008271() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("f"))
      }
      pub(super) fn get_008270() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008271()))
      }
      pub(super) fn get_008272() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008274() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_008273() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008274()))
      }
      pub(super) fn get_008263() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008264(),
              CoreObjectFieldOperator::Default(None),
              get_008265(),
            ),
            CoreObjectField::new(
              get_008269(),
              CoreObjectFieldOperator::Default(None),
              get_008270(),
            ),
            CoreObjectField::new(
              get_008272(),
              CoreObjectFieldOperator::Default(None),
              get_008273(),
            ),
          ],
        ))
      }
      pub(super) fn get_008278() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008279() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008277() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008278(), get_008279()))
      }
      pub(super) fn get_008280() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008281() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("F"))
      }
      pub(super) fn get_008276() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008277(),
          vec![get_008280(), get_008281()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008283() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008286() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008287() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008285() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008286(),
          CoreBinaryOperator::Plus(None),
          get_008287(),
        ))
      }
      pub(super) fn get_008284() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008285()))
      }
      pub(super) fn get_008288() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008290() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("f"))
      }
      pub(super) fn get_008289() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008290()))
      }
      pub(super) fn get_008291() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008293() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_008292() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008293()))
      }
      pub(super) fn get_008282() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008283(),
              CoreObjectFieldOperator::Default(None),
              get_008284(),
            ),
            CoreObjectField::new(
              get_008288(),
              CoreObjectFieldOperator::Default(None),
              get_008289(),
            ),
            CoreObjectField::new(
              get_008291(),
              CoreObjectFieldOperator::Default(None),
              get_008292(),
            ),
          ],
        ))
      }
      pub(super) fn get_008297() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008298() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008296() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008297(), get_008298()))
      }
      pub(super) fn get_008299() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008300() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("g"))
      }
      pub(super) fn get_008295() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008296(),
          vec![get_008299(), get_008300()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008302() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008305() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008306() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008304() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008305(),
          CoreBinaryOperator::Plus(None),
          get_008306(),
        ))
      }
      pub(super) fn get_008303() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008304()))
      }
      pub(super) fn get_008307() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008309() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("g"))
      }
      pub(super) fn get_008308() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008309()))
      }
      pub(super) fn get_008310() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008312() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_008311() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008312()))
      }
      pub(super) fn get_008301() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008302(),
              CoreObjectFieldOperator::Default(None),
              get_008303(),
            ),
            CoreObjectField::new(
              get_008307(),
              CoreObjectFieldOperator::Default(None),
              get_008308(),
            ),
            CoreObjectField::new(
              get_008310(),
              CoreObjectFieldOperator::Default(None),
              get_008311(),
            ),
          ],
        ))
      }
      pub(super) fn get_008316() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008317() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008315() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008316(), get_008317()))
      }
      pub(super) fn get_008318() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008319() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("G"))
      }
      pub(super) fn get_008314() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008315(),
          vec![get_008318(), get_008319()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008321() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008324() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008325() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008323() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008324(),
          CoreBinaryOperator::Plus(None),
          get_008325(),
        ))
      }
      pub(super) fn get_008322() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008323()))
      }
      pub(super) fn get_008326() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008328() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("g"))
      }
      pub(super) fn get_008327() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008328()))
      }
      pub(super) fn get_008329() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008331() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_008330() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008331()))
      }
      pub(super) fn get_008320() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008321(),
              CoreObjectFieldOperator::Default(None),
              get_008322(),
            ),
            CoreObjectField::new(
              get_008326(),
              CoreObjectFieldOperator::Default(None),
              get_008327(),
            ),
            CoreObjectField::new(
              get_008329(),
              CoreObjectFieldOperator::Default(None),
              get_008330(),
            ),
          ],
        ))
      }
      pub(super) fn get_008335() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008336() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008334() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008335(), get_008336()))
      }
      pub(super) fn get_008337() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008338() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("c"))
      }
      pub(super) fn get_008333() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008334(),
          vec![get_008337(), get_008338()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008340() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008343() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008344() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008342() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008343(),
          CoreBinaryOperator::Plus(None),
          get_008344(),
        ))
      }
      pub(super) fn get_008341() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008342()))
      }
      pub(super) fn get_008345() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008347() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("c"))
      }
      pub(super) fn get_008346() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008347()))
      }
      pub(super) fn get_008348() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008350() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_008349() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008350()))
      }
      pub(super) fn get_008339() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008340(),
              CoreObjectFieldOperator::Default(None),
              get_008341(),
            ),
            CoreObjectField::new(
              get_008345(),
              CoreObjectFieldOperator::Default(None),
              get_008346(),
            ),
            CoreObjectField::new(
              get_008348(),
              CoreObjectFieldOperator::Default(None),
              get_008349(),
            ),
          ],
        ))
      }
      pub(super) fn get_008354() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008355() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008353() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008354(), get_008355()))
      }
      pub(super) fn get_008356() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008357() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("s"))
      }
      pub(super) fn get_008352() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008353(),
          vec![get_008356(), get_008357()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008359() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008362() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008363() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008361() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008362(),
          CoreBinaryOperator::Plus(None),
          get_008363(),
        ))
      }
      pub(super) fn get_008360() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008361()))
      }
      pub(super) fn get_008364() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008366() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("s"))
      }
      pub(super) fn get_008365() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008366()))
      }
      pub(super) fn get_008367() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008369() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_008368() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008369()))
      }
      pub(super) fn get_008358() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008359(),
              CoreObjectFieldOperator::Default(None),
              get_008360(),
            ),
            CoreObjectField::new(
              get_008364(),
              CoreObjectFieldOperator::Default(None),
              get_008365(),
            ),
            CoreObjectField::new(
              get_008367(),
              CoreObjectFieldOperator::Default(None),
              get_008368(),
            ),
          ],
        ))
      }
      pub(super) fn get_008373() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008374() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008372() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008373(), get_008374()))
      }
      pub(super) fn get_008375() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008376() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%"))
      }
      pub(super) fn get_008371() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008372(),
          vec![get_008375(), get_008376()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008378() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008381() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 170u32)
        }))
      }
      pub(super) fn get_008382() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008380() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008381(),
          CoreBinaryOperator::Plus(None),
          get_008382(),
        ))
      }
      pub(super) fn get_008379() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008380()))
      }
      pub(super) fn get_008383() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008385() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%"))
      }
      pub(super) fn get_008384() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008385()))
      }
      pub(super) fn get_008386() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008388() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_008387() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008388()))
      }
      pub(super) fn get_008377() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008378(),
              CoreObjectFieldOperator::Default(None),
              get_008379(),
            ),
            CoreObjectField::new(
              get_008383(),
              CoreObjectFieldOperator::Default(None),
              get_008384(),
            ),
            CoreObjectField::new(
              get_008386(),
              CoreObjectFieldOperator::Default(None),
              get_008387(),
            ),
          ],
        ))
      }
      pub(super) fn get_008391() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Unrecognised conversion type: "))
      }
      pub(super) fn get_008392() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 171u32)
        }))
      }
      pub(super) fn get_008390() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008391(),
          CoreBinaryOperator::Plus(None),
          get_008392(),
        ))
      }
      pub(super) fn get_008389() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008390()))
      }
      pub(super) fn get_008370() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008371(), get_008377(), get_008389()))
      }
      pub(super) fn get_008351() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008352(), get_008358(), get_008370()))
      }
      pub(super) fn get_008332() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008333(), get_008339(), get_008351()))
      }
      pub(super) fn get_008313() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008314(), get_008320(), get_008332()))
      }
      pub(super) fn get_008294() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008295(), get_008301(), get_008313()))
      }
      pub(super) fn get_008275() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008276(), get_008282(), get_008294()))
      }
      pub(super) fn get_008256() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008257(), get_008263(), get_008275()))
      }
      pub(super) fn get_008237() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008238(), get_008244(), get_008256()))
      }
      pub(super) fn get_008218() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008219(), get_008225(), get_008237()))
      }
      pub(super) fn get_008199() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008200(), get_008206(), get_008218()))
      }
      pub(super) fn get_008180() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008181(), get_008187(), get_008199()))
      }
      pub(super) fn get_008161() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008162(), get_008168(), get_008180()))
      }
      pub(super) fn get_008128() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008129(), get_008149(), get_008161()))
      }
      pub(super) fn get_008124() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("c", 171u32) },
            get_008125(),
          )],
          get_008128(),
        ))
      }
      pub(super) fn get_008394() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Truncated format code."))
      }
      pub(super) fn get_008393() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008394()))
      }
      pub(super) fn get_008116() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008117(), get_008124(), get_008393()))
      }
      pub(super) fn get_008111() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 169u32) },
              get_008112(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 170u32) },
              get_008114(),
            ),
          ],
          get_008116(),
        ))
      }
      pub(super) fn get_008398() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_008397() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008398()))
      }
      pub(super) fn get_008400() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_008399() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008400()))
      }
      pub(super) fn get_008403() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 174u32)
        }))
      }
      pub(super) fn get_008406() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008407() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_008405() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008406(), get_008407()))
      }
      pub(super) fn get_008408() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 173u32)
        }))
      }
      pub(super) fn get_008404() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008405(),
          vec![get_008408()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008402() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008403(),
          CoreBinaryOperator::LessThan(None),
          get_008404(),
        ))
      }
      pub(super) fn get_008411() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("try_parse_mapping_key", 135u32)
        }))
      }
      pub(super) fn get_008412() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 173u32)
        }))
      }
      pub(super) fn get_008413() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 174u32)
        }))
      }
      pub(super) fn get_008410() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008411(),
          vec![get_008412(), get_008413()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008416() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("try_parse_cflags", 144u32)
        }))
      }
      pub(super) fn get_008417() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 173u32)
        }))
      }
      pub(super) fn get_008419() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("mkey", 175u32)
        }))
      }
      pub(super) fn get_008420() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008418() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008419(), get_008420()))
      }
      pub(super) fn get_008415() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008416(),
          vec![get_008417(), get_008418()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008423() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("try_parse_field_width", 152u32)
        }))
      }
      pub(super) fn get_008424() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 173u32)
        }))
      }
      pub(super) fn get_008426() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 176u32)
        }))
      }
      pub(super) fn get_008427() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008425() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008426(), get_008427()))
      }
      pub(super) fn get_008422() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008423(),
          vec![get_008424(), get_008425()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008430() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("try_parse_precision", 160u32)
        }))
      }
      pub(super) fn get_008431() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 173u32)
        }))
      }
      pub(super) fn get_008433() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fw", 177u32)
        }))
      }
      pub(super) fn get_008434() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008432() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008433(), get_008434()))
      }
      pub(super) fn get_008429() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008430(),
          vec![get_008431(), get_008432()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008437() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("try_parse_length_modifier", 164u32)
        }))
      }
      pub(super) fn get_008438() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 173u32)
        }))
      }
      pub(super) fn get_008440() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec", 178u32)
        }))
      }
      pub(super) fn get_008441() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008439() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008440(), get_008441()))
      }
      pub(super) fn get_008436() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008437(),
          vec![get_008438(), get_008439()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008444() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("parse_conv_type", 168u32)
        }))
      }
      pub(super) fn get_008445() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 173u32)
        }))
      }
      pub(super) fn get_008446() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("len_mod", 179u32)
        }))
      }
      pub(super) fn get_008443() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008444(),
          vec![get_008445(), get_008446()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008448() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008451() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ctype", 180u32)
        }))
      }
      pub(super) fn get_008452() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008450() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008451(), get_008452()))
      }
      pub(super) fn get_008449() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008450()))
      }
      pub(super) fn get_008453() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("code"))
      }
      pub(super) fn get_008456() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mkey"))
      }
      pub(super) fn get_008459() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("mkey", 175u32)
        }))
      }
      pub(super) fn get_008460() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008458() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008459(), get_008460()))
      }
      pub(super) fn get_008457() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008458()))
      }
      pub(super) fn get_008461() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("cflags"))
      }
      pub(super) fn get_008464() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 176u32)
        }))
      }
      pub(super) fn get_008465() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008463() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008464(), get_008465()))
      }
      pub(super) fn get_008462() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008463()))
      }
      pub(super) fn get_008466() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("fw"))
      }
      pub(super) fn get_008469() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fw", 177u32)
        }))
      }
      pub(super) fn get_008470() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008468() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008469(), get_008470()))
      }
      pub(super) fn get_008467() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008468()))
      }
      pub(super) fn get_008471() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prec"))
      }
      pub(super) fn get_008474() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec", 178u32)
        }))
      }
      pub(super) fn get_008475() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008473() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008474(), get_008475()))
      }
      pub(super) fn get_008472() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008473()))
      }
      pub(super) fn get_008476() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_008479() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ctype", 180u32)
        }))
      }
      pub(super) fn get_008480() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("v"))
      }
      pub(super) fn get_008478() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008479(), get_008480()))
      }
      pub(super) fn get_008477() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008478()))
      }
      pub(super) fn get_008481() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008484() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ctype", 180u32)
        }))
      }
      pub(super) fn get_008485() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_008483() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008484(), get_008485()))
      }
      pub(super) fn get_008482() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008483()))
      }
      pub(super) fn get_008455() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008456(),
              CoreObjectFieldOperator::Default(None),
              get_008457(),
            ),
            CoreObjectField::new(
              get_008461(),
              CoreObjectFieldOperator::Default(None),
              get_008462(),
            ),
            CoreObjectField::new(
              get_008466(),
              CoreObjectFieldOperator::Default(None),
              get_008467(),
            ),
            CoreObjectField::new(
              get_008471(),
              CoreObjectFieldOperator::Default(None),
              get_008472(),
            ),
            CoreObjectField::new(
              get_008476(),
              CoreObjectFieldOperator::Default(None),
              get_008477(),
            ),
            CoreObjectField::new(
              get_008481(),
              CoreObjectFieldOperator::Default(None),
              get_008482(),
            ),
          ],
        ))
      }
      pub(super) fn get_008454() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_008455()))
      }
      pub(super) fn get_008447() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_008448(),
              CoreObjectFieldOperator::Default(None),
              get_008449(),
            ),
            CoreObjectField::new(
              get_008453(),
              CoreObjectFieldOperator::Default(None),
              get_008454(),
            ),
          ],
        ))
      }
      pub(super) fn get_008442() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("ctype", 180u32) },
            get_008443(),
          )],
          get_008447(),
        ))
      }
      pub(super) fn get_008435() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("len_mod", 179u32) },
            get_008436(),
          )],
          get_008442(),
        ))
      }
      pub(super) fn get_008428() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("prec", 178u32) },
            get_008429(),
          )],
          get_008435(),
        ))
      }
      pub(super) fn get_008421() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("fw", 177u32) },
            get_008422(),
          )],
          get_008428(),
        ))
      }
      pub(super) fn get_008414() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("cflags", 176u32) },
            get_008415(),
          )],
          get_008421(),
        ))
      }
      pub(super) fn get_008409() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("mkey", 175u32) },
            get_008410(),
          )],
          get_008414(),
        ))
      }
      pub(super) fn get_008487() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Truncated format code."))
      }
      pub(super) fn get_008486() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008487()))
      }
      pub(super) fn get_008401() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008402(), get_008409(), get_008486()))
      }
      pub(super) fn get_008396() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 173u32) },
              get_008397(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 174u32) },
              get_008399(),
            ),
          ],
          get_008401(),
        ))
      }
      pub(super) fn get_008491() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_008490() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008491()))
      }
      pub(super) fn get_008493() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_008492() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008493()))
      }
      pub(super) fn get_008495() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'out' not bound"))
      }
      pub(super) fn get_008494() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008495()))
      }
      pub(super) fn get_008497() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'cur' not bound"))
      }
      pub(super) fn get_008496() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008497()))
      }
      pub(super) fn get_008500() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 183u32)
        }))
      }
      pub(super) fn get_008503() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008504() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_008502() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008503(), get_008504()))
      }
      pub(super) fn get_008505() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 182u32)
        }))
      }
      pub(super) fn get_008501() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008502(),
          vec![get_008505()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008499() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008500(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_008501(),
        ))
      }
      pub(super) fn get_008507() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("out", 184u32)
        }))
      }
      pub(super) fn get_008509() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cur", 185u32)
        }))
      }
      pub(super) fn get_008508() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_008509()]))
      }
      pub(super) fn get_008506() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008507(),
          CoreBinaryOperator::Plus(None),
          get_008508(),
        ))
      }
      pub(super) fn get_008512() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 182u32)
        }))
      }
      pub(super) fn get_008513() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 183u32)
        }))
      }
      pub(super) fn get_008511() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008512(), get_008513()))
      }
      pub(super) fn get_008517() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008518() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008516() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008517(), get_008518()))
      }
      pub(super) fn get_008519() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 186u32)
        }))
      }
      pub(super) fn get_008520() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%"))
      }
      pub(super) fn get_008515() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008516(),
          vec![get_008519(), get_008520()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008523() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("parse_code", 172u32)
        }))
      }
      pub(super) fn get_008524() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 182u32)
        }))
      }
      pub(super) fn get_008526() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 183u32)
        }))
      }
      pub(super) fn get_008527() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008525() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008526(),
          CoreBinaryOperator::Plus(None),
          get_008527(),
        ))
      }
      pub(super) fn get_008522() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008523(),
          vec![get_008524(), get_008525()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008529() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("parse_codes", 181u32)
        }))
      }
      pub(super) fn get_008530() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 182u32)
        }))
      }
      pub(super) fn get_008532() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("r", 187u32)
        }))
      }
      pub(super) fn get_008533() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("i"))
      }
      pub(super) fn get_008531() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008532(), get_008533()))
      }
      pub(super) fn get_008535() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("out", 184u32)
        }))
      }
      pub(super) fn get_008537() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cur", 185u32)
        }))
      }
      pub(super) fn get_008539() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("r", 187u32)
        }))
      }
      pub(super) fn get_008540() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("code"))
      }
      pub(super) fn get_008538() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008539(), get_008540()))
      }
      pub(super) fn get_008536() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_008537(), get_008538()]))
      }
      pub(super) fn get_008534() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008535(),
          CoreBinaryOperator::Plus(None),
          get_008536(),
        ))
      }
      pub(super) fn get_008541() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_008528() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008529(),
          vec![get_008530(), get_008531(), get_008534(), get_008541()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_008521() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("r", 187u32) },
            get_008522(),
          )],
          get_008528(),
        ))
      }
      pub(super) fn get_008543() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("parse_codes", 181u32)
        }))
      }
      pub(super) fn get_008544() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 182u32)
        }))
      }
      pub(super) fn get_008546() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 183u32)
        }))
      }
      pub(super) fn get_008547() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008545() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008546(),
          CoreBinaryOperator::Plus(None),
          get_008547(),
        ))
      }
      pub(super) fn get_008548() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("out", 184u32)
        }))
      }
      pub(super) fn get_008550() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cur", 185u32)
        }))
      }
      pub(super) fn get_008551() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 186u32)
        }))
      }
      pub(super) fn get_008549() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008550(),
          CoreBinaryOperator::Plus(None),
          get_008551(),
        ))
      }
      pub(super) fn get_008542() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008543(),
          vec![get_008544(), get_008545(), get_008548(), get_008549()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_008514() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008515(), get_008521(), get_008542()))
      }
      pub(super) fn get_008510() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("c", 186u32) },
            get_008511(),
          )],
          get_008514(),
        ))
      }
      pub(super) fn get_008498() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008499(), get_008506(), get_008510()))
      }
      pub(super) fn get_008489() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 182u32) },
              get_008490(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 183u32) },
              get_008492(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("out", 184u32) },
              get_008494(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("cur", 185u32) },
              get_008496(),
            ),
          ],
          get_008498(),
        ))
      }
      pub(super) fn get_008554() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("parse_codes", 181u32)
        }))
      }
      pub(super) fn get_008555() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 133u32)
        }))
      }
      pub(super) fn get_008556() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008557() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_008558() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_008553() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008554(),
          vec![get_008555(), get_008556(), get_008557(), get_008558()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008562() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'w' not bound"))
      }
      pub(super) fn get_008561() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008562()))
      }
      pub(super) fn get_008564() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 's' not bound"))
      }
      pub(super) fn get_008563() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008564()))
      }
      pub(super) fn get_008568() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'w' not bound"))
      }
      pub(super) fn get_008567() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008568()))
      }
      pub(super) fn get_008570() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_008569() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008570()))
      }
      pub(super) fn get_008573() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("w", 193u32)
        }))
      }
      pub(super) fn get_008574() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008572() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008573(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_008574(),
        ))
      }
      pub(super) fn get_008575() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 194u32)
        }))
      }
      pub(super) fn get_008577() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 192u32)
        }))
      }
      pub(super) fn get_008579() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("w", 193u32)
        }))
      }
      pub(super) fn get_008580() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008578() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008579(),
          CoreBinaryOperator::Minus(None),
          get_008580(),
        ))
      }
      pub(super) fn get_008582() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 194u32)
        }))
      }
      pub(super) fn get_008583() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("s", 191u32)
        }))
      }
      pub(super) fn get_008581() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008582(),
          CoreBinaryOperator::Plus(None),
          get_008583(),
        ))
      }
      pub(super) fn get_008576() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008577(),
          vec![get_008578(), get_008581()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008571() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008572(), get_008575(), get_008576()))
      }
      pub(super) fn get_008566() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("w", 193u32) },
              get_008567(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("v", 194u32) },
              get_008569(),
            ),
          ],
          get_008571(),
        ))
      }
      pub(super) fn get_008585() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 192u32)
        }))
      }
      pub(super) fn get_008586() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("w", 190u32)
        }))
      }
      pub(super) fn get_008587() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_008584() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008585(),
          vec![get_008586(), get_008587()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008565() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 192u32) },
            get_008566(),
          )],
          get_008584(),
        ))
      }
      pub(super) fn get_008560() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("w", 190u32) },
              get_008561(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("s", 191u32) },
              get_008563(),
            ),
          ],
          get_008565(),
        ))
      }
      pub(super) fn get_008591() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_008590() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008591()))
      }
      pub(super) fn get_008593() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'w' not bound"))
      }
      pub(super) fn get_008592() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008593()))
      }
      pub(super) fn get_008595() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 's' not bound"))
      }
      pub(super) fn get_008594() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008595()))
      }
      pub(super) fn get_008598() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("padding", 189u32)
        }))
      }
      pub(super) fn get_008600() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("w", 197u32)
        }))
      }
      pub(super) fn get_008603() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008604() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_008602() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008603(), get_008604()))
      }
      pub(super) fn get_008605() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 196u32)
        }))
      }
      pub(super) fn get_008601() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008602(),
          vec![get_008605()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008599() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008600(),
          CoreBinaryOperator::Minus(None),
          get_008601(),
        ))
      }
      pub(super) fn get_008606() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("s", 198u32)
        }))
      }
      pub(super) fn get_008597() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008598(),
          vec![get_008599(), get_008606()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008607() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 196u32)
        }))
      }
      pub(super) fn get_008596() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008597(),
          CoreBinaryOperator::Plus(None),
          get_008607(),
        ))
      }
      pub(super) fn get_008589() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 196u32) },
              get_008590(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("w", 197u32) },
              get_008592(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("s", 198u32) },
              get_008594(),
            ),
          ],
          get_008596(),
        ))
      }
      pub(super) fn get_008611() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_008610() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008611()))
      }
      pub(super) fn get_008613() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'w' not bound"))
      }
      pub(super) fn get_008612() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008613()))
      }
      pub(super) fn get_008615() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 's' not bound"))
      }
      pub(super) fn get_008614() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008615()))
      }
      pub(super) fn get_008617() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 200u32)
        }))
      }
      pub(super) fn get_008619() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("padding", 189u32)
        }))
      }
      pub(super) fn get_008621() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("w", 201u32)
        }))
      }
      pub(super) fn get_008624() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008625() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_008623() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008624(), get_008625()))
      }
      pub(super) fn get_008626() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 200u32)
        }))
      }
      pub(super) fn get_008622() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008623(),
          vec![get_008626()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008620() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008621(),
          CoreBinaryOperator::Minus(None),
          get_008622(),
        ))
      }
      pub(super) fn get_008627() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("s", 202u32)
        }))
      }
      pub(super) fn get_008618() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008619(),
          vec![get_008620(), get_008627()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008616() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008617(),
          CoreBinaryOperator::Plus(None),
          get_008618(),
        ))
      }
      pub(super) fn get_008609() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 200u32) },
              get_008610(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("w", 201u32) },
              get_008612(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("s", 202u32) },
              get_008614(),
            ),
          ],
          get_008616(),
        ))
      }
      pub(super) fn get_008631() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'neg' not bound"))
      }
      pub(super) fn get_008630() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008631()))
      }
      pub(super) fn get_008633() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'mag' not bound"))
      }
      pub(super) fn get_008632() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008633()))
      }
      pub(super) fn get_008635() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'min_chars' not bound"))
      }
      pub(super) fn get_008634() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008635()))
      }
      pub(super) fn get_008637() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'min_digits' not bound"))
      }
      pub(super) fn get_008636() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008637()))
      }
      pub(super) fn get_008639() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'blank' not bound"))
      }
      pub(super) fn get_008638() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008639()))
      }
      pub(super) fn get_008641() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'plus' not bound"))
      }
      pub(super) fn get_008640() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008641()))
      }
      pub(super) fn get_008643() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'radix' not bound"))
      }
      pub(super) fn get_008642() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008643()))
      }
      pub(super) fn get_008645() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Parameter 'zero_prefix' not bound",
        ))
      }
      pub(super) fn get_008644() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008645()))
      }
      pub(super) fn get_008650() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008651() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008649() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008650(), get_008651()))
      }
      pub(super) fn get_008652() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("mag", 205u32)
        }))
      }
      pub(super) fn get_008653() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008648() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008649(),
          vec![get_008652(), get_008653()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008654() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_008658() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'n' not bound"))
      }
      pub(super) fn get_008657() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008658()))
      }
      pub(super) fn get_008662() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008663() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008661() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008662(), get_008663()))
      }
      pub(super) fn get_008664() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 214u32)
        }))
      }
      pub(super) fn get_008665() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008660() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008661(),
          vec![get_008664(), get_008665()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008666() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_prefix", 211u32)
        }))
      }
      pub(super) fn get_008669() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 213u32)
        }))
      }
      pub(super) fn get_008672() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008673() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("floor"))
      }
      pub(super) fn get_008671() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008672(), get_008673()))
      }
      pub(super) fn get_008675() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 214u32)
        }))
      }
      pub(super) fn get_008676() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("radix", 210u32)
        }))
      }
      pub(super) fn get_008674() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008675(),
          CoreBinaryOperator::Div(None),
          get_008676(),
        ))
      }
      pub(super) fn get_008670() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008671(),
          vec![get_008674()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008668() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008669(),
          vec![get_008670()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008679() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008680() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_008678() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008679(), get_008680()))
      }
      pub(super) fn get_008681() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 214u32)
        }))
      }
      pub(super) fn get_008682() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("radix", 210u32)
        }))
      }
      pub(super) fn get_008677() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008678(),
          vec![get_008681(), get_008682()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008667() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008668(),
          CoreBinaryOperator::Plus(None),
          get_008677(),
        ))
      }
      pub(super) fn get_008659() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008660(), get_008666(), get_008667()))
      }
      pub(super) fn get_008656() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("n", 214u32) },
            get_008657(),
          )],
          get_008659(),
        ))
      }
      pub(super) fn get_008684() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 213u32)
        }))
      }
      pub(super) fn get_008685() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("mag", 205u32)
        }))
      }
      pub(super) fn get_008683() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008684(),
          vec![get_008685()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008655() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 213u32) },
            get_008656(),
          )],
          get_008683(),
        ))
      }
      pub(super) fn get_008647() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008648(), get_008654(), get_008655()))
      }
      pub(super) fn get_008688() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("min_chars", 206u32)
        }))
      }
      pub(super) fn get_008692() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("neg", 204u32)
        }))
      }
      pub(super) fn get_008693() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("blank", 208u32)
        }))
      }
      pub(super) fn get_008691() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008692(),
          CoreBinaryOperator::Or(None),
          get_008693(),
        ))
      }
      pub(super) fn get_008694() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("plus", 209u32)
        }))
      }
      pub(super) fn get_008690() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008691(),
          CoreBinaryOperator::Or(None),
          get_008694(),
        ))
      }
      pub(super) fn get_008695() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008696() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008689() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008690(), get_008695(), get_008696()))
      }
      pub(super) fn get_008687() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008688(),
          CoreBinaryOperator::Minus(None),
          get_008689(),
        ))
      }
      pub(super) fn get_008700() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008701() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("max"))
      }
      pub(super) fn get_008699() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008700(), get_008701()))
      }
      pub(super) fn get_008702() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp", 215u32)
        }))
      }
      pub(super) fn get_008703() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("min_digits", 207u32)
        }))
      }
      pub(super) fn get_008698() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008699(),
          vec![get_008702(), get_008703()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008706() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pad_left", 195u32)
        }))
      }
      pub(super) fn get_008707() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("dec", 212u32)
        }))
      }
      pub(super) fn get_008708() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp2", 216u32)
        }))
      }
      pub(super) fn get_008709() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_008705() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008706(),
          vec![get_008707(), get_008708(), get_008709()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008712() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("neg", 204u32)
        }))
      }
      pub(super) fn get_008713() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("-"))
      }
      pub(super) fn get_008715() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("plus", 209u32)
        }))
      }
      pub(super) fn get_008716() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("+"))
      }
      pub(super) fn get_008718() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("blank", 208u32)
        }))
      }
      pub(super) fn get_008719() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" "))
      }
      pub(super) fn get_008720() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_008717() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008718(), get_008719(), get_008720()))
      }
      pub(super) fn get_008714() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008715(), get_008716(), get_008717()))
      }
      pub(super) fn get_008711() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008712(), get_008713(), get_008714()))
      }
      pub(super) fn get_008721() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("dec2", 217u32)
        }))
      }
      pub(super) fn get_008710() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008711(),
          CoreBinaryOperator::Plus(None),
          get_008721(),
        ))
      }
      pub(super) fn get_008704() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("dec2", 217u32) },
            get_008705(),
          )],
          get_008710(),
        ))
      }
      pub(super) fn get_008697() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zp2", 216u32) },
            get_008698(),
          )],
          get_008704(),
        ))
      }
      pub(super) fn get_008686() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zp", 215u32) },
            get_008687(),
          )],
          get_008697(),
        ))
      }
      pub(super) fn get_008646() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("dec", 212u32) },
            get_008647(),
          )],
          get_008686(),
        ))
      }
      pub(super) fn get_008629() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("neg", 204u32) },
              get_008630(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("mag", 205u32) },
              get_008632(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("min_chars", 206u32) },
              get_008634(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("min_digits", 207u32) },
              get_008636(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("blank", 208u32) },
              get_008638(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("plus", 209u32) },
              get_008640(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("radix", 210u32) },
              get_008642(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("zero_prefix", 211u32) },
              get_008644(),
            ),
          ],
          get_008646(),
        ))
      }
      pub(super) fn get_008725() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'n__' not bound"))
      }
      pub(super) fn get_008724() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008725()))
      }
      pub(super) fn get_008727() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'min_chars' not bound"))
      }
      pub(super) fn get_008726() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008727()))
      }
      pub(super) fn get_008729() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'min_digits' not bound"))
      }
      pub(super) fn get_008728() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008729()))
      }
      pub(super) fn get_008731() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'blank' not bound"))
      }
      pub(super) fn get_008730() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008731()))
      }
      pub(super) fn get_008733() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'plus' not bound"))
      }
      pub(super) fn get_008732() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008733()))
      }
      pub(super) fn get_008735() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'add_zerox' not bound"))
      }
      pub(super) fn get_008734() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008735()))
      }
      pub(super) fn get_008737() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'capitals' not bound"))
      }
      pub(super) fn get_008736() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008737()))
      }
      pub(super) fn get_008741() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008742() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008743() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_008744() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(3f64))
      }
      pub(super) fn get_008745() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(4f64))
      }
      pub(super) fn get_008746() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(5f64))
      }
      pub(super) fn get_008747() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(6f64))
      }
      pub(super) fn get_008748() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(7f64))
      }
      pub(super) fn get_008749() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(8f64))
      }
      pub(super) fn get_008750() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(9f64))
      }
      pub(super) fn get_008740() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![
          get_008741(),
          get_008742(),
          get_008743(),
          get_008744(),
          get_008745(),
          get_008746(),
          get_008747(),
          get_008748(),
          get_008749(),
          get_008750(),
        ]))
      }
      pub(super) fn get_008752() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("capitals", 225u32)
        }))
      }
      pub(super) fn get_008754() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_008755() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("B"))
      }
      pub(super) fn get_008756() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("C"))
      }
      pub(super) fn get_008757() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("D"))
      }
      pub(super) fn get_008758() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("E"))
      }
      pub(super) fn get_008759() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("F"))
      }
      pub(super) fn get_008753() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![
          get_008754(),
          get_008755(),
          get_008756(),
          get_008757(),
          get_008758(),
          get_008759(),
        ]))
      }
      pub(super) fn get_008761() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_008762() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("b"))
      }
      pub(super) fn get_008763() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("c"))
      }
      pub(super) fn get_008764() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("d"))
      }
      pub(super) fn get_008765() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("e"))
      }
      pub(super) fn get_008766() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("f"))
      }
      pub(super) fn get_008760() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![
          get_008761(),
          get_008762(),
          get_008763(),
          get_008764(),
          get_008765(),
          get_008766(),
        ]))
      }
      pub(super) fn get_008751() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008752(), get_008753(), get_008760()))
      }
      pub(super) fn get_008739() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008740(),
          CoreBinaryOperator::Plus(None),
          get_008751(),
        ))
      }
      pub(super) fn get_008770() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008771() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("abs"))
      }
      pub(super) fn get_008769() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008770(), get_008771()))
      }
      pub(super) fn get_008772() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n__", 219u32)
        }))
      }
      pub(super) fn get_008768() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008769(),
          vec![get_008772()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008776() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'n' not bound"))
      }
      pub(super) fn get_008775() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008776()))
      }
      pub(super) fn get_008780() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008781() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008779() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008780(), get_008781()))
      }
      pub(super) fn get_008782() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 229u32)
        }))
      }
      pub(super) fn get_008783() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008778() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008779(),
          vec![get_008782(), get_008783()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008784() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_008787() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 228u32)
        }))
      }
      pub(super) fn get_008790() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008791() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("floor"))
      }
      pub(super) fn get_008789() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008790(), get_008791()))
      }
      pub(super) fn get_008793() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 229u32)
        }))
      }
      pub(super) fn get_008794() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_008792() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008793(),
          CoreBinaryOperator::Div(None),
          get_008794(),
        ))
      }
      pub(super) fn get_008788() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008789(),
          vec![get_008792()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008786() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008787(),
          vec![get_008788()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008796() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("numerals", 226u32)
        }))
      }
      pub(super) fn get_008799() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008800() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_008798() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008799(), get_008800()))
      }
      pub(super) fn get_008801() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 229u32)
        }))
      }
      pub(super) fn get_008802() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_008797() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008798(),
          vec![get_008801(), get_008802()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008795() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008796(), get_008797()))
      }
      pub(super) fn get_008785() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008786(),
          CoreBinaryOperator::Plus(None),
          get_008795(),
        ))
      }
      pub(super) fn get_008777() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008778(), get_008784(), get_008785()))
      }
      pub(super) fn get_008774() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("n", 229u32) },
            get_008775(),
          )],
          get_008777(),
        ))
      }
      pub(super) fn get_008807() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008808() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008806() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008807(), get_008808()))
      }
      pub(super) fn get_008811() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008812() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("floor"))
      }
      pub(super) fn get_008810() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008811(), get_008812()))
      }
      pub(super) fn get_008813() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n_", 227u32)
        }))
      }
      pub(super) fn get_008809() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008810(),
          vec![get_008813()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008814() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008805() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008806(),
          vec![get_008809(), get_008814()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008815() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_008817() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 228u32)
        }))
      }
      pub(super) fn get_008820() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008821() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("floor"))
      }
      pub(super) fn get_008819() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008820(), get_008821()))
      }
      pub(super) fn get_008822() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n_", 227u32)
        }))
      }
      pub(super) fn get_008818() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008819(),
          vec![get_008822()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008816() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008817(),
          vec![get_008818()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008804() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008805(), get_008815(), get_008816()))
      }
      pub(super) fn get_008825() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n__", 219u32)
        }))
      }
      pub(super) fn get_008826() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008824() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008825(),
          CoreBinaryOperator::LessThan(None),
          get_008826(),
        ))
      }
      pub(super) fn get_008830() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("min_chars", 220u32)
        }))
      }
      pub(super) fn get_008834() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("neg", 231u32)
        }))
      }
      pub(super) fn get_008835() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("blank", 222u32)
        }))
      }
      pub(super) fn get_008833() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008834(),
          CoreBinaryOperator::Or(None),
          get_008835(),
        ))
      }
      pub(super) fn get_008836() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("plus", 223u32)
        }))
      }
      pub(super) fn get_008832() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008833(),
          CoreBinaryOperator::Or(None),
          get_008836(),
        ))
      }
      pub(super) fn get_008837() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008838() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008831() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008832(), get_008837(), get_008838()))
      }
      pub(super) fn get_008829() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008830(),
          CoreBinaryOperator::Minus(None),
          get_008831(),
        ))
      }
      pub(super) fn get_008840() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("add_zerox", 224u32)
        }))
      }
      pub(super) fn get_008841() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_008842() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008839() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008840(), get_008841(), get_008842()))
      }
      pub(super) fn get_008828() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008829(),
          CoreBinaryOperator::Minus(None),
          get_008839(),
        ))
      }
      pub(super) fn get_008846() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008847() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("max"))
      }
      pub(super) fn get_008845() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008846(), get_008847()))
      }
      pub(super) fn get_008848() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp", 232u32)
        }))
      }
      pub(super) fn get_008849() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("min_digits", 221u32)
        }))
      }
      pub(super) fn get_008844() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008845(),
          vec![get_008848(), get_008849()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008853() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("add_zerox", 224u32)
        }))
      }
      pub(super) fn get_008855() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("capitals", 225u32)
        }))
      }
      pub(super) fn get_008856() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0X"))
      }
      pub(super) fn get_008857() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0x"))
      }
      pub(super) fn get_008854() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008855(), get_008856(), get_008857()))
      }
      pub(super) fn get_008858() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_008852() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008853(), get_008854(), get_008858()))
      }
      pub(super) fn get_008860() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pad_left", 195u32)
        }))
      }
      pub(super) fn get_008861() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("hex", 230u32)
        }))
      }
      pub(super) fn get_008862() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp2", 233u32)
        }))
      }
      pub(super) fn get_008863() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_008859() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008860(),
          vec![get_008861(), get_008862(), get_008863()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008851() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008852(),
          CoreBinaryOperator::Plus(None),
          get_008859(),
        ))
      }
      pub(super) fn get_008866() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("neg", 231u32)
        }))
      }
      pub(super) fn get_008867() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("-"))
      }
      pub(super) fn get_008869() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("plus", 223u32)
        }))
      }
      pub(super) fn get_008870() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("+"))
      }
      pub(super) fn get_008872() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("blank", 222u32)
        }))
      }
      pub(super) fn get_008873() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" "))
      }
      pub(super) fn get_008874() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_008871() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008872(), get_008873(), get_008874()))
      }
      pub(super) fn get_008868() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008869(), get_008870(), get_008871()))
      }
      pub(super) fn get_008865() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008866(), get_008867(), get_008868()))
      }
      pub(super) fn get_008875() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("hex2", 234u32)
        }))
      }
      pub(super) fn get_008864() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008865(),
          CoreBinaryOperator::Plus(None),
          get_008875(),
        ))
      }
      pub(super) fn get_008850() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("hex2", 234u32) },
            get_008851(),
          )],
          get_008864(),
        ))
      }
      pub(super) fn get_008843() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zp2", 233u32) },
            get_008844(),
          )],
          get_008850(),
        ))
      }
      pub(super) fn get_008827() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zp", 232u32) },
            get_008828(),
          )],
          get_008843(),
        ))
      }
      pub(super) fn get_008823() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("neg", 231u32) },
            get_008824(),
          )],
          get_008827(),
        ))
      }
      pub(super) fn get_008803() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("hex", 230u32) },
            get_008804(),
          )],
          get_008823(),
        ))
      }
      pub(super) fn get_008773() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 228u32) },
            get_008774(),
          )],
          get_008803(),
        ))
      }
      pub(super) fn get_008767() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("n_", 227u32) },
            get_008768(),
          )],
          get_008773(),
        ))
      }
      pub(super) fn get_008738() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("numerals", 226u32) },
            get_008739(),
          )],
          get_008767(),
        ))
      }
      pub(super) fn get_008723() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("n__", 219u32) },
              get_008724(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("min_chars", 220u32) },
              get_008726(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("min_digits", 221u32) },
              get_008728(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("blank", 222u32) },
              get_008730(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("plus", 223u32) },
              get_008732(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("add_zerox", 224u32) },
              get_008734(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("capitals", 225u32) },
              get_008736(),
            ),
          ],
          get_008738(),
        ))
      }
      pub(super) fn get_008879() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_008878() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008879()))
      }
      pub(super) fn get_008883() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_008882() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008883()))
      }
      pub(super) fn get_008885() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_008884() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008885()))
      }
      pub(super) fn get_008888() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 239u32)
        }))
      }
      pub(super) fn get_008889() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008887() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008888(),
          CoreBinaryOperator::LessThan(None),
          get_008889(),
        ))
      }
      pub(super) fn get_008890() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_008894() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008895() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008893() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008894(), get_008895()))
      }
      pub(super) fn get_008897() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 238u32)
        }))
      }
      pub(super) fn get_008898() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 239u32)
        }))
      }
      pub(super) fn get_008896() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008897(), get_008898()))
      }
      pub(super) fn get_008899() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_008892() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008893(),
          vec![get_008896(), get_008899()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008901() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 237u32)
        }))
      }
      pub(super) fn get_008902() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 238u32)
        }))
      }
      pub(super) fn get_008904() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 239u32)
        }))
      }
      pub(super) fn get_008905() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008903() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008904(),
          CoreBinaryOperator::Minus(None),
          get_008905(),
        ))
      }
      pub(super) fn get_008900() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008901(),
          vec![get_008902(), get_008903()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008908() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008909() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("substr"))
      }
      pub(super) fn get_008907() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008908(), get_008909()))
      }
      pub(super) fn get_008910() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 238u32)
        }))
      }
      pub(super) fn get_008911() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008913() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 239u32)
        }))
      }
      pub(super) fn get_008914() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008912() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008913(),
          CoreBinaryOperator::Plus(None),
          get_008914(),
        ))
      }
      pub(super) fn get_008906() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008907(),
          vec![get_008910(), get_008911(), get_008912()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008891() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008892(), get_008900(), get_008906()))
      }
      pub(super) fn get_008886() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008887(), get_008890(), get_008891()))
      }
      pub(super) fn get_008881() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 238u32) },
              get_008882(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 239u32) },
              get_008884(),
            ),
          ],
          get_008886(),
        ))
      }
      pub(super) fn get_008916() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 237u32)
        }))
      }
      pub(super) fn get_008917() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 236u32)
        }))
      }
      pub(super) fn get_008921() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008922() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_008920() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008921(), get_008922()))
      }
      pub(super) fn get_008923() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 236u32)
        }))
      }
      pub(super) fn get_008919() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008920(),
          vec![get_008923()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008924() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008918() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008919(),
          CoreBinaryOperator::Minus(None),
          get_008924(),
        ))
      }
      pub(super) fn get_008915() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008916(),
          vec![get_008917(), get_008918()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008880() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 237u32) },
            get_008881(),
          )],
          get_008915(),
        ))
      }
      pub(super) fn get_008877() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str", 236u32) },
            get_008878(),
          )],
          get_008880(),
        ))
      }
      pub(super) fn get_008928() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'n__' not bound"))
      }
      pub(super) fn get_008927() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008928()))
      }
      pub(super) fn get_008930() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'zero_pad' not bound"))
      }
      pub(super) fn get_008929() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008930()))
      }
      pub(super) fn get_008932() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'blank' not bound"))
      }
      pub(super) fn get_008931() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008932()))
      }
      pub(super) fn get_008934() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'plus' not bound"))
      }
      pub(super) fn get_008933() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008934()))
      }
      pub(super) fn get_008936() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'ensure_pt' not bound"))
      }
      pub(super) fn get_008935() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008936()))
      }
      pub(super) fn get_008938() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'trailing' not bound"))
      }
      pub(super) fn get_008937() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008938()))
      }
      pub(super) fn get_008940() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'prec' not bound"))
      }
      pub(super) fn get_008939() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_008940()))
      }
      pub(super) fn get_008944() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008945() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("abs"))
      }
      pub(super) fn get_008943() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008944(), get_008945()))
      }
      pub(super) fn get_008946() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n__", 241u32)
        }))
      }
      pub(super) fn get_008942() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008943(),
          vec![get_008946()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008950() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008951() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("floor"))
      }
      pub(super) fn get_008949() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008950(), get_008951()))
      }
      pub(super) fn get_008952() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n_", 248u32)
        }))
      }
      pub(super) fn get_008948() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008949(),
          vec![get_008952()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008957() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008958() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008956() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008957(), get_008958()))
      }
      pub(super) fn get_008959() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec", 247u32)
        }))
      }
      pub(super) fn get_008961() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008963() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ensure_pt", 245u32)
        }))
      }
      pub(super) fn get_008962() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_008963(),
        ))
      }
      pub(super) fn get_008960() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008961(),
          CoreBinaryOperator::And(None),
          get_008962(),
        ))
      }
      pub(super) fn get_008955() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008956(),
          vec![get_008959(), get_008960()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008964() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008965() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_008954() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008955(), get_008964(), get_008965()))
      }
      pub(super) fn get_008969() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_pad", 242u32)
        }))
      }
      pub(super) fn get_008970() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec", 247u32)
        }))
      }
      pub(super) fn get_008968() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008969(),
          CoreBinaryOperator::Minus(None),
          get_008970(),
        ))
      }
      pub(super) fn get_008971() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("dot_size", 250u32)
        }))
      }
      pub(super) fn get_008967() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008968(),
          CoreBinaryOperator::Minus(None),
          get_008971(),
        ))
      }
      pub(super) fn get_008974() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("render_int", 203u32)
        }))
      }
      pub(super) fn get_008976() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n__", 241u32)
        }))
      }
      pub(super) fn get_008977() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008975() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008976(),
          CoreBinaryOperator::LessThan(None),
          get_008977(),
        ))
      }
      pub(super) fn get_008978() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("whole", 249u32)
        }))
      }
      pub(super) fn get_008979() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp", 251u32)
        }))
      }
      pub(super) fn get_008980() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008981() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("blank", 243u32)
        }))
      }
      pub(super) fn get_008982() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("plus", 244u32)
        }))
      }
      pub(super) fn get_008983() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_008984() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_008973() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008974(),
          vec![
            get_008975(),
            get_008978(),
            get_008979(),
            get_008980(),
            get_008981(),
            get_008982(),
            get_008983(),
            get_008984(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008988() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_008989() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_008987() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_008988(), get_008989()))
      }
      pub(super) fn get_008990() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec", 247u32)
        }))
      }
      pub(super) fn get_008991() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_008986() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_008987(),
          vec![get_008990(), get_008991()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_008993() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 252u32)
        }))
      }
      pub(super) fn get_008995() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ensure_pt", 245u32)
        }))
      }
      pub(super) fn get_008996() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("."))
      }
      pub(super) fn get_008997() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_008994() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008995(), get_008996(), get_008997()))
      }
      pub(super) fn get_008992() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_008993(),
          CoreBinaryOperator::Plus(None),
          get_008994(),
        ))
      }
      pub(super) fn get_009001() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009002() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("floor"))
      }
      pub(super) fn get_009000() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009001(), get_009002()))
      }
      pub(super) fn get_009005() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n_", 248u32)
        }))
      }
      pub(super) fn get_009006() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("whole", 249u32)
        }))
      }
      pub(super) fn get_009004() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009005(),
          CoreBinaryOperator::Minus(None),
          get_009006(),
        ))
      }
      pub(super) fn get_009010() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009011() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("pow"))
      }
      pub(super) fn get_009009() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009010(), get_009011()))
      }
      pub(super) fn get_009012() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_009013() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec", 247u32)
        }))
      }
      pub(super) fn get_009008() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009009(),
          vec![get_009012(), get_009013()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009014() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0.5f64))
      }
      pub(super) fn get_009007() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009008(),
          CoreBinaryOperator::Plus(None),
          get_009014(),
        ))
      }
      pub(super) fn get_009003() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009004(),
          CoreBinaryOperator::Mult(None),
          get_009007(),
        ))
      }
      pub(super) fn get_008999() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009000(),
          vec![get_009003()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009018() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("trailing", 246u32)
        }))
      }
      pub(super) fn get_009019() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("frac", 253u32)
        }))
      }
      pub(super) fn get_009017() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009018(),
          CoreBinaryOperator::Or(None),
          get_009019(),
        ))
      }
      pub(super) fn get_009020() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_009016() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009017(),
          CoreBinaryOperator::GreaterThan(None),
          get_009020(),
        ))
      }
      pub(super) fn get_009023() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("render_int", 203u32)
        }))
      }
      pub(super) fn get_009024() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_009025() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("frac", 253u32)
        }))
      }
      pub(super) fn get_009026() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec", 247u32)
        }))
      }
      pub(super) fn get_009027() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_009028() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_009029() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_009030() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_009031() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_009022() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009023(),
          vec![
            get_009024(),
            get_009025(),
            get_009026(),
            get_009027(),
            get_009028(),
            get_009029(),
            get_009030(),
            get_009031(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009034() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 252u32)
        }))
      }
      pub(super) fn get_009035() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("."))
      }
      pub(super) fn get_009033() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009034(),
          CoreBinaryOperator::Plus(None),
          get_009035(),
        ))
      }
      pub(super) fn get_009038() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("trailing", 246u32)
        }))
      }
      pub(super) fn get_009037() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_009038(),
        ))
      }
      pub(super) fn get_009040() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("strip_trailing_zero", 235u32)
        }))
      }
      pub(super) fn get_009041() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("frac_str", 254u32)
        }))
      }
      pub(super) fn get_009039() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009040(),
          vec![get_009041()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009042() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("frac_str", 254u32)
        }))
      }
      pub(super) fn get_009036() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009037(), get_009039(), get_009042()))
      }
      pub(super) fn get_009032() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009033(),
          CoreBinaryOperator::Plus(None),
          get_009036(),
        ))
      }
      pub(super) fn get_009021() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("frac_str", 254u32) },
            get_009022(),
          )],
          get_009032(),
        ))
      }
      pub(super) fn get_009043() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 252u32)
        }))
      }
      pub(super) fn get_009015() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009016(), get_009021(), get_009043()))
      }
      pub(super) fn get_008998() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("frac", 253u32) },
            get_008999(),
          )],
          get_009015(),
        ))
      }
      pub(super) fn get_008985() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_008986(), get_008992(), get_008998()))
      }
      pub(super) fn get_008972() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("str", 252u32) },
            get_008973(),
          )],
          get_008985(),
        ))
      }
      pub(super) fn get_008966() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zp", 251u32) },
            get_008967(),
          )],
          get_008972(),
        ))
      }
      pub(super) fn get_008953() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("dot_size", 250u32) },
            get_008954(),
          )],
          get_008966(),
        ))
      }
      pub(super) fn get_008947() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("whole", 249u32) },
            get_008948(),
          )],
          get_008953(),
        ))
      }
      pub(super) fn get_008941() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("n_", 248u32) },
            get_008942(),
          )],
          get_008947(),
        ))
      }
      pub(super) fn get_008926() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("n__", 241u32) },
              get_008927(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("zero_pad", 242u32) },
              get_008929(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("blank", 243u32) },
              get_008931(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("plus", 244u32) },
              get_008933(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("ensure_pt", 245u32) },
              get_008935(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("trailing", 246u32) },
              get_008937(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("prec", 247u32) },
              get_008939(),
            ),
          ],
          get_008941(),
        ))
      }
      pub(super) fn get_009047() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'n__' not bound"))
      }
      pub(super) fn get_009046() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009047()))
      }
      pub(super) fn get_009049() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'zero_pad' not bound"))
      }
      pub(super) fn get_009048() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009049()))
      }
      pub(super) fn get_009051() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'blank' not bound"))
      }
      pub(super) fn get_009050() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009051()))
      }
      pub(super) fn get_009053() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'plus' not bound"))
      }
      pub(super) fn get_009052() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009053()))
      }
      pub(super) fn get_009055() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'ensure_pt' not bound"))
      }
      pub(super) fn get_009054() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009055()))
      }
      pub(super) fn get_009057() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'trailing' not bound"))
      }
      pub(super) fn get_009056() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009057()))
      }
      pub(super) fn get_009059() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'caps' not bound"))
      }
      pub(super) fn get_009058() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009059()))
      }
      pub(super) fn get_009061() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'prec' not bound"))
      }
      pub(super) fn get_009060() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009061()))
      }
      pub(super) fn get_009066() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009067() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009065() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009066(), get_009067()))
      }
      pub(super) fn get_009068() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n__", 256u32)
        }))
      }
      pub(super) fn get_009069() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_009064() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009065(),
          vec![get_009068(), get_009069()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009070() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_009073() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009074() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("floor"))
      }
      pub(super) fn get_009072() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009073(), get_009074()))
      }
      pub(super) fn get_009078() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009079() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("log"))
      }
      pub(super) fn get_009077() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009078(), get_009079()))
      }
      pub(super) fn get_009082() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009083() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("abs"))
      }
      pub(super) fn get_009081() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009082(), get_009083()))
      }
      pub(super) fn get_009084() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n__", 256u32)
        }))
      }
      pub(super) fn get_009080() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009081(),
          vec![get_009084()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009076() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009077(),
          vec![get_009080()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009087() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009088() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("log"))
      }
      pub(super) fn get_009086() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009087(), get_009088()))
      }
      pub(super) fn get_009089() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_009085() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009086(),
          vec![get_009089()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009075() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009076(),
          CoreBinaryOperator::Div(None),
          get_009085(),
        ))
      }
      pub(super) fn get_009071() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009072(),
          vec![get_009075()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009063() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009064(), get_009070(), get_009071()))
      }
      pub(super) fn get_009093() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("caps", 262u32)
        }))
      }
      pub(super) fn get_009094() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("E"))
      }
      pub(super) fn get_009095() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("e"))
      }
      pub(super) fn get_009092() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009093(), get_009094(), get_009095()))
      }
      pub(super) fn get_009097() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("render_int", 203u32)
        }))
      }
      pub(super) fn get_009099() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("exponent", 264u32)
        }))
      }
      pub(super) fn get_009100() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_009098() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009099(),
          CoreBinaryOperator::LessThan(None),
          get_009100(),
        ))
      }
      pub(super) fn get_009103() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009104() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("abs"))
      }
      pub(super) fn get_009102() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009103(), get_009104()))
      }
      pub(super) fn get_009105() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("exponent", 264u32)
        }))
      }
      pub(super) fn get_009101() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009102(),
          vec![get_009105()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009106() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(3f64))
      }
      pub(super) fn get_009107() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_009108() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_009109() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_009110() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_009111() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_009096() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009097(),
          vec![
            get_009098(),
            get_009101(),
            get_009106(),
            get_009107(),
            get_009108(),
            get_009109(),
            get_009110(),
            get_009111(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009091() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009092(),
          CoreBinaryOperator::Plus(None),
          get_009096(),
        ))
      }
      pub(super) fn get_009116() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009117() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009115() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009116(), get_009117()))
      }
      pub(super) fn get_009118() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("exponent", 264u32)
        }))
      }
      pub(super) fn get_009120() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(324f64))
      }
      pub(super) fn get_009119() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Minus(None),
          get_009120(),
        ))
      }
      pub(super) fn get_009114() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009115(),
          vec![get_009118(), get_009119()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009123() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n__", 256u32)
        }))
      }
      pub(super) fn get_009124() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_009122() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009123(),
          CoreBinaryOperator::Mult(None),
          get_009124(),
        ))
      }
      pub(super) fn get_009127() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009128() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("pow"))
      }
      pub(super) fn get_009126() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009127(), get_009128()))
      }
      pub(super) fn get_009129() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_009131() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("exponent", 264u32)
        }))
      }
      pub(super) fn get_009132() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009130() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009131(),
          CoreBinaryOperator::Plus(None),
          get_009132(),
        ))
      }
      pub(super) fn get_009125() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009126(),
          vec![get_009129(), get_009130()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009121() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009122(),
          CoreBinaryOperator::Div(None),
          get_009125(),
        ))
      }
      pub(super) fn get_009134() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n__", 256u32)
        }))
      }
      pub(super) fn get_009137() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009138() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("pow"))
      }
      pub(super) fn get_009136() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009137(), get_009138()))
      }
      pub(super) fn get_009139() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_009140() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("exponent", 264u32)
        }))
      }
      pub(super) fn get_009135() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009136(),
          vec![get_009139(), get_009140()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009133() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009134(),
          CoreBinaryOperator::Div(None),
          get_009135(),
        ))
      }
      pub(super) fn get_009113() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009114(), get_009121(), get_009133()))
      }
      pub(super) fn get_009143() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_pad", 257u32)
        }))
      }
      pub(super) fn get_009146() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009147() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009145() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009146(), get_009147()))
      }
      pub(super) fn get_009148() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("suff", 265u32)
        }))
      }
      pub(super) fn get_009144() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009145(),
          vec![get_009148()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009142() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009143(),
          CoreBinaryOperator::Minus(None),
          get_009144(),
        ))
      }
      pub(super) fn get_009151() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("render_float_dec", 240u32)
        }))
      }
      pub(super) fn get_009152() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("mantissa", 266u32)
        }))
      }
      pub(super) fn get_009153() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp2", 267u32)
        }))
      }
      pub(super) fn get_009154() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("blank", 258u32)
        }))
      }
      pub(super) fn get_009155() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("plus", 259u32)
        }))
      }
      pub(super) fn get_009156() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ensure_pt", 260u32)
        }))
      }
      pub(super) fn get_009157() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("trailing", 261u32)
        }))
      }
      pub(super) fn get_009158() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec", 263u32)
        }))
      }
      pub(super) fn get_009150() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009151(),
          vec![
            get_009152(),
            get_009153(),
            get_009154(),
            get_009155(),
            get_009156(),
            get_009157(),
            get_009158(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009159() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("suff", 265u32)
        }))
      }
      pub(super) fn get_009149() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009150(),
          CoreBinaryOperator::Plus(None),
          get_009159(),
        ))
      }
      pub(super) fn get_009141() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zp2", 267u32) },
            get_009142(),
          )],
          get_009149(),
        ))
      }
      pub(super) fn get_009112() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("mantissa", 266u32) },
            get_009113(),
          )],
          get_009141(),
        ))
      }
      pub(super) fn get_009090() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("suff", 265u32) },
            get_009091(),
          )],
          get_009112(),
        ))
      }
      pub(super) fn get_009062() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("exponent", 264u32) },
            get_009063(),
          )],
          get_009090(),
        ))
      }
      pub(super) fn get_009045() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("n__", 256u32) },
              get_009046(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("zero_pad", 257u32) },
              get_009048(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("blank", 258u32) },
              get_009050(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("plus", 259u32) },
              get_009052(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("ensure_pt", 260u32) },
              get_009054(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("trailing", 261u32) },
              get_009056(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("caps", 262u32) },
              get_009058(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("prec", 263u32) },
              get_009060(),
            ),
          ],
          get_009062(),
        ))
      }
      pub(super) fn get_009163() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'val' not bound"))
      }
      pub(super) fn get_009162() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009163()))
      }
      pub(super) fn get_009165() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'code' not bound"))
      }
      pub(super) fn get_009164() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009165()))
      }
      pub(super) fn get_009167() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'fw' not bound"))
      }
      pub(super) fn get_009166() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009167()))
      }
      pub(super) fn get_009169() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Parameter 'prec_or_null' not bound",
        ))
      }
      pub(super) fn get_009168() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009169()))
      }
      pub(super) fn get_009171() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_009170() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009171()))
      }
      pub(super) fn get_009174() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009175() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("cflags"))
      }
      pub(super) fn get_009173() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009174(), get_009175()))
      }
      pub(super) fn get_009181() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009182() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009180() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009181(), get_009182()))
      }
      pub(super) fn get_009183() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec_or_null", 272u32)
        }))
      }
      pub(super) fn get_009184() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_009179() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009180(),
          vec![get_009183(), get_009184()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009178() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_009179(),
        ))
      }
      pub(super) fn get_009185() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec_or_null", 272u32)
        }))
      }
      pub(super) fn get_009186() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(6f64))
      }
      pub(super) fn get_009177() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009178(), get_009185(), get_009186()))
      }
      pub(super) fn get_009192() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009193() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009191() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009192(), get_009193()))
      }
      pub(super) fn get_009194() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec_or_null", 272u32)
        }))
      }
      pub(super) fn get_009195() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_009190() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009191(),
          vec![get_009194(), get_009195()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009189() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_009190(),
        ))
      }
      pub(super) fn get_009196() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec_or_null", 272u32)
        }))
      }
      pub(super) fn get_009197() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_009188() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009189(), get_009196(), get_009197()))
      }
      pub(super) fn get_009202() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009203() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("zero"))
      }
      pub(super) fn get_009201() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009202(), get_009203()))
      }
      pub(super) fn get_009206() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009207() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("left"))
      }
      pub(super) fn get_009205() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009206(), get_009207()))
      }
      pub(super) fn get_009204() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_009205(),
        ))
      }
      pub(super) fn get_009200() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009201(),
          CoreBinaryOperator::And(None),
          get_009204(),
        ))
      }
      pub(super) fn get_009208() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fw", 271u32)
        }))
      }
      pub(super) fn get_009209() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_009199() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009200(), get_009208(), get_009209()))
      }
      pub(super) fn get_009213() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009214() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009212() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009213(), get_009214()))
      }
      pub(super) fn get_009216() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009217() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_009215() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009216(), get_009217()))
      }
      pub(super) fn get_009218() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("s"))
      }
      pub(super) fn get_009211() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009212(),
          vec![get_009215(), get_009218()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009221() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009222() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("toString"))
      }
      pub(super) fn get_009220() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009221(), get_009222()))
      }
      pub(super) fn get_009223() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009219() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009220(),
          vec![get_009223()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009227() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009228() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009226() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009227(), get_009228()))
      }
      pub(super) fn get_009230() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009231() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_009229() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009230(), get_009231()))
      }
      pub(super) fn get_009232() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("d"))
      }
      pub(super) fn get_009225() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009226(),
          vec![get_009229(), get_009232()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009237() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009238() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009236() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009237(), get_009238()))
      }
      pub(super) fn get_009241() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009242() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009240() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009241(), get_009242()))
      }
      pub(super) fn get_009243() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009239() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009240(),
          vec![get_009243()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009244() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("number"))
      }
      pub(super) fn get_009235() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009236(),
          vec![get_009239(), get_009244()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009234() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_009235(),
        ))
      }
      pub(super) fn get_009249() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Format required number at "))
      }
      pub(super) fn get_009250() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 273u32)
        }))
      }
      pub(super) fn get_009248() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009249(),
          CoreBinaryOperator::Plus(None),
          get_009250(),
        ))
      }
      pub(super) fn get_009251() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(", got "))
      }
      pub(super) fn get_009247() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009248(),
          CoreBinaryOperator::Plus(None),
          get_009251(),
        ))
      }
      pub(super) fn get_009254() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009255() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009253() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009254(), get_009255()))
      }
      pub(super) fn get_009256() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009252() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009253(),
          vec![get_009256()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009246() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009247(),
          CoreBinaryOperator::Plus(None),
          get_009252(),
        ))
      }
      pub(super) fn get_009245() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009246()))
      }
      pub(super) fn get_009258() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("render_int", 203u32)
        }))
      }
      pub(super) fn get_009260() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009262() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009261() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Minus(None),
          get_009262(),
        ))
      }
      pub(super) fn get_009259() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009260(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_009261(),
        ))
      }
      pub(super) fn get_009265() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009266() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("floor"))
      }
      pub(super) fn get_009264() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009265(), get_009266()))
      }
      pub(super) fn get_009269() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009270() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("abs"))
      }
      pub(super) fn get_009268() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009269(), get_009270()))
      }
      pub(super) fn get_009271() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009267() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009268(),
          vec![get_009271()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009263() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009264(),
          vec![get_009267()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009272() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp", 277u32)
        }))
      }
      pub(super) fn get_009273() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("iprec", 276u32)
        }))
      }
      pub(super) fn get_009275() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009276() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("blank"))
      }
      pub(super) fn get_009274() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009275(), get_009276()))
      }
      pub(super) fn get_009278() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009279() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("plus"))
      }
      pub(super) fn get_009277() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009278(), get_009279()))
      }
      pub(super) fn get_009280() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_009281() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_009257() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009258(),
          vec![
            get_009259(),
            get_009263(),
            get_009272(),
            get_009273(),
            get_009274(),
            get_009277(),
            get_009280(),
            get_009281(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009233() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009234(), get_009245(), get_009257()))
      }
      pub(super) fn get_009285() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009286() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009284() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009285(), get_009286()))
      }
      pub(super) fn get_009288() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009289() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_009287() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009288(), get_009289()))
      }
      pub(super) fn get_009290() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("o"))
      }
      pub(super) fn get_009283() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009284(),
          vec![get_009287(), get_009290()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009295() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009296() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009294() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009295(), get_009296()))
      }
      pub(super) fn get_009299() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009300() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009298() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009299(), get_009300()))
      }
      pub(super) fn get_009301() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009297() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009298(),
          vec![get_009301()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009302() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("number"))
      }
      pub(super) fn get_009293() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009294(),
          vec![get_009297(), get_009302()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009292() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_009293(),
        ))
      }
      pub(super) fn get_009307() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Format required number at "))
      }
      pub(super) fn get_009308() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 273u32)
        }))
      }
      pub(super) fn get_009306() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009307(),
          CoreBinaryOperator::Plus(None),
          get_009308(),
        ))
      }
      pub(super) fn get_009309() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(", got "))
      }
      pub(super) fn get_009305() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009306(),
          CoreBinaryOperator::Plus(None),
          get_009309(),
        ))
      }
      pub(super) fn get_009312() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009313() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009311() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009312(), get_009313()))
      }
      pub(super) fn get_009314() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009310() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009311(),
          vec![get_009314()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009304() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009305(),
          CoreBinaryOperator::Plus(None),
          get_009310(),
        ))
      }
      pub(super) fn get_009303() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009304()))
      }
      pub(super) fn get_009318() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009319() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("alt"))
      }
      pub(super) fn get_009317() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009318(), get_009319()))
      }
      pub(super) fn get_009320() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_009321() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_009316() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009317(), get_009320(), get_009321()))
      }
      pub(super) fn get_009323() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("render_int", 203u32)
        }))
      }
      pub(super) fn get_009325() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009327() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009326() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Minus(None),
          get_009327(),
        ))
      }
      pub(super) fn get_009324() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009325(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_009326(),
        ))
      }
      pub(super) fn get_009330() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009331() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("floor"))
      }
      pub(super) fn get_009329() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009330(), get_009331()))
      }
      pub(super) fn get_009334() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009335() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("abs"))
      }
      pub(super) fn get_009333() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009334(), get_009335()))
      }
      pub(super) fn get_009336() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009332() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009333(),
          vec![get_009336()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009328() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009329(),
          vec![get_009332()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009337() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp", 277u32)
        }))
      }
      pub(super) fn get_009338() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("iprec", 276u32)
        }))
      }
      pub(super) fn get_009340() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009341() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("blank"))
      }
      pub(super) fn get_009339() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009340(), get_009341()))
      }
      pub(super) fn get_009343() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009344() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("plus"))
      }
      pub(super) fn get_009342() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009343(), get_009344()))
      }
      pub(super) fn get_009345() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(8f64))
      }
      pub(super) fn get_009346() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_prefix", 278u32)
        }))
      }
      pub(super) fn get_009322() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009323(),
          vec![
            get_009324(),
            get_009328(),
            get_009337(),
            get_009338(),
            get_009339(),
            get_009342(),
            get_009345(),
            get_009346(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009315() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_prefix", 278u32) },
            get_009316(),
          )],
          get_009322(),
        ))
      }
      pub(super) fn get_009291() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009292(), get_009303(), get_009315()))
      }
      pub(super) fn get_009350() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009351() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009349() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009350(), get_009351()))
      }
      pub(super) fn get_009353() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009354() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_009352() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009353(), get_009354()))
      }
      pub(super) fn get_009355() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("x"))
      }
      pub(super) fn get_009348() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009349(),
          vec![get_009352(), get_009355()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009360() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009361() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009359() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009360(), get_009361()))
      }
      pub(super) fn get_009364() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009365() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009363() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009364(), get_009365()))
      }
      pub(super) fn get_009366() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009362() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009363(),
          vec![get_009366()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009367() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("number"))
      }
      pub(super) fn get_009358() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009359(),
          vec![get_009362(), get_009367()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009357() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_009358(),
        ))
      }
      pub(super) fn get_009372() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Format required number at "))
      }
      pub(super) fn get_009373() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 273u32)
        }))
      }
      pub(super) fn get_009371() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009372(),
          CoreBinaryOperator::Plus(None),
          get_009373(),
        ))
      }
      pub(super) fn get_009374() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(", got "))
      }
      pub(super) fn get_009370() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009371(),
          CoreBinaryOperator::Plus(None),
          get_009374(),
        ))
      }
      pub(super) fn get_009377() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009378() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009376() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009377(), get_009378()))
      }
      pub(super) fn get_009379() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009375() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009376(),
          vec![get_009379()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009369() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009370(),
          CoreBinaryOperator::Plus(None),
          get_009375(),
        ))
      }
      pub(super) fn get_009368() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009369()))
      }
      pub(super) fn get_009381() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("render_hex", 218u32)
        }))
      }
      pub(super) fn get_009384() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009385() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("floor"))
      }
      pub(super) fn get_009383() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009384(), get_009385()))
      }
      pub(super) fn get_009386() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009382() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009383(),
          vec![get_009386()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009387() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp", 277u32)
        }))
      }
      pub(super) fn get_009388() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("iprec", 276u32)
        }))
      }
      pub(super) fn get_009390() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009391() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("blank"))
      }
      pub(super) fn get_009389() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009390(), get_009391()))
      }
      pub(super) fn get_009393() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009394() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("plus"))
      }
      pub(super) fn get_009392() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009393(), get_009394()))
      }
      pub(super) fn get_009396() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009397() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("alt"))
      }
      pub(super) fn get_009395() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009396(), get_009397()))
      }
      pub(super) fn get_009399() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009400() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_009398() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009399(), get_009400()))
      }
      pub(super) fn get_009380() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009381(),
          vec![
            get_009382(),
            get_009387(),
            get_009388(),
            get_009389(),
            get_009392(),
            get_009395(),
            get_009398(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009356() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009357(), get_009368(), get_009380()))
      }
      pub(super) fn get_009404() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009405() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009403() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009404(), get_009405()))
      }
      pub(super) fn get_009407() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009408() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_009406() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009407(), get_009408()))
      }
      pub(super) fn get_009409() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("f"))
      }
      pub(super) fn get_009402() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009403(),
          vec![get_009406(), get_009409()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009414() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009415() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009413() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009414(), get_009415()))
      }
      pub(super) fn get_009418() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009419() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009417() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009418(), get_009419()))
      }
      pub(super) fn get_009420() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009416() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009417(),
          vec![get_009420()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009421() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("number"))
      }
      pub(super) fn get_009412() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009413(),
          vec![get_009416(), get_009421()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009411() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_009412(),
        ))
      }
      pub(super) fn get_009426() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Format required number at "))
      }
      pub(super) fn get_009427() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 273u32)
        }))
      }
      pub(super) fn get_009425() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009426(),
          CoreBinaryOperator::Plus(None),
          get_009427(),
        ))
      }
      pub(super) fn get_009428() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(", got "))
      }
      pub(super) fn get_009424() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009425(),
          CoreBinaryOperator::Plus(None),
          get_009428(),
        ))
      }
      pub(super) fn get_009431() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009432() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009430() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009431(), get_009432()))
      }
      pub(super) fn get_009433() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009429() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009430(),
          vec![get_009433()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009423() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009424(),
          CoreBinaryOperator::Plus(None),
          get_009429(),
        ))
      }
      pub(super) fn get_009422() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009423()))
      }
      pub(super) fn get_009435() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("render_float_dec", 240u32)
        }))
      }
      pub(super) fn get_009436() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009437() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp", 277u32)
        }))
      }
      pub(super) fn get_009439() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009440() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("blank"))
      }
      pub(super) fn get_009438() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009439(), get_009440()))
      }
      pub(super) fn get_009442() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009443() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("plus"))
      }
      pub(super) fn get_009441() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009442(), get_009443()))
      }
      pub(super) fn get_009445() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009446() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("alt"))
      }
      pub(super) fn get_009444() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009445(), get_009446()))
      }
      pub(super) fn get_009447() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_009448() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fpprec", 275u32)
        }))
      }
      pub(super) fn get_009434() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009435(),
          vec![
            get_009436(),
            get_009437(),
            get_009438(),
            get_009441(),
            get_009444(),
            get_009447(),
            get_009448(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009410() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009411(), get_009422(), get_009434()))
      }
      pub(super) fn get_009452() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009453() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009451() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009452(), get_009453()))
      }
      pub(super) fn get_009455() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009456() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_009454() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009455(), get_009456()))
      }
      pub(super) fn get_009457() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("e"))
      }
      pub(super) fn get_009450() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009451(),
          vec![get_009454(), get_009457()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009462() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009463() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009461() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009462(), get_009463()))
      }
      pub(super) fn get_009466() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009467() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009465() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009466(), get_009467()))
      }
      pub(super) fn get_009468() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009464() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009465(),
          vec![get_009468()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009469() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("number"))
      }
      pub(super) fn get_009460() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009461(),
          vec![get_009464(), get_009469()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009459() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_009460(),
        ))
      }
      pub(super) fn get_009474() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Format required number at "))
      }
      pub(super) fn get_009475() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 273u32)
        }))
      }
      pub(super) fn get_009473() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009474(),
          CoreBinaryOperator::Plus(None),
          get_009475(),
        ))
      }
      pub(super) fn get_009476() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(", got "))
      }
      pub(super) fn get_009472() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009473(),
          CoreBinaryOperator::Plus(None),
          get_009476(),
        ))
      }
      pub(super) fn get_009479() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009480() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009478() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009479(), get_009480()))
      }
      pub(super) fn get_009481() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009477() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009478(),
          vec![get_009481()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009471() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009472(),
          CoreBinaryOperator::Plus(None),
          get_009477(),
        ))
      }
      pub(super) fn get_009470() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009471()))
      }
      pub(super) fn get_009483() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("render_float_sci", 255u32)
        }))
      }
      pub(super) fn get_009484() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009485() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp", 277u32)
        }))
      }
      pub(super) fn get_009487() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009488() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("blank"))
      }
      pub(super) fn get_009486() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009487(), get_009488()))
      }
      pub(super) fn get_009490() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009491() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("plus"))
      }
      pub(super) fn get_009489() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009490(), get_009491()))
      }
      pub(super) fn get_009493() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009494() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("alt"))
      }
      pub(super) fn get_009492() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009493(), get_009494()))
      }
      pub(super) fn get_009495() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_009497() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009498() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_009496() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009497(), get_009498()))
      }
      pub(super) fn get_009499() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fpprec", 275u32)
        }))
      }
      pub(super) fn get_009482() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009483(),
          vec![
            get_009484(),
            get_009485(),
            get_009486(),
            get_009489(),
            get_009492(),
            get_009495(),
            get_009496(),
            get_009499(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009458() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009459(), get_009470(), get_009482()))
      }
      pub(super) fn get_009503() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009504() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009502() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009503(), get_009504()))
      }
      pub(super) fn get_009506() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009507() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_009505() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009506(), get_009507()))
      }
      pub(super) fn get_009508() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("g"))
      }
      pub(super) fn get_009501() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009502(),
          vec![get_009505(), get_009508()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009513() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009514() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009512() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009513(), get_009514()))
      }
      pub(super) fn get_009517() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009518() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009516() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009517(), get_009518()))
      }
      pub(super) fn get_009519() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009515() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009516(),
          vec![get_009519()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009520() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("number"))
      }
      pub(super) fn get_009511() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009512(),
          vec![get_009515(), get_009520()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009510() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_009511(),
        ))
      }
      pub(super) fn get_009525() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Format required number at "))
      }
      pub(super) fn get_009526() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 273u32)
        }))
      }
      pub(super) fn get_009524() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009525(),
          CoreBinaryOperator::Plus(None),
          get_009526(),
        ))
      }
      pub(super) fn get_009527() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(", got "))
      }
      pub(super) fn get_009523() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009524(),
          CoreBinaryOperator::Plus(None),
          get_009527(),
        ))
      }
      pub(super) fn get_009530() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009531() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009529() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009530(), get_009531()))
      }
      pub(super) fn get_009532() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009528() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009529(),
          vec![get_009532()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009522() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009523(),
          CoreBinaryOperator::Plus(None),
          get_009528(),
        ))
      }
      pub(super) fn get_009521() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009522()))
      }
      pub(super) fn get_009536() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009537() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("floor"))
      }
      pub(super) fn get_009535() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009536(), get_009537()))
      }
      pub(super) fn get_009541() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009542() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("log"))
      }
      pub(super) fn get_009540() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009541(), get_009542()))
      }
      pub(super) fn get_009545() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009546() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("abs"))
      }
      pub(super) fn get_009544() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009545(), get_009546()))
      }
      pub(super) fn get_009547() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009543() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009544(),
          vec![get_009547()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009539() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009540(),
          vec![get_009543()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009550() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009551() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("log"))
      }
      pub(super) fn get_009549() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009550(), get_009551()))
      }
      pub(super) fn get_009552() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_009548() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009549(),
          vec![get_009552()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009538() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009539(),
          CoreBinaryOperator::Div(None),
          get_009548(),
        ))
      }
      pub(super) fn get_009534() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009535(),
          vec![get_009538()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009556() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("exponent", 279u32)
        }))
      }
      pub(super) fn get_009559() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(4f64))
      }
      pub(super) fn get_009558() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Minus(None),
          get_009559(),
        ))
      }
      pub(super) fn get_009560() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("exponent", 279u32)
        }))
      }
      pub(super) fn get_009557() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009558(),
          CoreBinaryOperator::Or(None),
          get_009560(),
        ))
      }
      pub(super) fn get_009555() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009556(),
          CoreBinaryOperator::LessThan(None),
          get_009557(),
        ))
      }
      pub(super) fn get_009561() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fpprec", 275u32)
        }))
      }
      pub(super) fn get_009554() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009555(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_009561(),
        ))
      }
      pub(super) fn get_009563() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("render_float_sci", 255u32)
        }))
      }
      pub(super) fn get_009564() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009565() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp", 277u32)
        }))
      }
      pub(super) fn get_009567() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009568() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("blank"))
      }
      pub(super) fn get_009566() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009567(), get_009568()))
      }
      pub(super) fn get_009570() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009571() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("plus"))
      }
      pub(super) fn get_009569() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009570(), get_009571()))
      }
      pub(super) fn get_009573() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009574() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("alt"))
      }
      pub(super) fn get_009572() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009573(), get_009574()))
      }
      pub(super) fn get_009576() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009577() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("alt"))
      }
      pub(super) fn get_009575() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009576(), get_009577()))
      }
      pub(super) fn get_009579() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009580() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("caps"))
      }
      pub(super) fn get_009578() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009579(), get_009580()))
      }
      pub(super) fn get_009582() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fpprec", 275u32)
        }))
      }
      pub(super) fn get_009583() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009581() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009582(),
          CoreBinaryOperator::Minus(None),
          get_009583(),
        ))
      }
      pub(super) fn get_009562() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009563(),
          vec![
            get_009564(),
            get_009565(),
            get_009566(),
            get_009569(),
            get_009572(),
            get_009575(),
            get_009578(),
            get_009581(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009587() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009588() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("max"))
      }
      pub(super) fn get_009586() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009587(), get_009588()))
      }
      pub(super) fn get_009589() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009591() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("exponent", 279u32)
        }))
      }
      pub(super) fn get_009592() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009590() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009591(),
          CoreBinaryOperator::Plus(None),
          get_009592(),
        ))
      }
      pub(super) fn get_009585() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009586(),
          vec![get_009589(), get_009590()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009594() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("render_float_dec", 240u32)
        }))
      }
      pub(super) fn get_009595() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009596() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zp", 277u32)
        }))
      }
      pub(super) fn get_009598() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009599() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("blank"))
      }
      pub(super) fn get_009597() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009598(), get_009599()))
      }
      pub(super) fn get_009601() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009602() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("plus"))
      }
      pub(super) fn get_009600() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009601(), get_009602()))
      }
      pub(super) fn get_009604() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009605() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("alt"))
      }
      pub(super) fn get_009603() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009604(), get_009605()))
      }
      pub(super) fn get_009607() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cflags", 274u32)
        }))
      }
      pub(super) fn get_009608() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("alt"))
      }
      pub(super) fn get_009606() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009607(), get_009608()))
      }
      pub(super) fn get_009610() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fpprec", 275u32)
        }))
      }
      pub(super) fn get_009611() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digits_before_pt", 280u32)
        }))
      }
      pub(super) fn get_009609() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009610(),
          CoreBinaryOperator::Minus(None),
          get_009611(),
        ))
      }
      pub(super) fn get_009593() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009594(),
          vec![
            get_009595(),
            get_009596(),
            get_009597(),
            get_009600(),
            get_009603(),
            get_009606(),
            get_009609(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009584() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digits_before_pt", 280u32) },
            get_009585(),
          )],
          get_009593(),
        ))
      }
      pub(super) fn get_009553() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009554(), get_009562(), get_009584()))
      }
      pub(super) fn get_009533() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("exponent", 279u32) },
            get_009534(),
          )],
          get_009553(),
        ))
      }
      pub(super) fn get_009509() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009510(), get_009521(), get_009533()))
      }
      pub(super) fn get_009615() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009616() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009614() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009615(), get_009616()))
      }
      pub(super) fn get_009618() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009619() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_009617() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009618(), get_009619()))
      }
      pub(super) fn get_009620() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("c"))
      }
      pub(super) fn get_009613() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009614(),
          vec![get_009617(), get_009620()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009624() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009625() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009623() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009624(), get_009625()))
      }
      pub(super) fn get_009628() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009629() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009627() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009628(), get_009629()))
      }
      pub(super) fn get_009630() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009626() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009627(),
          vec![get_009630()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009631() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("number"))
      }
      pub(super) fn get_009622() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009623(),
          vec![get_009626(), get_009631()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009634() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009635() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("char"))
      }
      pub(super) fn get_009633() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009634(), get_009635()))
      }
      pub(super) fn get_009636() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009632() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009633(),
          vec![get_009636()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009640() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009641() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009639() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009640(), get_009641()))
      }
      pub(super) fn get_009644() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009645() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009643() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009644(), get_009645()))
      }
      pub(super) fn get_009646() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009642() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009643(),
          vec![get_009646()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009647() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("string"))
      }
      pub(super) fn get_009638() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009639(),
          vec![get_009642(), get_009647()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009651() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009652() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009650() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009651(), get_009652()))
      }
      pub(super) fn get_009655() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009656() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009654() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009655(), get_009656()))
      }
      pub(super) fn get_009657() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009653() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009654(),
          vec![get_009657()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009658() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009649() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009650(),
          vec![get_009653(), get_009658()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009659() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009662() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%c expected 1-sized string got: "))
      }
      pub(super) fn get_009665() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009666() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009664() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009665(), get_009666()))
      }
      pub(super) fn get_009667() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009663() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009664(),
          vec![get_009667()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009661() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009662(),
          CoreBinaryOperator::Plus(None),
          get_009663(),
        ))
      }
      pub(super) fn get_009660() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009661()))
      }
      pub(super) fn get_009648() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009649(), get_009659(), get_009660()))
      }
      pub(super) fn get_009670() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "%c expected number / string, got: ",
        ))
      }
      pub(super) fn get_009673() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009674() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009672() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009673(), get_009674()))
      }
      pub(super) fn get_009675() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 269u32)
        }))
      }
      pub(super) fn get_009671() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009672(),
          vec![get_009675()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009669() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009670(),
          CoreBinaryOperator::Plus(None),
          get_009671(),
        ))
      }
      pub(super) fn get_009668() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009669()))
      }
      pub(super) fn get_009637() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009638(), get_009648(), get_009668()))
      }
      pub(super) fn get_009621() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009622(), get_009632(), get_009637()))
      }
      pub(super) fn get_009678() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Unknown code: "))
      }
      pub(super) fn get_009680() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 270u32)
        }))
      }
      pub(super) fn get_009681() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_009679() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009680(), get_009681()))
      }
      pub(super) fn get_009677() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009678(),
          CoreBinaryOperator::Plus(None),
          get_009679(),
        ))
      }
      pub(super) fn get_009676() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009677()))
      }
      pub(super) fn get_009612() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009613(), get_009621(), get_009676()))
      }
      pub(super) fn get_009500() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009501(), get_009509(), get_009612()))
      }
      pub(super) fn get_009449() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009450(), get_009458(), get_009500()))
      }
      pub(super) fn get_009401() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009402(), get_009410(), get_009449()))
      }
      pub(super) fn get_009347() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009348(), get_009356(), get_009401()))
      }
      pub(super) fn get_009282() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009283(), get_009291(), get_009347()))
      }
      pub(super) fn get_009224() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009225(), get_009233(), get_009282()))
      }
      pub(super) fn get_009210() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009211(), get_009219(), get_009224()))
      }
      pub(super) fn get_009198() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zp", 277u32) },
            get_009199(),
          )],
          get_009210(),
        ))
      }
      pub(super) fn get_009187() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("iprec", 276u32) },
            get_009188(),
          )],
          get_009198(),
        ))
      }
      pub(super) fn get_009176() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("fpprec", 275u32) },
            get_009177(),
          )],
          get_009187(),
        ))
      }
      pub(super) fn get_009172() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("cflags", 274u32) },
            get_009173(),
          )],
          get_009176(),
        ))
      }
      pub(super) fn get_009161() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("val", 269u32) },
              get_009162(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("code", 270u32) },
              get_009164(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("fw", 271u32) },
              get_009166(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("prec_or_null", 272u32) },
              get_009168(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 273u32) },
              get_009170(),
            ),
          ],
          get_009172(),
        ))
      }
      pub(super) fn get_009685() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'codes' not bound"))
      }
      pub(super) fn get_009684() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009685()))
      }
      pub(super) fn get_009687() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_009686() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009687()))
      }
      pub(super) fn get_009689() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_009688() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009689()))
      }
      pub(super) fn get_009691() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'j' not bound"))
      }
      pub(super) fn get_009690() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009691()))
      }
      pub(super) fn get_009693() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_009692() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009693()))
      }
      pub(super) fn get_009696() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 284u32)
        }))
      }
      pub(super) fn get_009699() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009700() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009698() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009699(), get_009700()))
      }
      pub(super) fn get_009701() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("codes", 282u32)
        }))
      }
      pub(super) fn get_009697() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009698(),
          vec![get_009701()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009695() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009696(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_009697(),
        ))
      }
      pub(super) fn get_009704() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 285u32)
        }))
      }
      pub(super) fn get_009707() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009708() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009706() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009707(), get_009708()))
      }
      pub(super) fn get_009709() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009705() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009706(),
          vec![get_009709()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009703() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009704(),
          CoreBinaryOperator::LessThan(None),
          get_009705(),
        ))
      }
      pub(super) fn get_009714() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Too many values to format: "))
      }
      pub(super) fn get_009717() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009718() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009716() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009717(), get_009718()))
      }
      pub(super) fn get_009719() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009715() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009716(),
          vec![get_009719()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009713() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009714(),
          CoreBinaryOperator::Plus(None),
          get_009715(),
        ))
      }
      pub(super) fn get_009720() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(", expected "))
      }
      pub(super) fn get_009712() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009713(),
          CoreBinaryOperator::Plus(None),
          get_009720(),
        ))
      }
      pub(super) fn get_009721() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 285u32)
        }))
      }
      pub(super) fn get_009711() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009712(),
          CoreBinaryOperator::Plus(None),
          get_009721(),
        ))
      }
      pub(super) fn get_009710() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009711()))
      }
      pub(super) fn get_009722() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 286u32)
        }))
      }
      pub(super) fn get_009702() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009703(), get_009710(), get_009722()))
      }
      pub(super) fn get_009725() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("codes", 282u32)
        }))
      }
      pub(super) fn get_009726() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 284u32)
        }))
      }
      pub(super) fn get_009724() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009725(), get_009726()))
      }
      pub(super) fn get_009730() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009731() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009729() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009730(), get_009731()))
      }
      pub(super) fn get_009734() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009735() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009733() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009734(), get_009735()))
      }
      pub(super) fn get_009736() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 287u32)
        }))
      }
      pub(super) fn get_009732() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009733(),
          vec![get_009736()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009737() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("string"))
      }
      pub(super) fn get_009728() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009729(),
          vec![get_009732(), get_009737()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009739() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("format_codes_arr", 281u32)
        }))
      }
      pub(super) fn get_009740() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("codes", 282u32)
        }))
      }
      pub(super) fn get_009741() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009743() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 284u32)
        }))
      }
      pub(super) fn get_009744() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009742() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009743(),
          CoreBinaryOperator::Plus(None),
          get_009744(),
        ))
      }
      pub(super) fn get_009745() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 285u32)
        }))
      }
      pub(super) fn get_009747() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 286u32)
        }))
      }
      pub(super) fn get_009748() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 287u32)
        }))
      }
      pub(super) fn get_009746() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009747(),
          CoreBinaryOperator::Plus(None),
          get_009748(),
        ))
      }
      pub(super) fn get_009738() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009739(),
          vec![
            get_009740(),
            get_009741(),
            get_009742(),
            get_009745(),
            get_009746(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_009753() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009754() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009752() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009753(), get_009754()))
      }
      pub(super) fn get_009756() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 287u32)
        }))
      }
      pub(super) fn get_009757() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("fw"))
      }
      pub(super) fn get_009755() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009756(), get_009757()))
      }
      pub(super) fn get_009758() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("*"))
      }
      pub(super) fn get_009751() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009752(),
          vec![get_009755(), get_009758()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009760() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("j"))
      }
      pub(super) fn get_009763() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 285u32)
        }))
      }
      pub(super) fn get_009764() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009762() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009763(),
          CoreBinaryOperator::Plus(None),
          get_009764(),
        ))
      }
      pub(super) fn get_009761() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_009762()))
      }
      pub(super) fn get_009765() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("fw"))
      }
      pub(super) fn get_009769() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 285u32)
        }))
      }
      pub(super) fn get_009772() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009773() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009771() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009772(), get_009773()))
      }
      pub(super) fn get_009774() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009770() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009771(),
          vec![get_009774()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009768() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009769(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_009770(),
        ))
      }
      pub(super) fn get_009779() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Not enough values to format: "))
      }
      pub(super) fn get_009782() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009783() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009781() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009782(), get_009783()))
      }
      pub(super) fn get_009784() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009780() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009781(),
          vec![get_009784()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009778() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009779(),
          CoreBinaryOperator::Plus(None),
          get_009780(),
        ))
      }
      pub(super) fn get_009785() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(", expected at least "))
      }
      pub(super) fn get_009777() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009778(),
          CoreBinaryOperator::Plus(None),
          get_009785(),
        ))
      }
      pub(super) fn get_009786() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 285u32)
        }))
      }
      pub(super) fn get_009776() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009777(),
          CoreBinaryOperator::Plus(None),
          get_009786(),
        ))
      }
      pub(super) fn get_009775() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009776()))
      }
      pub(super) fn get_009788() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009789() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 285u32)
        }))
      }
      pub(super) fn get_009787() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009788(), get_009789()))
      }
      pub(super) fn get_009767() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009768(), get_009775(), get_009787()))
      }
      pub(super) fn get_009766() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_009767()))
      }
      pub(super) fn get_009759() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_009760(),
              CoreObjectFieldOperator::Default(None),
              get_009761(),
            ),
            CoreObjectField::new(
              get_009765(),
              CoreObjectFieldOperator::Default(None),
              get_009766(),
            ),
          ],
        ))
      }
      pub(super) fn get_009791() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("j"))
      }
      pub(super) fn get_009793() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 285u32)
        }))
      }
      pub(super) fn get_009792() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_009793()))
      }
      pub(super) fn get_009794() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("fw"))
      }
      pub(super) fn get_009797() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 287u32)
        }))
      }
      pub(super) fn get_009798() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("fw"))
      }
      pub(super) fn get_009796() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009797(), get_009798()))
      }
      pub(super) fn get_009795() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_009796()))
      }
      pub(super) fn get_009790() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_009791(),
              CoreObjectFieldOperator::Default(None),
              get_009792(),
            ),
            CoreObjectField::new(
              get_009794(),
              CoreObjectFieldOperator::Default(None),
              get_009795(),
            ),
          ],
        ))
      }
      pub(super) fn get_009750() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009751(), get_009759(), get_009790()))
      }
      pub(super) fn get_009803() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009804() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009802() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009803(), get_009804()))
      }
      pub(super) fn get_009806() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 287u32)
        }))
      }
      pub(super) fn get_009807() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prec"))
      }
      pub(super) fn get_009805() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009806(), get_009807()))
      }
      pub(super) fn get_009808() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("*"))
      }
      pub(super) fn get_009801() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009802(),
          vec![get_009805(), get_009808()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009810() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("j"))
      }
      pub(super) fn get_009814() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tmp", 288u32)
        }))
      }
      pub(super) fn get_009815() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("j"))
      }
      pub(super) fn get_009813() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009814(), get_009815()))
      }
      pub(super) fn get_009816() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009812() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009813(),
          CoreBinaryOperator::Plus(None),
          get_009816(),
        ))
      }
      pub(super) fn get_009811() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_009812()))
      }
      pub(super) fn get_009817() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prec"))
      }
      pub(super) fn get_009822() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tmp", 288u32)
        }))
      }
      pub(super) fn get_009823() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("j"))
      }
      pub(super) fn get_009821() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009822(), get_009823()))
      }
      pub(super) fn get_009826() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009827() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009825() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009826(), get_009827()))
      }
      pub(super) fn get_009828() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009824() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009825(),
          vec![get_009828()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009820() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009821(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_009824(),
        ))
      }
      pub(super) fn get_009833() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Not enough values to format: "))
      }
      pub(super) fn get_009836() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009837() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009835() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009836(), get_009837()))
      }
      pub(super) fn get_009838() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009834() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009835(),
          vec![get_009838()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009832() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009833(),
          CoreBinaryOperator::Plus(None),
          get_009834(),
        ))
      }
      pub(super) fn get_009839() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(", expected at least "))
      }
      pub(super) fn get_009831() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009832(),
          CoreBinaryOperator::Plus(None),
          get_009839(),
        ))
      }
      pub(super) fn get_009841() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tmp", 288u32)
        }))
      }
      pub(super) fn get_009842() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("j"))
      }
      pub(super) fn get_009840() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009841(), get_009842()))
      }
      pub(super) fn get_009830() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009831(),
          CoreBinaryOperator::Plus(None),
          get_009840(),
        ))
      }
      pub(super) fn get_009829() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009830()))
      }
      pub(super) fn get_009844() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009846() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tmp", 288u32)
        }))
      }
      pub(super) fn get_009847() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("j"))
      }
      pub(super) fn get_009845() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009846(), get_009847()))
      }
      pub(super) fn get_009843() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009844(), get_009845()))
      }
      pub(super) fn get_009819() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009820(), get_009829(), get_009843()))
      }
      pub(super) fn get_009818() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_009819()))
      }
      pub(super) fn get_009809() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_009810(),
              CoreObjectFieldOperator::Default(None),
              get_009811(),
            ),
            CoreObjectField::new(
              get_009817(),
              CoreObjectFieldOperator::Default(None),
              get_009818(),
            ),
          ],
        ))
      }
      pub(super) fn get_009849() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("j"))
      }
      pub(super) fn get_009852() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tmp", 288u32)
        }))
      }
      pub(super) fn get_009853() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("j"))
      }
      pub(super) fn get_009851() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009852(), get_009853()))
      }
      pub(super) fn get_009850() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_009851()))
      }
      pub(super) fn get_009854() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prec"))
      }
      pub(super) fn get_009857() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 287u32)
        }))
      }
      pub(super) fn get_009858() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prec"))
      }
      pub(super) fn get_009856() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009857(), get_009858()))
      }
      pub(super) fn get_009855() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_009856()))
      }
      pub(super) fn get_009848() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_009849(),
              CoreObjectFieldOperator::Default(None),
              get_009850(),
            ),
            CoreObjectField::new(
              get_009854(),
              CoreObjectFieldOperator::Default(None),
              get_009855(),
            ),
          ],
        ))
      }
      pub(super) fn get_009800() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009801(), get_009809(), get_009848()))
      }
      pub(super) fn get_009861() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tmp2", 289u32)
        }))
      }
      pub(super) fn get_009862() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("j"))
      }
      pub(super) fn get_009860() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009861(), get_009862()))
      }
      pub(super) fn get_009866() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j2", 290u32)
        }))
      }
      pub(super) fn get_009869() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009870() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009868() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009869(), get_009870()))
      }
      pub(super) fn get_009871() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009867() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009868(),
          vec![get_009871()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009865() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009866(),
          CoreBinaryOperator::LessThan(None),
          get_009867(),
        ))
      }
      pub(super) fn get_009873() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009874() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j2", 290u32)
        }))
      }
      pub(super) fn get_009872() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009873(), get_009874()))
      }
      pub(super) fn get_009879() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Not enough values to format: "))
      }
      pub(super) fn get_009882() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009883() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009881() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009882(), get_009883()))
      }
      pub(super) fn get_009884() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009880() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009881(),
          vec![get_009884()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009878() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009879(),
          CoreBinaryOperator::Plus(None),
          get_009880(),
        ))
      }
      pub(super) fn get_009885() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(", expected more than "))
      }
      pub(super) fn get_009877() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009878(),
          CoreBinaryOperator::Plus(None),
          get_009885(),
        ))
      }
      pub(super) fn get_009886() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j2", 290u32)
        }))
      }
      pub(super) fn get_009876() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009877(),
          CoreBinaryOperator::Plus(None),
          get_009886(),
        ))
      }
      pub(super) fn get_009875() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009876()))
      }
      pub(super) fn get_009864() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009865(), get_009872(), get_009875()))
      }
      pub(super) fn get_009891() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009892() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009890() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009891(), get_009892()))
      }
      pub(super) fn get_009894() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 287u32)
        }))
      }
      pub(super) fn get_009895() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_009893() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009894(), get_009895()))
      }
      pub(super) fn get_009896() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%"))
      }
      pub(super) fn get_009889() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009890(),
          vec![get_009893(), get_009896()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009897() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%"))
      }
      pub(super) fn get_009899() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("format_code", 268u32)
        }))
      }
      pub(super) fn get_009900() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 291u32)
        }))
      }
      pub(super) fn get_009901() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 287u32)
        }))
      }
      pub(super) fn get_009903() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tmp", 288u32)
        }))
      }
      pub(super) fn get_009904() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("fw"))
      }
      pub(super) fn get_009902() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009903(), get_009904()))
      }
      pub(super) fn get_009906() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tmp2", 289u32)
        }))
      }
      pub(super) fn get_009907() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prec"))
      }
      pub(super) fn get_009905() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009906(), get_009907()))
      }
      pub(super) fn get_009908() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j2", 290u32)
        }))
      }
      pub(super) fn get_009898() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009899(),
          vec![
            get_009900(),
            get_009901(),
            get_009902(),
            get_009905(),
            get_009908(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009888() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009889(), get_009897(), get_009898()))
      }
      pub(super) fn get_009913() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 287u32)
        }))
      }
      pub(super) fn get_009914() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("cflags"))
      }
      pub(super) fn get_009912() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009913(), get_009914()))
      }
      pub(super) fn get_009915() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("left"))
      }
      pub(super) fn get_009911() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009912(), get_009915()))
      }
      pub(super) fn get_009917() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pad_right", 199u32)
        }))
      }
      pub(super) fn get_009918() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("s", 292u32)
        }))
      }
      pub(super) fn get_009920() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tmp", 288u32)
        }))
      }
      pub(super) fn get_009921() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("fw"))
      }
      pub(super) fn get_009919() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009920(), get_009921()))
      }
      pub(super) fn get_009922() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" "))
      }
      pub(super) fn get_009916() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009917(),
          vec![get_009918(), get_009919(), get_009922()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009924() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pad_left", 195u32)
        }))
      }
      pub(super) fn get_009925() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("s", 292u32)
        }))
      }
      pub(super) fn get_009927() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tmp", 288u32)
        }))
      }
      pub(super) fn get_009928() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("fw"))
      }
      pub(super) fn get_009926() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009927(), get_009928()))
      }
      pub(super) fn get_009929() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" "))
      }
      pub(super) fn get_009923() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009924(),
          vec![get_009925(), get_009926(), get_009929()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009910() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009911(), get_009916(), get_009923()))
      }
      pub(super) fn get_009934() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009935() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009933() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009934(), get_009935()))
      }
      pub(super) fn get_009937() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 287u32)
        }))
      }
      pub(super) fn get_009938() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_009936() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009937(), get_009938()))
      }
      pub(super) fn get_009939() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%"))
      }
      pub(super) fn get_009932() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009933(),
          vec![get_009936(), get_009939()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009940() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j2", 290u32)
        }))
      }
      pub(super) fn get_009942() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j2", 290u32)
        }))
      }
      pub(super) fn get_009943() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009941() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009942(),
          CoreBinaryOperator::Plus(None),
          get_009943(),
        ))
      }
      pub(super) fn get_009931() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009932(), get_009940(), get_009941()))
      }
      pub(super) fn get_009945() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("format_codes_arr", 281u32)
        }))
      }
      pub(super) fn get_009946() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("codes", 282u32)
        }))
      }
      pub(super) fn get_009947() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 283u32)
        }))
      }
      pub(super) fn get_009949() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 284u32)
        }))
      }
      pub(super) fn get_009950() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009948() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009949(),
          CoreBinaryOperator::Plus(None),
          get_009950(),
        ))
      }
      pub(super) fn get_009951() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j3", 294u32)
        }))
      }
      pub(super) fn get_009953() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 286u32)
        }))
      }
      pub(super) fn get_009954() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("s_padded", 293u32)
        }))
      }
      pub(super) fn get_009952() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009953(),
          CoreBinaryOperator::Plus(None),
          get_009954(),
        ))
      }
      pub(super) fn get_009944() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009945(),
          vec![
            get_009946(),
            get_009947(),
            get_009948(),
            get_009951(),
            get_009952(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_009930() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("j3", 294u32) },
            get_009931(),
          )],
          get_009944(),
        ))
      }
      pub(super) fn get_009909() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("s_padded", 293u32) },
            get_009910(),
          )],
          get_009930(),
        ))
      }
      pub(super) fn get_009887() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("s", 292u32) },
            get_009888(),
          )],
          get_009909(),
        ))
      }
      pub(super) fn get_009863() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("val", 291u32) },
            get_009864(),
          )],
          get_009887(),
        ))
      }
      pub(super) fn get_009859() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("j2", 290u32) },
            get_009860(),
          )],
          get_009863(),
        ))
      }
      pub(super) fn get_009799() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("tmp2", 289u32) },
            get_009800(),
          )],
          get_009859(),
        ))
      }
      pub(super) fn get_009749() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("tmp", 288u32) },
            get_009750(),
          )],
          get_009799(),
        ))
      }
      pub(super) fn get_009727() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009728(), get_009738(), get_009749()))
      }
      pub(super) fn get_009723() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 287u32) },
            get_009724(),
          )],
          get_009727(),
        ))
      }
      pub(super) fn get_009694() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009695(), get_009702(), get_009723()))
      }
      pub(super) fn get_009683() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("codes", 282u32) },
              get_009684(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 283u32) },
              get_009686(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 284u32) },
              get_009688(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("j", 285u32) },
              get_009690(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("v", 286u32) },
              get_009692(),
            ),
          ],
          get_009694(),
        ))
      }
      pub(super) fn get_009958() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'codes' not bound"))
      }
      pub(super) fn get_009957() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009958()))
      }
      pub(super) fn get_009960() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'obj' not bound"))
      }
      pub(super) fn get_009959() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009960()))
      }
      pub(super) fn get_009962() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_009961() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009962()))
      }
      pub(super) fn get_009964() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_009963() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_009964()))
      }
      pub(super) fn get_009967() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 298u32)
        }))
      }
      pub(super) fn get_009970() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009971() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_009969() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009970(), get_009971()))
      }
      pub(super) fn get_009972() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("codes", 296u32)
        }))
      }
      pub(super) fn get_009968() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009969(),
          vec![get_009972()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009966() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009967(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_009968(),
        ))
      }
      pub(super) fn get_009973() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 299u32)
        }))
      }
      pub(super) fn get_009976() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("codes", 296u32)
        }))
      }
      pub(super) fn get_009977() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 298u32)
        }))
      }
      pub(super) fn get_009975() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009976(), get_009977()))
      }
      pub(super) fn get_009981() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009982() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_009980() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009981(), get_009982()))
      }
      pub(super) fn get_009985() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_009986() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_009984() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_009985(), get_009986()))
      }
      pub(super) fn get_009987() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 300u32)
        }))
      }
      pub(super) fn get_009983() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009984(),
          vec![get_009987()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009988() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("string"))
      }
      pub(super) fn get_009979() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009980(),
          vec![get_009983(), get_009988()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_009990() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("format_codes_obj", 295u32)
        }))
      }
      pub(super) fn get_009991() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("codes", 296u32)
        }))
      }
      pub(super) fn get_009992() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("obj", 297u32)
        }))
      }
      pub(super) fn get_009994() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 298u32)
        }))
      }
      pub(super) fn get_009995() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_009993() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009994(),
          CoreBinaryOperator::Plus(None),
          get_009995(),
        ))
      }
      pub(super) fn get_009997() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 299u32)
        }))
      }
      pub(super) fn get_009998() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 300u32)
        }))
      }
      pub(super) fn get_009996() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_009997(),
          CoreBinaryOperator::Plus(None),
          get_009998(),
        ))
      }
      pub(super) fn get_009989() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_009990(),
          vec![get_009991(), get_009992(), get_009993(), get_009996()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_010003() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010004() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_010002() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010003(), get_010004()))
      }
      pub(super) fn get_010006() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 300u32)
        }))
      }
      pub(super) fn get_010007() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mkey"))
      }
      pub(super) fn get_010005() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010006(), get_010007()))
      }
      pub(super) fn get_010008() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_010001() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010002(),
          vec![get_010005(), get_010008()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010010() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Mapping keys required."))
      }
      pub(super) fn get_010009() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010010()))
      }
      pub(super) fn get_010012() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 300u32)
        }))
      }
      pub(super) fn get_010013() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mkey"))
      }
      pub(super) fn get_010011() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010012(), get_010013()))
      }
      pub(super) fn get_010000() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010001(), get_010009(), get_010011()))
      }
      pub(super) fn get_010018() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010019() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_010017() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010018(), get_010019()))
      }
      pub(super) fn get_010021() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 300u32)
        }))
      }
      pub(super) fn get_010022() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("fw"))
      }
      pub(super) fn get_010020() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010021(), get_010022()))
      }
      pub(super) fn get_010023() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("*"))
      }
      pub(super) fn get_010016() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010017(),
          vec![get_010020(), get_010023()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010025() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Cannot use * field width with object.",
        ))
      }
      pub(super) fn get_010024() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010025()))
      }
      pub(super) fn get_010027() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 300u32)
        }))
      }
      pub(super) fn get_010028() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("fw"))
      }
      pub(super) fn get_010026() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010027(), get_010028()))
      }
      pub(super) fn get_010015() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010016(), get_010024(), get_010026()))
      }
      pub(super) fn get_010033() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010034() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_010032() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010033(), get_010034()))
      }
      pub(super) fn get_010036() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 300u32)
        }))
      }
      pub(super) fn get_010037() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prec"))
      }
      pub(super) fn get_010035() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010036(), get_010037()))
      }
      pub(super) fn get_010038() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("*"))
      }
      pub(super) fn get_010031() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010032(),
          vec![get_010035(), get_010038()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010040() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Cannot use * precision with object.",
        ))
      }
      pub(super) fn get_010039() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010040()))
      }
      pub(super) fn get_010042() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 300u32)
        }))
      }
      pub(super) fn get_010043() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prec"))
      }
      pub(super) fn get_010041() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010042(), get_010043()))
      }
      pub(super) fn get_010030() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010031(), get_010039(), get_010041()))
      }
      pub(super) fn get_010048() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010049() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectHasAll"))
      }
      pub(super) fn get_010047() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010048(), get_010049()))
      }
      pub(super) fn get_010050() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("obj", 297u32)
        }))
      }
      pub(super) fn get_010051() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("f", 301u32)
        }))
      }
      pub(super) fn get_010046() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010047(),
          vec![get_010050(), get_010051()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010053() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("obj", 297u32)
        }))
      }
      pub(super) fn get_010054() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("f", 301u32)
        }))
      }
      pub(super) fn get_010052() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010053(), get_010054()))
      }
      pub(super) fn get_010057() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("No such field: "))
      }
      pub(super) fn get_010058() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("f", 301u32)
        }))
      }
      pub(super) fn get_010056() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010057(),
          CoreBinaryOperator::Plus(None),
          get_010058(),
        ))
      }
      pub(super) fn get_010055() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010056()))
      }
      pub(super) fn get_010045() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010046(), get_010052(), get_010055()))
      }
      pub(super) fn get_010063() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010064() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_010062() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010063(), get_010064()))
      }
      pub(super) fn get_010066() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 300u32)
        }))
      }
      pub(super) fn get_010067() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("ctype"))
      }
      pub(super) fn get_010065() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010066(), get_010067()))
      }
      pub(super) fn get_010068() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%"))
      }
      pub(super) fn get_010061() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010062(),
          vec![get_010065(), get_010068()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010069() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%"))
      }
      pub(super) fn get_010071() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("format_code", 268u32)
        }))
      }
      pub(super) fn get_010072() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("val", 304u32)
        }))
      }
      pub(super) fn get_010073() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 300u32)
        }))
      }
      pub(super) fn get_010074() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fw", 302u32)
        }))
      }
      pub(super) fn get_010075() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prec", 303u32)
        }))
      }
      pub(super) fn get_010076() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("f", 301u32)
        }))
      }
      pub(super) fn get_010070() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010071(),
          vec![
            get_010072(),
            get_010073(),
            get_010074(),
            get_010075(),
            get_010076(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010060() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010061(), get_010069(), get_010070()))
      }
      pub(super) fn get_010081() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 300u32)
        }))
      }
      pub(super) fn get_010082() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("cflags"))
      }
      pub(super) fn get_010080() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010081(), get_010082()))
      }
      pub(super) fn get_010083() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("left"))
      }
      pub(super) fn get_010079() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010080(), get_010083()))
      }
      pub(super) fn get_010085() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pad_right", 199u32)
        }))
      }
      pub(super) fn get_010086() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("s", 305u32)
        }))
      }
      pub(super) fn get_010087() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fw", 302u32)
        }))
      }
      pub(super) fn get_010088() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" "))
      }
      pub(super) fn get_010084() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010085(),
          vec![get_010086(), get_010087(), get_010088()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010090() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pad_left", 195u32)
        }))
      }
      pub(super) fn get_010091() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("s", 305u32)
        }))
      }
      pub(super) fn get_010092() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fw", 302u32)
        }))
      }
      pub(super) fn get_010093() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" "))
      }
      pub(super) fn get_010089() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010090(),
          vec![get_010091(), get_010092(), get_010093()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010078() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010079(), get_010084(), get_010089()))
      }
      pub(super) fn get_010095() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("format_codes_obj", 295u32)
        }))
      }
      pub(super) fn get_010096() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("codes", 296u32)
        }))
      }
      pub(super) fn get_010097() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("obj", 297u32)
        }))
      }
      pub(super) fn get_010099() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 298u32)
        }))
      }
      pub(super) fn get_010100() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_010098() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010099(),
          CoreBinaryOperator::Plus(None),
          get_010100(),
        ))
      }
      pub(super) fn get_010102() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 299u32)
        }))
      }
      pub(super) fn get_010103() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("s_padded", 306u32)
        }))
      }
      pub(super) fn get_010101() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010102(),
          CoreBinaryOperator::Plus(None),
          get_010103(),
        ))
      }
      pub(super) fn get_010094() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010095(),
          vec![get_010096(), get_010097(), get_010098(), get_010101()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_010077() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("s_padded", 306u32) },
            get_010078(),
          )],
          get_010094(),
        ))
      }
      pub(super) fn get_010059() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("s", 305u32) },
            get_010060(),
          )],
          get_010077(),
        ))
      }
      pub(super) fn get_010044() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("val", 304u32) },
            get_010045(),
          )],
          get_010059(),
        ))
      }
      pub(super) fn get_010029() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("prec", 303u32) },
            get_010030(),
          )],
          get_010044(),
        ))
      }
      pub(super) fn get_010014() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("fw", 302u32) },
            get_010015(),
          )],
          get_010029(),
        ))
      }
      pub(super) fn get_009999() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("f", 301u32) },
            get_010000(),
          )],
          get_010014(),
        ))
      }
      pub(super) fn get_009978() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009979(), get_009989(), get_009999()))
      }
      pub(super) fn get_009974() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 300u32) },
            get_009975(),
          )],
          get_009978(),
        ))
      }
      pub(super) fn get_009965() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_009966(), get_009973(), get_009974()))
      }
      pub(super) fn get_009956() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("codes", 296u32) },
              get_009957(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("obj", 297u32) },
              get_009959(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 298u32) },
              get_009961(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("v", 299u32) },
              get_009963(),
            ),
          ],
          get_009965(),
        ))
      }
      pub(super) fn get_010107() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010108() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_010106() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010107(), get_010108()))
      }
      pub(super) fn get_010109() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("vals", 134u32)
        }))
      }
      pub(super) fn get_010105() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010106(),
          vec![get_010109()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010111() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("format_codes_arr", 281u32)
        }))
      }
      pub(super) fn get_010112() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("codes", 188u32)
        }))
      }
      pub(super) fn get_010113() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("vals", 134u32)
        }))
      }
      pub(super) fn get_010114() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010115() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010116() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_010110() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010111(),
          vec![
            get_010112(),
            get_010113(),
            get_010114(),
            get_010115(),
            get_010116(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010120() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010121() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_010119() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010120(), get_010121()))
      }
      pub(super) fn get_010122() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("vals", 134u32)
        }))
      }
      pub(super) fn get_010118() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010119(),
          vec![get_010122()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010124() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("format_codes_obj", 295u32)
        }))
      }
      pub(super) fn get_010125() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("codes", 188u32)
        }))
      }
      pub(super) fn get_010126() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("vals", 134u32)
        }))
      }
      pub(super) fn get_010127() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010128() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_010123() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010124(),
          vec![get_010125(), get_010126(), get_010127(), get_010128()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010130() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("format_codes_arr", 281u32)
        }))
      }
      pub(super) fn get_010131() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("codes", 188u32)
        }))
      }
      pub(super) fn get_010133() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("vals", 134u32)
        }))
      }
      pub(super) fn get_010132() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010133()]))
      }
      pub(super) fn get_010134() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010135() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010136() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_010129() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010130(),
          vec![
            get_010131(),
            get_010132(),
            get_010134(),
            get_010135(),
            get_010136(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010117() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010118(), get_010123(), get_010129()))
      }
      pub(super) fn get_010104() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010105(), get_010110(), get_010117()))
      }
      pub(super) fn get_009955() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("format_codes_obj", 295u32) },
            get_009956(),
          )],
          get_010104(),
        ))
      }
      pub(super) fn get_009682() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("format_codes_arr", 281u32) },
            get_009683(),
          )],
          get_009955(),
        ))
      }
      pub(super) fn get_009160() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("format_code", 268u32) },
            get_009161(),
          )],
          get_009682(),
        ))
      }
      pub(super) fn get_009044() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("render_float_sci", 255u32) },
            get_009045(),
          )],
          get_009160(),
        ))
      }
      pub(super) fn get_008925() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("render_float_dec", 240u32) },
            get_008926(),
          )],
          get_009044(),
        ))
      }
      pub(super) fn get_008876() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("strip_trailing_zero", 235u32) },
            get_008877(),
          )],
          get_008925(),
        ))
      }
      pub(super) fn get_008722() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("render_hex", 218u32) },
            get_008723(),
          )],
          get_008876(),
        ))
      }
      pub(super) fn get_008628() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("render_int", 203u32) },
            get_008629(),
          )],
          get_008722(),
        ))
      }
      pub(super) fn get_008608() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("pad_right", 199u32) },
            get_008609(),
          )],
          get_008628(),
        ))
      }
      pub(super) fn get_008588() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("pad_left", 195u32) },
            get_008589(),
          )],
          get_008608(),
        ))
      }
      pub(super) fn get_008559() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("padding", 189u32) },
            get_008560(),
          )],
          get_008588(),
        ))
      }
      pub(super) fn get_008552() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("codes", 188u32) },
            get_008553(),
          )],
          get_008559(),
        ))
      }
      pub(super) fn get_008488() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("parse_codes", 181u32) },
            get_008489(),
          )],
          get_008552(),
        ))
      }
      pub(super) fn get_008395() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("parse_code", 172u32) },
            get_008396(),
          )],
          get_008488(),
        ))
      }
      pub(super) fn get_008110() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("parse_conv_type", 168u32) },
            get_008111(),
          )],
          get_008395(),
        ))
      }
      pub(super) fn get_008065() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("try_parse_length_modifier", 164u32) },
            get_008066(),
          )],
          get_008110(),
        ))
      }
      pub(super) fn get_008025() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("try_parse_precision", 160u32) },
            get_008026(),
          )],
          get_008065(),
        ))
      }
      pub(super) fn get_007779() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("try_parse_field_width", 152u32) },
            get_007780(),
          )],
          get_008025(),
        ))
      }
      pub(super) fn get_007629() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("try_parse_cflags", 144u32) },
            get_007630(),
          )],
          get_007779(),
        ))
      }
      pub(super) fn get_007540() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("try_parse_mapping_key", 135u32) },
            get_007541(),
          )],
          get_007629(),
        ))
      }
      pub(super) fn get_007535() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 133u32) },
              get_007536(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("vals", 134u32) },
              get_007538(),
            ),
          ],
          get_007540(),
        ))
      }
      pub(super) fn get_007378() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_007379()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_007380(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_007381(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_007385(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_007490(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_007491(),
            ),
          ],
          get_007535(),
        ))
      }
      pub(super) fn get_010137() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldr"))
      }
      pub(super) fn get_010139() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_010140() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_010143() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_010142() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010143()))
      }
      pub(super) fn get_010144() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_010141() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_010142(),
          )],
          get_010144(),
        ))
      }
      pub(super) fn get_010147() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_010146() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010147()))
      }
      pub(super) fn get_010149() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_010148() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010149()))
      }
      pub(super) fn get_010153() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010155() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010156() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010154() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010155(),
          CoreBinaryOperator::And(None),
          get_010156(),
        ))
      }
      pub(super) fn get_010152() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010153(),
          CoreBinaryOperator::GreaterThan(None),
          get_010154(),
        ))
      }
      pub(super) fn get_010157() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_010151() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010152(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_010157(),
        ))
      }
      pub(super) fn get_010161() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010162() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010160() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010161(), get_010162()))
      }
      pub(super) fn get_010163() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_010159() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010160(),
          vec![get_010163()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010167() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010168() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010166() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010167(), get_010168()))
      }
      pub(super) fn get_010169() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_010165() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010166(),
          vec![get_010169()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010173() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010174() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010172() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010173(), get_010174()))
      }
      pub(super) fn get_010175() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_010171() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010172(),
          vec![get_010175()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010179() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_010178() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010179()))
      }
      pub(super) fn get_010181() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_010180() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010181()))
      }
      pub(super) fn get_010185() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010186() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010184() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010185(), get_010186()))
      }
      pub(super) fn get_010187() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_010183() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010184(),
          vec![get_010187()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010192() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_010190() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010191(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010192(),
        ))
      }
      pub(super) fn get_010195() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010196() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_010194() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010195(),
          CoreBinaryOperator::Minus(None),
          get_010196(),
        ))
      }
      pub(super) fn get_010197() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_010193() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010194(),
          CoreBinaryOperator::Plus(None),
          get_010197(),
        ))
      }
      pub(super) fn get_010200() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010201() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_010199() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010200(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010201(),
        ))
      }
      pub(super) fn get_010204() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010205() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_010203() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010204(),
          CoreBinaryOperator::Minus(None),
          get_010205(),
        ))
      }
      pub(super) fn get_010206() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_010202() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010203(),
          CoreBinaryOperator::Plus(None),
          get_010206(),
        ))
      }
      pub(super) fn get_010208() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010209() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_010207() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010208(),
          CoreBinaryOperator::Minus(None),
          get_010209(),
        ))
      }
      pub(super) fn get_010198() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010199(), get_010202(), get_010207()))
      }
      pub(super) fn get_010189() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010190(), get_010193(), get_010198()))
      }
      pub(super) fn get_010213() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_010215() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010216() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_010214() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010215(),
          CoreBinaryOperator::And(None),
          get_010216(),
        ))
      }
      pub(super) fn get_010212() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010213(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010214(),
        ))
      }
      pub(super) fn get_010217() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010211() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010212(),
          CoreBinaryOperator::LessThan(None),
          get_010217(),
        ))
      }
      pub(super) fn get_010219() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010221() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_010222() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_010220() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010221(),
          CoreBinaryOperator::Plus(None),
          get_010222(),
        ))
      }
      pub(super) fn get_010218() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010219(),
          CoreBinaryOperator::Mult(None),
          get_010220(),
        ))
      }
      pub(super) fn get_010226() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010227() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_010225() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010226(), get_010227()))
      }
      pub(super) fn get_010228() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_010230() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_010231() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010229() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010230(), get_010231()]))
      }
      pub(super) fn get_010224() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010225(),
          vec![get_010228(), get_010229()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010223() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010224()))
      }
      pub(super) fn get_010210() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010211(), get_010218(), get_010223()))
      }
      pub(super) fn get_010188() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_010189(),
          )],
          get_010210(),
        ))
      }
      pub(super) fn get_010182() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_010183(),
          )],
          get_010188(),
        ))
      }
      pub(super) fn get_010177() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_010178(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_010180(),
            ),
          ],
          get_010182(),
        ))
      }
      pub(super) fn get_010234() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010235() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_010233() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010234(), get_010235()))
      }
      pub(super) fn get_010236() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_010239() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010240() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_010238() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010239(), get_010240()))
      }
      pub(super) fn get_010241() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_010237() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010238(),
          vec![get_010241()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010242() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010232() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010233(),
          vec![get_010236(), get_010237(), get_010242()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010176() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_010177(),
          )],
          get_010232(),
        ))
      }
      pub(super) fn get_010170() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_010171(),
          )],
          get_010176(),
        ))
      }
      pub(super) fn get_010164() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_010165(),
          )],
          get_010170(),
        ))
      }
      pub(super) fn get_010158() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_010159(),
          )],
          get_010164(),
        ))
      }
      pub(super) fn get_010246() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010247() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_010245() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010246(), get_010247()))
      }
      pub(super) fn get_010248() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_010249() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010244() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010245(),
          vec![get_010248(), get_010249()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010243() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010244()))
      }
      pub(super) fn get_010150() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010151(), get_010158(), get_010243()))
      }
      pub(super) fn get_010145() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_010146(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_010148(),
            ),
          ],
          get_010150(),
        ))
      }
      pub(super) fn get_010250() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_010254() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_010255() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010253() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010254(), get_010255()))
      }
      pub(super) fn get_010257() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_010258() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_010256() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010257(), get_010258()))
      }
      pub(super) fn get_010252() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_010253(),
          )],
          get_010256(),
        ))
      }
      pub(super) fn get_010261() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_010262() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010260() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010261(), get_010262()))
      }
      pub(super) fn get_010263() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_010259() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_010260(),
          )],
          get_010263(),
        ))
      }
      pub(super) fn get_010267() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010268() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_010266() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010267(), get_010268()))
      }
      pub(super) fn get_010269() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010270() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_010265() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010266(),
          vec![get_010269(), get_010270()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010273() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010274() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_010272() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010273(), get_010274()))
      }
      pub(super) fn get_010275() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_010278() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010279() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_010277() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010278(), get_010279()))
      }
      pub(super) fn get_010282() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010283() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_010281() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010282(), get_010283()))
      }
      pub(super) fn get_010284() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_010280() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010281(),
          vec![get_010284()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010287() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_010286() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010287()))
      }
      pub(super) fn get_010290() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_010291() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_010289() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010290(), get_010291()))
      }
      pub(super) fn get_010294() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_010293() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010294()]))
      }
      pub(super) fn get_010292() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010293()]))
      }
      pub(super) fn get_010288() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_010289(),
          )],
          get_010292(),
        ))
      }
      pub(super) fn get_010285() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_010286(),
          )],
          get_010288(),
        ))
      }
      pub(super) fn get_010276() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010277(),
          vec![get_010280(), get_010285()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010271() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010272(),
          vec![get_010275(), get_010276()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010264() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_010265(),
          )],
          get_010271(),
        ))
      }
      pub(super) fn get_010251() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_010252(),
          get_010259(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_010264(),
        ))
      }
      pub(super) fn get_010297() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'func' not bound"))
      }
      pub(super) fn get_010296() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010297()))
      }
      pub(super) fn get_010299() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_010298() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010299()))
      }
      pub(super) fn get_010301() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'init' not bound"))
      }
      pub(super) fn get_010300() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010301()))
      }
      pub(super) fn get_010305() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'func' not bound"))
      }
      pub(super) fn get_010304() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010305()))
      }
      pub(super) fn get_010307() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_010306() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010307()))
      }
      pub(super) fn get_010309() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'running' not bound"))
      }
      pub(super) fn get_010308() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010309()))
      }
      pub(super) fn get_010311() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'idx' not bound"))
      }
      pub(super) fn get_010310() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010311()))
      }
      pub(super) fn get_010314() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("idx", 314u32)
        }))
      }
      pub(super) fn get_010315() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010313() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010314(),
          CoreBinaryOperator::LessThan(None),
          get_010315(),
        ))
      }
      pub(super) fn get_010316() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("running", 313u32)
        }))
      }
      pub(super) fn get_010318() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 310u32)
        }))
      }
      pub(super) fn get_010319() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 311u32)
        }))
      }
      pub(super) fn get_010320() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 312u32)
        }))
      }
      pub(super) fn get_010322() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 311u32)
        }))
      }
      pub(super) fn get_010324() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 312u32)
        }))
      }
      pub(super) fn get_010325() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("idx", 314u32)
        }))
      }
      pub(super) fn get_010323() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010324(), get_010325()))
      }
      pub(super) fn get_010326() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("running", 313u32)
        }))
      }
      pub(super) fn get_010321() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010322(),
          vec![get_010323(), get_010326()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010328() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("idx", 314u32)
        }))
      }
      pub(super) fn get_010329() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_010327() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010328(),
          CoreBinaryOperator::Minus(None),
          get_010329(),
        ))
      }
      pub(super) fn get_010317() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010318(),
          vec![get_010319(), get_010320(), get_010321(), get_010327()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_010312() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010313(), get_010316(), get_010317()))
      }
      pub(super) fn get_010303() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("func", 311u32) },
              get_010304(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 312u32) },
              get_010306(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("running", 313u32) },
              get_010308(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("idx", 314u32) },
              get_010310(),
            ),
          ],
          get_010312(),
        ))
      }
      pub(super) fn get_010331() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 310u32)
        }))
      }
      pub(super) fn get_010332() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 307u32)
        }))
      }
      pub(super) fn get_010333() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 308u32)
        }))
      }
      pub(super) fn get_010334() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("init", 309u32)
        }))
      }
      pub(super) fn get_010338() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010339() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_010337() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010338(), get_010339()))
      }
      pub(super) fn get_010340() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 308u32)
        }))
      }
      pub(super) fn get_010336() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010337(),
          vec![get_010340()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010341() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_010335() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010336(),
          CoreBinaryOperator::Minus(None),
          get_010341(),
        ))
      }
      pub(super) fn get_010330() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010331(),
          vec![get_010332(), get_010333(), get_010334(), get_010335()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010302() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 310u32) },
            get_010303(),
          )],
          get_010330(),
        ))
      }
      pub(super) fn get_010295() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("func", 307u32) },
              get_010296(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 308u32) },
              get_010298(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("init", 309u32) },
              get_010300(),
            ),
          ],
          get_010302(),
        ))
      }
      pub(super) fn get_010138() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_010139()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_010140(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_010141(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_010145(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_010250(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_010251(),
            ),
          ],
          get_010295(),
        ))
      }
      pub(super) fn get_010342() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_010344() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_010345() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_010348() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_010347() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010348()))
      }
      pub(super) fn get_010349() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_010346() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_010347(),
          )],
          get_010349(),
        ))
      }
      pub(super) fn get_010352() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_010351() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010352()))
      }
      pub(super) fn get_010354() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_010353() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010354()))
      }
      pub(super) fn get_010358() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010360() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010361() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010359() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010360(),
          CoreBinaryOperator::And(None),
          get_010361(),
        ))
      }
      pub(super) fn get_010357() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010358(),
          CoreBinaryOperator::GreaterThan(None),
          get_010359(),
        ))
      }
      pub(super) fn get_010362() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_010356() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010357(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_010362(),
        ))
      }
      pub(super) fn get_010366() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010367() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010365() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010366(), get_010367()))
      }
      pub(super) fn get_010368() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_010364() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010365(),
          vec![get_010368()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010372() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010373() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010371() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010372(), get_010373()))
      }
      pub(super) fn get_010374() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_010370() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010371(),
          vec![get_010374()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010378() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010379() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010377() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010378(), get_010379()))
      }
      pub(super) fn get_010380() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_010376() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010377(),
          vec![get_010380()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010384() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_010383() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010384()))
      }
      pub(super) fn get_010386() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_010385() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010386()))
      }
      pub(super) fn get_010390() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010391() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010389() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010390(), get_010391()))
      }
      pub(super) fn get_010392() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_010388() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010389(),
          vec![get_010392()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010396() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010397() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_010395() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010396(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010397(),
        ))
      }
      pub(super) fn get_010400() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010401() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_010399() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010400(),
          CoreBinaryOperator::Minus(None),
          get_010401(),
        ))
      }
      pub(super) fn get_010402() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_010398() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010399(),
          CoreBinaryOperator::Plus(None),
          get_010402(),
        ))
      }
      pub(super) fn get_010405() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010406() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_010404() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010405(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010406(),
        ))
      }
      pub(super) fn get_010409() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010410() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_010408() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010409(),
          CoreBinaryOperator::Minus(None),
          get_010410(),
        ))
      }
      pub(super) fn get_010411() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_010407() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010408(),
          CoreBinaryOperator::Plus(None),
          get_010411(),
        ))
      }
      pub(super) fn get_010413() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010414() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_010412() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010413(),
          CoreBinaryOperator::Minus(None),
          get_010414(),
        ))
      }
      pub(super) fn get_010403() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010404(), get_010407(), get_010412()))
      }
      pub(super) fn get_010394() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010395(), get_010398(), get_010403()))
      }
      pub(super) fn get_010418() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_010420() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010421() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_010419() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010420(),
          CoreBinaryOperator::And(None),
          get_010421(),
        ))
      }
      pub(super) fn get_010417() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010418(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010419(),
        ))
      }
      pub(super) fn get_010422() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010416() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010417(),
          CoreBinaryOperator::LessThan(None),
          get_010422(),
        ))
      }
      pub(super) fn get_010424() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010426() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_010427() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_010425() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010426(),
          CoreBinaryOperator::Plus(None),
          get_010427(),
        ))
      }
      pub(super) fn get_010423() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010424(),
          CoreBinaryOperator::Mult(None),
          get_010425(),
        ))
      }
      pub(super) fn get_010431() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010432() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_010430() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010431(), get_010432()))
      }
      pub(super) fn get_010433() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_010435() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_010436() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010434() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010435(), get_010436()]))
      }
      pub(super) fn get_010429() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010430(),
          vec![get_010433(), get_010434()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010428() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010429()))
      }
      pub(super) fn get_010415() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010416(), get_010423(), get_010428()))
      }
      pub(super) fn get_010393() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_010394(),
          )],
          get_010415(),
        ))
      }
      pub(super) fn get_010387() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_010388(),
          )],
          get_010393(),
        ))
      }
      pub(super) fn get_010382() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_010383(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_010385(),
            ),
          ],
          get_010387(),
        ))
      }
      pub(super) fn get_010439() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010440() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_010438() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010439(), get_010440()))
      }
      pub(super) fn get_010441() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_010444() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010445() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_010443() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010444(), get_010445()))
      }
      pub(super) fn get_010446() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_010442() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010443(),
          vec![get_010446()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010447() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010437() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010438(),
          vec![get_010441(), get_010442(), get_010447()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010381() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_010382(),
          )],
          get_010437(),
        ))
      }
      pub(super) fn get_010375() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_010376(),
          )],
          get_010381(),
        ))
      }
      pub(super) fn get_010369() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_010370(),
          )],
          get_010375(),
        ))
      }
      pub(super) fn get_010363() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_010364(),
          )],
          get_010369(),
        ))
      }
      pub(super) fn get_010451() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010452() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_010450() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010451(), get_010452()))
      }
      pub(super) fn get_010453() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_010454() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010449() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010450(),
          vec![get_010453(), get_010454()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010448() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010449()))
      }
      pub(super) fn get_010355() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010356(), get_010363(), get_010448()))
      }
      pub(super) fn get_010350() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_010351(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_010353(),
            ),
          ],
          get_010355(),
        ))
      }
      pub(super) fn get_010455() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_010459() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_010460() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010458() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010459(), get_010460()))
      }
      pub(super) fn get_010462() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_010463() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_010461() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010462(), get_010463()))
      }
      pub(super) fn get_010457() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_010458(),
          )],
          get_010461(),
        ))
      }
      pub(super) fn get_010466() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_010467() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010465() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010466(), get_010467()))
      }
      pub(super) fn get_010468() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_010464() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_010465(),
          )],
          get_010468(),
        ))
      }
      pub(super) fn get_010472() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010473() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_010471() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010472(), get_010473()))
      }
      pub(super) fn get_010474() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010475() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_010470() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010471(),
          vec![get_010474(), get_010475()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010478() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010479() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_010477() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010478(), get_010479()))
      }
      pub(super) fn get_010480() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_010483() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010484() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_010482() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010483(), get_010484()))
      }
      pub(super) fn get_010487() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010488() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_010486() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010487(), get_010488()))
      }
      pub(super) fn get_010489() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_010485() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010486(),
          vec![get_010489()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010492() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_010491() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010492()))
      }
      pub(super) fn get_010495() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_010496() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_010494() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010495(), get_010496()))
      }
      pub(super) fn get_010499() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_010498() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010499()]))
      }
      pub(super) fn get_010497() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010498()]))
      }
      pub(super) fn get_010493() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_010494(),
          )],
          get_010497(),
        ))
      }
      pub(super) fn get_010490() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_010491(),
          )],
          get_010493(),
        ))
      }
      pub(super) fn get_010481() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010482(),
          vec![get_010485(), get_010490()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010476() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010477(),
          vec![get_010480(), get_010481()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010469() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_010470(),
          )],
          get_010476(),
        ))
      }
      pub(super) fn get_010456() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_010457(),
          get_010464(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_010469(),
        ))
      }
      pub(super) fn get_010502() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'func' not bound"))
      }
      pub(super) fn get_010501() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010502()))
      }
      pub(super) fn get_010504() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_010503() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010504()))
      }
      pub(super) fn get_010506() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'init' not bound"))
      }
      pub(super) fn get_010505() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010506()))
      }
      pub(super) fn get_010510() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'func' not bound"))
      }
      pub(super) fn get_010509() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010510()))
      }
      pub(super) fn get_010512() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_010511() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010512()))
      }
      pub(super) fn get_010514() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'running' not bound"))
      }
      pub(super) fn get_010513() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010514()))
      }
      pub(super) fn get_010516() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'idx' not bound"))
      }
      pub(super) fn get_010515() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010516()))
      }
      pub(super) fn get_010519() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("idx", 322u32)
        }))
      }
      pub(super) fn get_010522() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010523() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_010521() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010522(), get_010523()))
      }
      pub(super) fn get_010524() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 320u32)
        }))
      }
      pub(super) fn get_010520() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010521(),
          vec![get_010524()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010518() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010519(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010520(),
        ))
      }
      pub(super) fn get_010525() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("running", 321u32)
        }))
      }
      pub(super) fn get_010527() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 318u32)
        }))
      }
      pub(super) fn get_010528() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 319u32)
        }))
      }
      pub(super) fn get_010529() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 320u32)
        }))
      }
      pub(super) fn get_010531() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 319u32)
        }))
      }
      pub(super) fn get_010532() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("running", 321u32)
        }))
      }
      pub(super) fn get_010534() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 320u32)
        }))
      }
      pub(super) fn get_010535() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("idx", 322u32)
        }))
      }
      pub(super) fn get_010533() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010534(), get_010535()))
      }
      pub(super) fn get_010530() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010531(),
          vec![get_010532(), get_010533()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010537() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("idx", 322u32)
        }))
      }
      pub(super) fn get_010538() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_010536() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010537(),
          CoreBinaryOperator::Plus(None),
          get_010538(),
        ))
      }
      pub(super) fn get_010526() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010527(),
          vec![get_010528(), get_010529(), get_010530(), get_010536()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_010517() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010518(), get_010525(), get_010526()))
      }
      pub(super) fn get_010508() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("func", 319u32) },
              get_010509(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 320u32) },
              get_010511(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("running", 321u32) },
              get_010513(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("idx", 322u32) },
              get_010515(),
            ),
          ],
          get_010517(),
        ))
      }
      pub(super) fn get_010540() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 318u32)
        }))
      }
      pub(super) fn get_010541() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("func", 315u32)
        }))
      }
      pub(super) fn get_010542() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 316u32)
        }))
      }
      pub(super) fn get_010543() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("init", 317u32)
        }))
      }
      pub(super) fn get_010544() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010539() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010540(),
          vec![get_010541(), get_010542(), get_010543(), get_010544()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010507() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 318u32) },
            get_010508(),
          )],
          get_010539(),
        ))
      }
      pub(super) fn get_010500() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("func", 315u32) },
              get_010501(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 316u32) },
              get_010503(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("init", 317u32) },
              get_010505(),
            ),
          ],
          get_010507(),
        ))
      }
      pub(super) fn get_010343() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_010344()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_010345(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_010346(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_010350(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_010455(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_010456(),
            ),
          ],
          get_010500(),
        ))
      }
      pub(super) fn get_010545() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("filterMap"))
      }
      pub(super) fn get_010547() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_010548() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_010551() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_010550() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010551()))
      }
      pub(super) fn get_010552() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_010549() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_010550(),
          )],
          get_010552(),
        ))
      }
      pub(super) fn get_010555() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_010554() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010555()))
      }
      pub(super) fn get_010557() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_010556() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010557()))
      }
      pub(super) fn get_010561() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010563() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010564() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010562() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010563(),
          CoreBinaryOperator::And(None),
          get_010564(),
        ))
      }
      pub(super) fn get_010560() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010561(),
          CoreBinaryOperator::GreaterThan(None),
          get_010562(),
        ))
      }
      pub(super) fn get_010565() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_010559() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010560(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_010565(),
        ))
      }
      pub(super) fn get_010569() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010570() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010568() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010569(), get_010570()))
      }
      pub(super) fn get_010571() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_010567() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010568(),
          vec![get_010571()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010575() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010576() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010574() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010575(), get_010576()))
      }
      pub(super) fn get_010577() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_010573() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010574(),
          vec![get_010577()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010581() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010582() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010580() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010581(), get_010582()))
      }
      pub(super) fn get_010583() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_010579() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010580(),
          vec![get_010583()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010587() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_010586() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010587()))
      }
      pub(super) fn get_010589() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_010588() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010589()))
      }
      pub(super) fn get_010593() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010594() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010592() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010593(), get_010594()))
      }
      pub(super) fn get_010595() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_010591() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010592(),
          vec![get_010595()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010599() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010600() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_010598() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010599(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010600(),
        ))
      }
      pub(super) fn get_010603() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010604() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_010602() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010603(),
          CoreBinaryOperator::Minus(None),
          get_010604(),
        ))
      }
      pub(super) fn get_010605() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_010601() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010602(),
          CoreBinaryOperator::Plus(None),
          get_010605(),
        ))
      }
      pub(super) fn get_010608() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010609() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_010607() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010608(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010609(),
        ))
      }
      pub(super) fn get_010612() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010613() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_010611() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010612(),
          CoreBinaryOperator::Minus(None),
          get_010613(),
        ))
      }
      pub(super) fn get_010614() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_010610() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010611(),
          CoreBinaryOperator::Plus(None),
          get_010614(),
        ))
      }
      pub(super) fn get_010616() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010617() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_010615() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010616(),
          CoreBinaryOperator::Minus(None),
          get_010617(),
        ))
      }
      pub(super) fn get_010606() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010607(), get_010610(), get_010615()))
      }
      pub(super) fn get_010597() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010598(), get_010601(), get_010606()))
      }
      pub(super) fn get_010621() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_010623() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010624() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_010622() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010623(),
          CoreBinaryOperator::And(None),
          get_010624(),
        ))
      }
      pub(super) fn get_010620() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010621(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010622(),
        ))
      }
      pub(super) fn get_010625() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010619() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010620(),
          CoreBinaryOperator::LessThan(None),
          get_010625(),
        ))
      }
      pub(super) fn get_010627() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010629() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_010630() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_010628() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010629(),
          CoreBinaryOperator::Plus(None),
          get_010630(),
        ))
      }
      pub(super) fn get_010626() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010627(),
          CoreBinaryOperator::Mult(None),
          get_010628(),
        ))
      }
      pub(super) fn get_010634() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010635() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_010633() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010634(), get_010635()))
      }
      pub(super) fn get_010636() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_010638() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_010639() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010637() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010638(), get_010639()]))
      }
      pub(super) fn get_010632() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010633(),
          vec![get_010636(), get_010637()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010631() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010632()))
      }
      pub(super) fn get_010618() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010619(), get_010626(), get_010631()))
      }
      pub(super) fn get_010596() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_010597(),
          )],
          get_010618(),
        ))
      }
      pub(super) fn get_010590() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_010591(),
          )],
          get_010596(),
        ))
      }
      pub(super) fn get_010585() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_010586(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_010588(),
            ),
          ],
          get_010590(),
        ))
      }
      pub(super) fn get_010642() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010643() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_010641() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010642(), get_010643()))
      }
      pub(super) fn get_010644() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_010647() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010648() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_010646() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010647(), get_010648()))
      }
      pub(super) fn get_010649() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_010645() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010646(),
          vec![get_010649()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010650() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010640() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010641(),
          vec![get_010644(), get_010645(), get_010650()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010584() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_010585(),
          )],
          get_010640(),
        ))
      }
      pub(super) fn get_010578() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_010579(),
          )],
          get_010584(),
        ))
      }
      pub(super) fn get_010572() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_010573(),
          )],
          get_010578(),
        ))
      }
      pub(super) fn get_010566() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_010567(),
          )],
          get_010572(),
        ))
      }
      pub(super) fn get_010654() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010655() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_010653() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010654(), get_010655()))
      }
      pub(super) fn get_010656() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_010657() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010652() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010653(),
          vec![get_010656(), get_010657()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010651() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010652()))
      }
      pub(super) fn get_010558() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010559(), get_010566(), get_010651()))
      }
      pub(super) fn get_010553() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_010554(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_010556(),
            ),
          ],
          get_010558(),
        ))
      }
      pub(super) fn get_010658() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_010662() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_010663() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010661() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010662(), get_010663()))
      }
      pub(super) fn get_010665() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_010666() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_010664() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010665(), get_010666()))
      }
      pub(super) fn get_010660() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_010661(),
          )],
          get_010664(),
        ))
      }
      pub(super) fn get_010669() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_010670() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010668() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010669(), get_010670()))
      }
      pub(super) fn get_010671() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_010667() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_010668(),
          )],
          get_010671(),
        ))
      }
      pub(super) fn get_010675() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010676() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_010674() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010675(), get_010676()))
      }
      pub(super) fn get_010677() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010678() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_010673() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010674(),
          vec![get_010677(), get_010678()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010681() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010682() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_010680() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010681(), get_010682()))
      }
      pub(super) fn get_010683() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_010686() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010687() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_010685() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010686(), get_010687()))
      }
      pub(super) fn get_010690() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010691() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_010689() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010690(), get_010691()))
      }
      pub(super) fn get_010692() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_010688() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010689(),
          vec![get_010692()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010695() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_010694() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010695()))
      }
      pub(super) fn get_010698() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_010699() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_010697() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010698(), get_010699()))
      }
      pub(super) fn get_010702() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_010701() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010702()]))
      }
      pub(super) fn get_010700() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010701()]))
      }
      pub(super) fn get_010696() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_010697(),
          )],
          get_010700(),
        ))
      }
      pub(super) fn get_010693() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_010694(),
          )],
          get_010696(),
        ))
      }
      pub(super) fn get_010684() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010685(),
          vec![get_010688(), get_010693()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010679() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010680(),
          vec![get_010683(), get_010684()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010672() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_010673(),
          )],
          get_010679(),
        ))
      }
      pub(super) fn get_010659() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_010660(),
          get_010667(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_010672(),
        ))
      }
      pub(super) fn get_010705() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Parameter 'filter_func' not bound",
        ))
      }
      pub(super) fn get_010704() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010705()))
      }
      pub(super) fn get_010707() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'map_func' not bound"))
      }
      pub(super) fn get_010706() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010707()))
      }
      pub(super) fn get_010709() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_010708() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010709()))
      }
      pub(super) fn get_010714() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010715() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isFunction"))
      }
      pub(super) fn get_010713() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010714(), get_010715()))
      }
      pub(super) fn get_010716() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("filter_func", 323u32)
        }))
      }
      pub(super) fn get_010712() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010713(),
          vec![get_010716()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010711() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_010712(),
        ))
      }
      pub(super) fn get_010719() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.filterMap first param must be function, got ",
        ))
      }
      pub(super) fn get_010722() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010723() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_010721() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010722(), get_010723()))
      }
      pub(super) fn get_010724() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("filter_func", 323u32)
        }))
      }
      pub(super) fn get_010720() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010721(),
          vec![get_010724()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010718() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010719(),
          CoreBinaryOperator::Plus(None),
          get_010720(),
        ))
      }
      pub(super) fn get_010717() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010718()))
      }
      pub(super) fn get_010729() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010730() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isFunction"))
      }
      pub(super) fn get_010728() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010729(), get_010730()))
      }
      pub(super) fn get_010731() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("map_func", 324u32)
        }))
      }
      pub(super) fn get_010727() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010728(),
          vec![get_010731()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010726() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_010727(),
        ))
      }
      pub(super) fn get_010734() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.filterMap second param must be function, got ",
        ))
      }
      pub(super) fn get_010737() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010738() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_010736() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010737(), get_010738()))
      }
      pub(super) fn get_010739() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("map_func", 324u32)
        }))
      }
      pub(super) fn get_010735() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010736(),
          vec![get_010739()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010733() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010734(),
          CoreBinaryOperator::Plus(None),
          get_010735(),
        ))
      }
      pub(super) fn get_010732() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010733()))
      }
      pub(super) fn get_010744() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010745() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_010743() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010744(), get_010745()))
      }
      pub(super) fn get_010746() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 325u32)
        }))
      }
      pub(super) fn get_010742() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010743(),
          vec![get_010746()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010741() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_010742(),
        ))
      }
      pub(super) fn get_010749() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.filterMap third param must be array, got ",
        ))
      }
      pub(super) fn get_010752() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010753() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_010751() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010752(), get_010753()))
      }
      pub(super) fn get_010754() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 325u32)
        }))
      }
      pub(super) fn get_010750() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010751(),
          vec![get_010754()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010748() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010749(),
          CoreBinaryOperator::Plus(None),
          get_010750(),
        ))
      }
      pub(super) fn get_010747() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010748()))
      }
      pub(super) fn get_010757() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010758() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("map"))
      }
      pub(super) fn get_010756() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010757(), get_010758()))
      }
      pub(super) fn get_010759() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("map_func", 324u32)
        }))
      }
      pub(super) fn get_010762() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010763() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("filter"))
      }
      pub(super) fn get_010761() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010762(), get_010763()))
      }
      pub(super) fn get_010764() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("filter_func", 323u32)
        }))
      }
      pub(super) fn get_010765() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 325u32)
        }))
      }
      pub(super) fn get_010760() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010761(),
          vec![get_010764(), get_010765()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010755() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010756(),
          vec![get_010759(), get_010760()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010740() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010741(), get_010747(), get_010755()))
      }
      pub(super) fn get_010725() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010726(), get_010732(), get_010740()))
      }
      pub(super) fn get_010710() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010711(), get_010717(), get_010725()))
      }
      pub(super) fn get_010703() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("filter_func", 323u32) },
              get_010704(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("map_func", 324u32) },
              get_010706(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 325u32) },
              get_010708(),
            ),
          ],
          get_010710(),
        ))
      }
      pub(super) fn get_010546() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_010547()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_010548(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_010549(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_010553(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_010658(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_010659(),
            ),
          ],
          get_010703(),
        ))
      }
      pub(super) fn get_010766() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("assertEqual"))
      }
      pub(super) fn get_010768() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_010769() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_010772() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_010771() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010772()))
      }
      pub(super) fn get_010773() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_010770() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_010771(),
          )],
          get_010773(),
        ))
      }
      pub(super) fn get_010776() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_010775() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010776()))
      }
      pub(super) fn get_010778() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_010777() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010778()))
      }
      pub(super) fn get_010782() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010784() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010785() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010783() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010784(),
          CoreBinaryOperator::And(None),
          get_010785(),
        ))
      }
      pub(super) fn get_010781() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010782(),
          CoreBinaryOperator::GreaterThan(None),
          get_010783(),
        ))
      }
      pub(super) fn get_010786() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_010780() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010781(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_010786(),
        ))
      }
      pub(super) fn get_010790() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010791() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010789() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010790(), get_010791()))
      }
      pub(super) fn get_010792() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_010788() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010789(),
          vec![get_010792()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010796() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010797() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010795() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010796(), get_010797()))
      }
      pub(super) fn get_010798() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_010794() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010795(),
          vec![get_010798()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010802() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010803() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010801() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010802(), get_010803()))
      }
      pub(super) fn get_010804() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_010800() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010801(),
          vec![get_010804()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010808() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_010807() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010808()))
      }
      pub(super) fn get_010810() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_010809() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010810()))
      }
      pub(super) fn get_010814() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010815() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010813() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010814(), get_010815()))
      }
      pub(super) fn get_010816() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_010812() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010813(),
          vec![get_010816()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010820() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010821() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_010819() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010820(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010821(),
        ))
      }
      pub(super) fn get_010824() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010825() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_010823() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010824(),
          CoreBinaryOperator::Minus(None),
          get_010825(),
        ))
      }
      pub(super) fn get_010826() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_010822() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010823(),
          CoreBinaryOperator::Plus(None),
          get_010826(),
        ))
      }
      pub(super) fn get_010829() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010830() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_010828() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010829(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010830(),
        ))
      }
      pub(super) fn get_010833() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010834() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_010832() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010833(),
          CoreBinaryOperator::Minus(None),
          get_010834(),
        ))
      }
      pub(super) fn get_010835() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_010831() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010832(),
          CoreBinaryOperator::Plus(None),
          get_010835(),
        ))
      }
      pub(super) fn get_010837() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_010838() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_010836() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010837(),
          CoreBinaryOperator::Minus(None),
          get_010838(),
        ))
      }
      pub(super) fn get_010827() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010828(), get_010831(), get_010836()))
      }
      pub(super) fn get_010818() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010819(), get_010822(), get_010827()))
      }
      pub(super) fn get_010842() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_010844() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010845() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_010843() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010844(),
          CoreBinaryOperator::And(None),
          get_010845(),
        ))
      }
      pub(super) fn get_010841() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010842(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_010843(),
        ))
      }
      pub(super) fn get_010846() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010840() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010841(),
          CoreBinaryOperator::LessThan(None),
          get_010846(),
        ))
      }
      pub(super) fn get_010848() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010850() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_010851() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_010849() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010850(),
          CoreBinaryOperator::Plus(None),
          get_010851(),
        ))
      }
      pub(super) fn get_010847() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010848(),
          CoreBinaryOperator::Mult(None),
          get_010849(),
        ))
      }
      pub(super) fn get_010855() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010856() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_010854() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010855(), get_010856()))
      }
      pub(super) fn get_010857() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_010859() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_010860() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010858() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010859(), get_010860()]))
      }
      pub(super) fn get_010853() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010854(),
          vec![get_010857(), get_010858()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010852() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010853()))
      }
      pub(super) fn get_010839() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010840(), get_010847(), get_010852()))
      }
      pub(super) fn get_010817() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_010818(),
          )],
          get_010839(),
        ))
      }
      pub(super) fn get_010811() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_010812(),
          )],
          get_010817(),
        ))
      }
      pub(super) fn get_010806() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_010807(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_010809(),
            ),
          ],
          get_010811(),
        ))
      }
      pub(super) fn get_010863() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010864() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_010862() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010863(), get_010864()))
      }
      pub(super) fn get_010865() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_010868() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010869() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_010867() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010868(), get_010869()))
      }
      pub(super) fn get_010870() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_010866() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010867(),
          vec![get_010870()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010871() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010861() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010862(),
          vec![get_010865(), get_010866(), get_010871()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010805() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_010806(),
          )],
          get_010861(),
        ))
      }
      pub(super) fn get_010799() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_010800(),
          )],
          get_010805(),
        ))
      }
      pub(super) fn get_010793() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_010794(),
          )],
          get_010799(),
        ))
      }
      pub(super) fn get_010787() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_010788(),
          )],
          get_010793(),
        ))
      }
      pub(super) fn get_010875() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010876() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_010874() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010875(), get_010876()))
      }
      pub(super) fn get_010877() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_010878() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010873() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010874(),
          vec![get_010877(), get_010878()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010872() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010873()))
      }
      pub(super) fn get_010779() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010780(), get_010787(), get_010872()))
      }
      pub(super) fn get_010774() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_010775(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_010777(),
            ),
          ],
          get_010779(),
        ))
      }
      pub(super) fn get_010879() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_010883() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_010884() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010882() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010883(), get_010884()))
      }
      pub(super) fn get_010886() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_010887() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_010885() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010886(), get_010887()))
      }
      pub(super) fn get_010881() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_010882(),
          )],
          get_010885(),
        ))
      }
      pub(super) fn get_010890() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_010891() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010889() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010890(), get_010891()))
      }
      pub(super) fn get_010892() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_010888() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_010889(),
          )],
          get_010892(),
        ))
      }
      pub(super) fn get_010896() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010897() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_010895() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010896(), get_010897()))
      }
      pub(super) fn get_010898() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010899() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_010894() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010895(),
          vec![get_010898(), get_010899()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010902() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010903() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_010901() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010902(), get_010903()))
      }
      pub(super) fn get_010904() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_010907() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010908() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_010906() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010907(), get_010908()))
      }
      pub(super) fn get_010911() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010912() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_010910() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010911(), get_010912()))
      }
      pub(super) fn get_010913() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_010909() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010910(),
          vec![get_010913()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010916() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_010915() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010916()))
      }
      pub(super) fn get_010919() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_010920() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_010918() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010919(), get_010920()))
      }
      pub(super) fn get_010923() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_010922() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010923()]))
      }
      pub(super) fn get_010921() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_010922()]))
      }
      pub(super) fn get_010917() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_010918(),
          )],
          get_010921(),
        ))
      }
      pub(super) fn get_010914() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_010915(),
          )],
          get_010917(),
        ))
      }
      pub(super) fn get_010905() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010906(),
          vec![get_010909(), get_010914()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010900() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010901(),
          vec![get_010904(), get_010905()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010893() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_010894(),
          )],
          get_010900(),
        ))
      }
      pub(super) fn get_010880() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_010881(),
          get_010888(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_010893(),
        ))
      }
      pub(super) fn get_010926() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_010925() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010926()))
      }
      pub(super) fn get_010928() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_010927() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010928()))
      }
      pub(super) fn get_010932() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010933() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_010931() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010932(), get_010933()))
      }
      pub(super) fn get_010934() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 326u32)
        }))
      }
      pub(super) fn get_010935() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 327u32)
        }))
      }
      pub(super) fn get_010930() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010931(),
          vec![get_010934(), get_010935()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010936() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_010941() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Assertion failed. "))
      }
      pub(super) fn get_010942() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 326u32)
        }))
      }
      pub(super) fn get_010940() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010941(),
          CoreBinaryOperator::Plus(None),
          get_010942(),
        ))
      }
      pub(super) fn get_010943() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" != "))
      }
      pub(super) fn get_010939() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010940(),
          CoreBinaryOperator::Plus(None),
          get_010943(),
        ))
      }
      pub(super) fn get_010944() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 327u32)
        }))
      }
      pub(super) fn get_010938() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010939(),
          CoreBinaryOperator::Plus(None),
          get_010944(),
        ))
      }
      pub(super) fn get_010937() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010938()))
      }
      pub(super) fn get_010929() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010930(), get_010936(), get_010937()))
      }
      pub(super) fn get_010924() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 326u32) },
              get_010925(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 327u32) },
              get_010927(),
            ),
          ],
          get_010929(),
        ))
      }
      pub(super) fn get_010767() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_010768()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_010769(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_010770(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_010774(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_010879(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_010880(),
            ),
          ],
          get_010924(),
        ))
      }
      pub(super) fn get_010945() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("abs"))
      }
      pub(super) fn get_010947() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_010948() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_010951() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_010950() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010951()))
      }
      pub(super) fn get_010952() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_010949() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_010950(),
          )],
          get_010952(),
        ))
      }
      pub(super) fn get_010955() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_010954() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010955()))
      }
      pub(super) fn get_010957() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_010956() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010957()))
      }
      pub(super) fn get_010961() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010963() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_010964() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_010962() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010963(),
          CoreBinaryOperator::And(None),
          get_010964(),
        ))
      }
      pub(super) fn get_010960() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010961(),
          CoreBinaryOperator::GreaterThan(None),
          get_010962(),
        ))
      }
      pub(super) fn get_010965() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_010959() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010960(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_010965(),
        ))
      }
      pub(super) fn get_010969() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010970() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010968() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010969(), get_010970()))
      }
      pub(super) fn get_010971() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_010967() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010968(),
          vec![get_010971()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010975() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010976() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010974() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010975(), get_010976()))
      }
      pub(super) fn get_010977() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_010973() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010974(),
          vec![get_010977()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010981() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010982() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010980() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010981(), get_010982()))
      }
      pub(super) fn get_010983() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_010979() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010980(),
          vec![get_010983()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010987() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_010986() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010987()))
      }
      pub(super) fn get_010989() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_010988() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_010989()))
      }
      pub(super) fn get_010993() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_010994() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_010992() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_010993(), get_010994()))
      }
      pub(super) fn get_010995() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_010991() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_010992(),
          vec![get_010995()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010999() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011000() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_010998() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_010999(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011000(),
        ))
      }
      pub(super) fn get_011003() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011004() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_011002() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011003(),
          CoreBinaryOperator::Minus(None),
          get_011004(),
        ))
      }
      pub(super) fn get_011005() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_011001() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011002(),
          CoreBinaryOperator::Plus(None),
          get_011005(),
        ))
      }
      pub(super) fn get_011008() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011009() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_011007() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011008(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011009(),
        ))
      }
      pub(super) fn get_011012() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011013() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_011011() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011012(),
          CoreBinaryOperator::Minus(None),
          get_011013(),
        ))
      }
      pub(super) fn get_011014() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_011010() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011011(),
          CoreBinaryOperator::Plus(None),
          get_011014(),
        ))
      }
      pub(super) fn get_011016() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011017() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_011015() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011016(),
          CoreBinaryOperator::Minus(None),
          get_011017(),
        ))
      }
      pub(super) fn get_011006() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011007(), get_011010(), get_011015()))
      }
      pub(super) fn get_010997() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010998(), get_011001(), get_011006()))
      }
      pub(super) fn get_011021() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011023() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011024() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011022() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011023(),
          CoreBinaryOperator::And(None),
          get_011024(),
        ))
      }
      pub(super) fn get_011020() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011021(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011022(),
        ))
      }
      pub(super) fn get_011025() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011019() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011020(),
          CoreBinaryOperator::LessThan(None),
          get_011025(),
        ))
      }
      pub(super) fn get_011027() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011029() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_011030() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011028() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011029(),
          CoreBinaryOperator::Plus(None),
          get_011030(),
        ))
      }
      pub(super) fn get_011026() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011027(),
          CoreBinaryOperator::Mult(None),
          get_011028(),
        ))
      }
      pub(super) fn get_011034() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011035() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_011033() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011034(), get_011035()))
      }
      pub(super) fn get_011036() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_011038() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_011039() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011037() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011038(), get_011039()]))
      }
      pub(super) fn get_011032() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011033(),
          vec![get_011036(), get_011037()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011031() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011032()))
      }
      pub(super) fn get_011018() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011019(), get_011026(), get_011031()))
      }
      pub(super) fn get_010996() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_010997(),
          )],
          get_011018(),
        ))
      }
      pub(super) fn get_010990() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_010991(),
          )],
          get_010996(),
        ))
      }
      pub(super) fn get_010985() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_010986(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_010988(),
            ),
          ],
          get_010990(),
        ))
      }
      pub(super) fn get_011042() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011043() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_011041() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011042(), get_011043()))
      }
      pub(super) fn get_011044() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_011047() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011048() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_011046() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011047(), get_011048()))
      }
      pub(super) fn get_011049() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_011045() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011046(),
          vec![get_011049()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011050() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011040() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011041(),
          vec![get_011044(), get_011045(), get_011050()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_010984() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_010985(),
          )],
          get_011040(),
        ))
      }
      pub(super) fn get_010978() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_010979(),
          )],
          get_010984(),
        ))
      }
      pub(super) fn get_010972() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_010973(),
          )],
          get_010978(),
        ))
      }
      pub(super) fn get_010966() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_010967(),
          )],
          get_010972(),
        ))
      }
      pub(super) fn get_011054() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011055() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_011053() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011054(), get_011055()))
      }
      pub(super) fn get_011056() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_011057() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011052() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011053(),
          vec![get_011056(), get_011057()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011051() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011052()))
      }
      pub(super) fn get_010958() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_010959(), get_010966(), get_011051()))
      }
      pub(super) fn get_010953() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_010954(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_010956(),
            ),
          ],
          get_010958(),
        ))
      }
      pub(super) fn get_011058() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_011062() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_011063() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011061() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011062(), get_011063()))
      }
      pub(super) fn get_011065() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_011066() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011064() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011065(), get_011066()))
      }
      pub(super) fn get_011060() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011061(),
          )],
          get_011064(),
        ))
      }
      pub(super) fn get_011069() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_011070() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011068() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011069(), get_011070()))
      }
      pub(super) fn get_011071() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011067() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011068(),
          )],
          get_011071(),
        ))
      }
      pub(super) fn get_011075() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011076() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_011074() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011075(), get_011076()))
      }
      pub(super) fn get_011077() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011078() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_011073() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011074(),
          vec![get_011077(), get_011078()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011081() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011082() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_011080() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011081(), get_011082()))
      }
      pub(super) fn get_011083() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_011086() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011087() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_011085() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011086(), get_011087()))
      }
      pub(super) fn get_011090() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011091() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_011089() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011090(), get_011091()))
      }
      pub(super) fn get_011092() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_011088() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011089(),
          vec![get_011092()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011095() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_011094() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011095()))
      }
      pub(super) fn get_011098() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_011099() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_011097() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011098(), get_011099()))
      }
      pub(super) fn get_011102() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011101() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011102()]))
      }
      pub(super) fn get_011100() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011101()]))
      }
      pub(super) fn get_011096() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011097(),
          )],
          get_011100(),
        ))
      }
      pub(super) fn get_011093() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_011094(),
          )],
          get_011096(),
        ))
      }
      pub(super) fn get_011084() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011085(),
          vec![get_011088(), get_011093()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011079() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011080(),
          vec![get_011083(), get_011084()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011072() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_011073(),
          )],
          get_011079(),
        ))
      }
      pub(super) fn get_011059() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_011060(),
          get_011067(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_011072(),
        ))
      }
      pub(super) fn get_011105() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'n' not bound"))
      }
      pub(super) fn get_011104() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011105()))
      }
      pub(super) fn get_011110() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011111() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_011109() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011110(), get_011111()))
      }
      pub(super) fn get_011112() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 328u32)
        }))
      }
      pub(super) fn get_011108() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011109(),
          vec![get_011112()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011107() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_011108(),
        ))
      }
      pub(super) fn get_011115() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("std.abs expected number, got "))
      }
      pub(super) fn get_011118() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011119() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_011117() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011118(), get_011119()))
      }
      pub(super) fn get_011120() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 328u32)
        }))
      }
      pub(super) fn get_011116() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011117(),
          vec![get_011120()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011114() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011115(),
          CoreBinaryOperator::Plus(None),
          get_011116(),
        ))
      }
      pub(super) fn get_011113() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011114()))
      }
      pub(super) fn get_011123() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 328u32)
        }))
      }
      pub(super) fn get_011124() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011122() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011123(),
          CoreBinaryOperator::GreaterThan(None),
          get_011124(),
        ))
      }
      pub(super) fn get_011125() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 328u32)
        }))
      }
      pub(super) fn get_011127() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 328u32)
        }))
      }
      pub(super) fn get_011126() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Minus(None),
          get_011127(),
        ))
      }
      pub(super) fn get_011121() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011122(), get_011125(), get_011126()))
      }
      pub(super) fn get_011106() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011107(), get_011113(), get_011121()))
      }
      pub(super) fn get_011103() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("n", 328u32) },
            get_011104(),
          )],
          get_011106(),
        ))
      }
      pub(super) fn get_010946() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_010947()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_010948(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_010949(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_010953(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_011058(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_011059(),
            ),
          ],
          get_011103(),
        ))
      }
      pub(super) fn get_011128() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("sign"))
      }
      pub(super) fn get_011130() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_011131() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_011134() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_011133() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011134()))
      }
      pub(super) fn get_011135() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_011132() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_011133(),
          )],
          get_011135(),
        ))
      }
      pub(super) fn get_011138() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_011137() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011138()))
      }
      pub(super) fn get_011140() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_011139() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011140()))
      }
      pub(super) fn get_011144() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011146() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011147() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011145() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011146(),
          CoreBinaryOperator::And(None),
          get_011147(),
        ))
      }
      pub(super) fn get_011143() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011144(),
          CoreBinaryOperator::GreaterThan(None),
          get_011145(),
        ))
      }
      pub(super) fn get_011148() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_011142() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011143(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_011148(),
        ))
      }
      pub(super) fn get_011152() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011153() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011151() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011152(), get_011153()))
      }
      pub(super) fn get_011154() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_011150() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011151(),
          vec![get_011154()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011158() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011159() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011157() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011158(), get_011159()))
      }
      pub(super) fn get_011160() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_011156() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011157(),
          vec![get_011160()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011164() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011165() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011163() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011164(), get_011165()))
      }
      pub(super) fn get_011166() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_011162() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011163(),
          vec![get_011166()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011170() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_011169() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011170()))
      }
      pub(super) fn get_011172() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_011171() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011172()))
      }
      pub(super) fn get_011176() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011177() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011175() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011176(), get_011177()))
      }
      pub(super) fn get_011178() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_011174() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011175(),
          vec![get_011178()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011182() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011183() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_011181() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011182(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011183(),
        ))
      }
      pub(super) fn get_011186() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011187() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_011185() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011186(),
          CoreBinaryOperator::Minus(None),
          get_011187(),
        ))
      }
      pub(super) fn get_011188() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_011184() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011185(),
          CoreBinaryOperator::Plus(None),
          get_011188(),
        ))
      }
      pub(super) fn get_011191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011192() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_011190() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011191(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011192(),
        ))
      }
      pub(super) fn get_011195() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011196() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_011194() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011195(),
          CoreBinaryOperator::Minus(None),
          get_011196(),
        ))
      }
      pub(super) fn get_011197() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_011193() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011194(),
          CoreBinaryOperator::Plus(None),
          get_011197(),
        ))
      }
      pub(super) fn get_011199() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011200() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_011198() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011199(),
          CoreBinaryOperator::Minus(None),
          get_011200(),
        ))
      }
      pub(super) fn get_011189() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011190(), get_011193(), get_011198()))
      }
      pub(super) fn get_011180() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011181(), get_011184(), get_011189()))
      }
      pub(super) fn get_011204() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011206() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011207() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011205() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011206(),
          CoreBinaryOperator::And(None),
          get_011207(),
        ))
      }
      pub(super) fn get_011203() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011204(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011205(),
        ))
      }
      pub(super) fn get_011208() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011202() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011203(),
          CoreBinaryOperator::LessThan(None),
          get_011208(),
        ))
      }
      pub(super) fn get_011210() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011212() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_011213() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011211() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011212(),
          CoreBinaryOperator::Plus(None),
          get_011213(),
        ))
      }
      pub(super) fn get_011209() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011210(),
          CoreBinaryOperator::Mult(None),
          get_011211(),
        ))
      }
      pub(super) fn get_011217() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011218() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_011216() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011217(), get_011218()))
      }
      pub(super) fn get_011219() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_011221() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_011222() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011220() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011221(), get_011222()]))
      }
      pub(super) fn get_011215() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011216(),
          vec![get_011219(), get_011220()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011214() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011215()))
      }
      pub(super) fn get_011201() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011202(), get_011209(), get_011214()))
      }
      pub(super) fn get_011179() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_011180(),
          )],
          get_011201(),
        ))
      }
      pub(super) fn get_011173() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_011174(),
          )],
          get_011179(),
        ))
      }
      pub(super) fn get_011168() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_011169(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_011171(),
            ),
          ],
          get_011173(),
        ))
      }
      pub(super) fn get_011225() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011226() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_011224() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011225(), get_011226()))
      }
      pub(super) fn get_011227() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_011230() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011231() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_011229() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011230(), get_011231()))
      }
      pub(super) fn get_011232() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_011228() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011229(),
          vec![get_011232()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011233() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011223() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011224(),
          vec![get_011227(), get_011228(), get_011233()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011167() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_011168(),
          )],
          get_011223(),
        ))
      }
      pub(super) fn get_011161() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_011162(),
          )],
          get_011167(),
        ))
      }
      pub(super) fn get_011155() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_011156(),
          )],
          get_011161(),
        ))
      }
      pub(super) fn get_011149() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_011150(),
          )],
          get_011155(),
        ))
      }
      pub(super) fn get_011237() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011238() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_011236() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011237(), get_011238()))
      }
      pub(super) fn get_011239() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_011240() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011235() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011236(),
          vec![get_011239(), get_011240()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011234() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011235()))
      }
      pub(super) fn get_011141() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011142(), get_011149(), get_011234()))
      }
      pub(super) fn get_011136() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_011137(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_011139(),
            ),
          ],
          get_011141(),
        ))
      }
      pub(super) fn get_011241() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_011245() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_011246() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011244() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011245(), get_011246()))
      }
      pub(super) fn get_011248() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_011249() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011247() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011248(), get_011249()))
      }
      pub(super) fn get_011243() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011244(),
          )],
          get_011247(),
        ))
      }
      pub(super) fn get_011252() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_011253() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011251() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011252(), get_011253()))
      }
      pub(super) fn get_011254() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011250() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011251(),
          )],
          get_011254(),
        ))
      }
      pub(super) fn get_011258() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011259() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_011257() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011258(), get_011259()))
      }
      pub(super) fn get_011260() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011261() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_011256() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011257(),
          vec![get_011260(), get_011261()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011264() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011265() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_011263() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011264(), get_011265()))
      }
      pub(super) fn get_011266() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_011269() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011270() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_011268() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011269(), get_011270()))
      }
      pub(super) fn get_011273() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011274() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_011272() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011273(), get_011274()))
      }
      pub(super) fn get_011275() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_011271() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011272(),
          vec![get_011275()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011278() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_011277() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011278()))
      }
      pub(super) fn get_011281() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_011282() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_011280() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011281(), get_011282()))
      }
      pub(super) fn get_011285() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011284() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011285()]))
      }
      pub(super) fn get_011283() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011284()]))
      }
      pub(super) fn get_011279() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011280(),
          )],
          get_011283(),
        ))
      }
      pub(super) fn get_011276() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_011277(),
          )],
          get_011279(),
        ))
      }
      pub(super) fn get_011267() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011268(),
          vec![get_011271(), get_011276()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011262() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011263(),
          vec![get_011266(), get_011267()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011255() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_011256(),
          )],
          get_011262(),
        ))
      }
      pub(super) fn get_011242() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_011243(),
          get_011250(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_011255(),
        ))
      }
      pub(super) fn get_011288() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'n' not bound"))
      }
      pub(super) fn get_011287() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011288()))
      }
      pub(super) fn get_011293() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011294() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_011292() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011293(), get_011294()))
      }
      pub(super) fn get_011295() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 329u32)
        }))
      }
      pub(super) fn get_011291() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011292(),
          vec![get_011295()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011290() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_011291(),
        ))
      }
      pub(super) fn get_011298() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("std.sign expected number, got "))
      }
      pub(super) fn get_011301() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011302() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_011300() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011301(), get_011302()))
      }
      pub(super) fn get_011303() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 329u32)
        }))
      }
      pub(super) fn get_011299() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011300(),
          vec![get_011303()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011297() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011298(),
          CoreBinaryOperator::Plus(None),
          get_011299(),
        ))
      }
      pub(super) fn get_011296() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011297()))
      }
      pub(super) fn get_011306() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 329u32)
        }))
      }
      pub(super) fn get_011307() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011305() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011306(),
          CoreBinaryOperator::GreaterThan(None),
          get_011307(),
        ))
      }
      pub(super) fn get_011308() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_011311() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n", 329u32)
        }))
      }
      pub(super) fn get_011312() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011310() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011311(),
          CoreBinaryOperator::LessThan(None),
          get_011312(),
        ))
      }
      pub(super) fn get_011314() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_011313() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Minus(None),
          get_011314(),
        ))
      }
      pub(super) fn get_011315() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011309() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011310(), get_011313(), get_011315()))
      }
      pub(super) fn get_011304() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011305(), get_011308(), get_011309()))
      }
      pub(super) fn get_011289() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011290(), get_011296(), get_011304()))
      }
      pub(super) fn get_011286() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("n", 329u32) },
            get_011287(),
          )],
          get_011289(),
        ))
      }
      pub(super) fn get_011129() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_011130()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_011131(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_011132(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_011136(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_011241(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_011242(),
            ),
          ],
          get_011286(),
        ))
      }
      pub(super) fn get_011316() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("max"))
      }
      pub(super) fn get_011318() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_011319() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_011322() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_011321() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011322()))
      }
      pub(super) fn get_011323() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_011320() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_011321(),
          )],
          get_011323(),
        ))
      }
      pub(super) fn get_011326() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_011325() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011326()))
      }
      pub(super) fn get_011328() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_011327() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011328()))
      }
      pub(super) fn get_011332() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011334() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011335() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011333() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011334(),
          CoreBinaryOperator::And(None),
          get_011335(),
        ))
      }
      pub(super) fn get_011331() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011332(),
          CoreBinaryOperator::GreaterThan(None),
          get_011333(),
        ))
      }
      pub(super) fn get_011336() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_011330() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011331(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_011336(),
        ))
      }
      pub(super) fn get_011340() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011341() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011339() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011340(), get_011341()))
      }
      pub(super) fn get_011342() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_011338() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011339(),
          vec![get_011342()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011346() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011347() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011345() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011346(), get_011347()))
      }
      pub(super) fn get_011348() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_011344() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011345(),
          vec![get_011348()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011352() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011353() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011351() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011352(), get_011353()))
      }
      pub(super) fn get_011354() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_011350() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011351(),
          vec![get_011354()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011358() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_011357() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011358()))
      }
      pub(super) fn get_011360() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_011359() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011360()))
      }
      pub(super) fn get_011364() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011365() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011363() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011364(), get_011365()))
      }
      pub(super) fn get_011366() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_011362() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011363(),
          vec![get_011366()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011370() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011371() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_011369() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011370(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011371(),
        ))
      }
      pub(super) fn get_011374() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011375() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_011373() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011374(),
          CoreBinaryOperator::Minus(None),
          get_011375(),
        ))
      }
      pub(super) fn get_011376() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_011372() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011373(),
          CoreBinaryOperator::Plus(None),
          get_011376(),
        ))
      }
      pub(super) fn get_011379() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011380() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_011378() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011379(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011380(),
        ))
      }
      pub(super) fn get_011383() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011384() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_011382() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011383(),
          CoreBinaryOperator::Minus(None),
          get_011384(),
        ))
      }
      pub(super) fn get_011385() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_011381() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011382(),
          CoreBinaryOperator::Plus(None),
          get_011385(),
        ))
      }
      pub(super) fn get_011387() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011388() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_011386() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011387(),
          CoreBinaryOperator::Minus(None),
          get_011388(),
        ))
      }
      pub(super) fn get_011377() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011378(), get_011381(), get_011386()))
      }
      pub(super) fn get_011368() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011369(), get_011372(), get_011377()))
      }
      pub(super) fn get_011392() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011394() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011395() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011393() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011394(),
          CoreBinaryOperator::And(None),
          get_011395(),
        ))
      }
      pub(super) fn get_011391() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011392(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011393(),
        ))
      }
      pub(super) fn get_011396() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011390() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011391(),
          CoreBinaryOperator::LessThan(None),
          get_011396(),
        ))
      }
      pub(super) fn get_011398() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011400() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_011401() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011399() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011400(),
          CoreBinaryOperator::Plus(None),
          get_011401(),
        ))
      }
      pub(super) fn get_011397() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011398(),
          CoreBinaryOperator::Mult(None),
          get_011399(),
        ))
      }
      pub(super) fn get_011405() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011406() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_011404() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011405(), get_011406()))
      }
      pub(super) fn get_011407() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_011409() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_011410() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011408() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011409(), get_011410()]))
      }
      pub(super) fn get_011403() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011404(),
          vec![get_011407(), get_011408()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011402() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011403()))
      }
      pub(super) fn get_011389() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011390(), get_011397(), get_011402()))
      }
      pub(super) fn get_011367() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_011368(),
          )],
          get_011389(),
        ))
      }
      pub(super) fn get_011361() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_011362(),
          )],
          get_011367(),
        ))
      }
      pub(super) fn get_011356() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_011357(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_011359(),
            ),
          ],
          get_011361(),
        ))
      }
      pub(super) fn get_011413() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011414() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_011412() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011413(), get_011414()))
      }
      pub(super) fn get_011415() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_011418() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011419() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_011417() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011418(), get_011419()))
      }
      pub(super) fn get_011420() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_011416() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011417(),
          vec![get_011420()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011421() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011411() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011412(),
          vec![get_011415(), get_011416(), get_011421()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011355() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_011356(),
          )],
          get_011411(),
        ))
      }
      pub(super) fn get_011349() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_011350(),
          )],
          get_011355(),
        ))
      }
      pub(super) fn get_011343() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_011344(),
          )],
          get_011349(),
        ))
      }
      pub(super) fn get_011337() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_011338(),
          )],
          get_011343(),
        ))
      }
      pub(super) fn get_011425() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011426() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_011424() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011425(), get_011426()))
      }
      pub(super) fn get_011427() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_011428() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011423() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011424(),
          vec![get_011427(), get_011428()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011422() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011423()))
      }
      pub(super) fn get_011329() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011330(), get_011337(), get_011422()))
      }
      pub(super) fn get_011324() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_011325(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_011327(),
            ),
          ],
          get_011329(),
        ))
      }
      pub(super) fn get_011429() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_011433() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_011434() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011432() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011433(), get_011434()))
      }
      pub(super) fn get_011436() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_011437() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011435() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011436(), get_011437()))
      }
      pub(super) fn get_011431() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011432(),
          )],
          get_011435(),
        ))
      }
      pub(super) fn get_011440() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_011441() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011439() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011440(), get_011441()))
      }
      pub(super) fn get_011442() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011438() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011439(),
          )],
          get_011442(),
        ))
      }
      pub(super) fn get_011446() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011447() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_011445() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011446(), get_011447()))
      }
      pub(super) fn get_011448() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011449() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_011444() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011445(),
          vec![get_011448(), get_011449()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011452() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011453() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_011451() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011452(), get_011453()))
      }
      pub(super) fn get_011454() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_011457() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011458() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_011456() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011457(), get_011458()))
      }
      pub(super) fn get_011461() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011462() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_011460() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011461(), get_011462()))
      }
      pub(super) fn get_011463() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_011459() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011460(),
          vec![get_011463()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011466() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_011465() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011466()))
      }
      pub(super) fn get_011469() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_011470() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_011468() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011469(), get_011470()))
      }
      pub(super) fn get_011473() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011472() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011473()]))
      }
      pub(super) fn get_011471() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011472()]))
      }
      pub(super) fn get_011467() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011468(),
          )],
          get_011471(),
        ))
      }
      pub(super) fn get_011464() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_011465(),
          )],
          get_011467(),
        ))
      }
      pub(super) fn get_011455() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011456(),
          vec![get_011459(), get_011464()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011450() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011451(),
          vec![get_011454(), get_011455()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011443() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_011444(),
          )],
          get_011450(),
        ))
      }
      pub(super) fn get_011430() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_011431(),
          get_011438(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_011443(),
        ))
      }
      pub(super) fn get_011476() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_011475() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011476()))
      }
      pub(super) fn get_011478() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_011477() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011478()))
      }
      pub(super) fn get_011483() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011484() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_011482() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011483(), get_011484()))
      }
      pub(super) fn get_011485() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 330u32)
        }))
      }
      pub(super) fn get_011481() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011482(),
          vec![get_011485()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011480() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_011481(),
        ))
      }
      pub(super) fn get_011488() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.max first param expected number, got ",
        ))
      }
      pub(super) fn get_011491() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011492() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_011490() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011491(), get_011492()))
      }
      pub(super) fn get_011493() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 330u32)
        }))
      }
      pub(super) fn get_011489() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011490(),
          vec![get_011493()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011487() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011488(),
          CoreBinaryOperator::Plus(None),
          get_011489(),
        ))
      }
      pub(super) fn get_011486() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011487()))
      }
      pub(super) fn get_011498() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011499() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_011497() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011498(), get_011499()))
      }
      pub(super) fn get_011500() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 331u32)
        }))
      }
      pub(super) fn get_011496() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011497(),
          vec![get_011500()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011495() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_011496(),
        ))
      }
      pub(super) fn get_011503() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.max second param expected number, got ",
        ))
      }
      pub(super) fn get_011506() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011507() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_011505() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011506(), get_011507()))
      }
      pub(super) fn get_011508() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 331u32)
        }))
      }
      pub(super) fn get_011504() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011505(),
          vec![get_011508()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011502() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011503(),
          CoreBinaryOperator::Plus(None),
          get_011504(),
        ))
      }
      pub(super) fn get_011501() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011502()))
      }
      pub(super) fn get_011511() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 330u32)
        }))
      }
      pub(super) fn get_011512() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 331u32)
        }))
      }
      pub(super) fn get_011510() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011511(),
          CoreBinaryOperator::GreaterThan(None),
          get_011512(),
        ))
      }
      pub(super) fn get_011513() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 330u32)
        }))
      }
      pub(super) fn get_011514() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 331u32)
        }))
      }
      pub(super) fn get_011509() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011510(), get_011513(), get_011514()))
      }
      pub(super) fn get_011494() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011495(), get_011501(), get_011509()))
      }
      pub(super) fn get_011479() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011480(), get_011486(), get_011494()))
      }
      pub(super) fn get_011474() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 330u32) },
              get_011475(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 331u32) },
              get_011477(),
            ),
          ],
          get_011479(),
        ))
      }
      pub(super) fn get_011317() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_011318()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_011319(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_011320(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_011324(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_011429(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_011430(),
            ),
          ],
          get_011474(),
        ))
      }
      pub(super) fn get_011515() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("min"))
      }
      pub(super) fn get_011517() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_011518() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_011521() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_011520() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011521()))
      }
      pub(super) fn get_011522() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_011519() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_011520(),
          )],
          get_011522(),
        ))
      }
      pub(super) fn get_011525() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_011524() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011525()))
      }
      pub(super) fn get_011527() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_011526() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011527()))
      }
      pub(super) fn get_011531() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011533() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011534() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011532() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011533(),
          CoreBinaryOperator::And(None),
          get_011534(),
        ))
      }
      pub(super) fn get_011530() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011531(),
          CoreBinaryOperator::GreaterThan(None),
          get_011532(),
        ))
      }
      pub(super) fn get_011535() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_011529() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011530(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_011535(),
        ))
      }
      pub(super) fn get_011539() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011540() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011538() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011539(), get_011540()))
      }
      pub(super) fn get_011541() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_011537() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011538(),
          vec![get_011541()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011545() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011546() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011544() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011545(), get_011546()))
      }
      pub(super) fn get_011547() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_011543() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011544(),
          vec![get_011547()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011551() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011552() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011550() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011551(), get_011552()))
      }
      pub(super) fn get_011553() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_011549() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011550(),
          vec![get_011553()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011557() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_011556() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011557()))
      }
      pub(super) fn get_011559() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_011558() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011559()))
      }
      pub(super) fn get_011563() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011564() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011562() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011563(), get_011564()))
      }
      pub(super) fn get_011565() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_011561() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011562(),
          vec![get_011565()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011569() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011570() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_011568() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011569(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011570(),
        ))
      }
      pub(super) fn get_011573() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011574() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_011572() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011573(),
          CoreBinaryOperator::Minus(None),
          get_011574(),
        ))
      }
      pub(super) fn get_011575() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_011571() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011572(),
          CoreBinaryOperator::Plus(None),
          get_011575(),
        ))
      }
      pub(super) fn get_011578() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011579() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_011577() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011578(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011579(),
        ))
      }
      pub(super) fn get_011582() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011583() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_011581() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011582(),
          CoreBinaryOperator::Minus(None),
          get_011583(),
        ))
      }
      pub(super) fn get_011584() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_011580() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011581(),
          CoreBinaryOperator::Plus(None),
          get_011584(),
        ))
      }
      pub(super) fn get_011586() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011587() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_011585() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011586(),
          CoreBinaryOperator::Minus(None),
          get_011587(),
        ))
      }
      pub(super) fn get_011576() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011577(), get_011580(), get_011585()))
      }
      pub(super) fn get_011567() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011568(), get_011571(), get_011576()))
      }
      pub(super) fn get_011591() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011593() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011594() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011592() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011593(),
          CoreBinaryOperator::And(None),
          get_011594(),
        ))
      }
      pub(super) fn get_011590() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011591(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011592(),
        ))
      }
      pub(super) fn get_011595() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011589() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011590(),
          CoreBinaryOperator::LessThan(None),
          get_011595(),
        ))
      }
      pub(super) fn get_011597() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011599() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_011600() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011598() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011599(),
          CoreBinaryOperator::Plus(None),
          get_011600(),
        ))
      }
      pub(super) fn get_011596() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011597(),
          CoreBinaryOperator::Mult(None),
          get_011598(),
        ))
      }
      pub(super) fn get_011604() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011605() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_011603() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011604(), get_011605()))
      }
      pub(super) fn get_011606() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_011608() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_011609() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011607() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011608(), get_011609()]))
      }
      pub(super) fn get_011602() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011603(),
          vec![get_011606(), get_011607()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011601() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011602()))
      }
      pub(super) fn get_011588() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011589(), get_011596(), get_011601()))
      }
      pub(super) fn get_011566() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_011567(),
          )],
          get_011588(),
        ))
      }
      pub(super) fn get_011560() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_011561(),
          )],
          get_011566(),
        ))
      }
      pub(super) fn get_011555() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_011556(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_011558(),
            ),
          ],
          get_011560(),
        ))
      }
      pub(super) fn get_011612() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011613() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_011611() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011612(), get_011613()))
      }
      pub(super) fn get_011614() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_011617() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011618() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_011616() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011617(), get_011618()))
      }
      pub(super) fn get_011619() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_011615() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011616(),
          vec![get_011619()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011620() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011610() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011611(),
          vec![get_011614(), get_011615(), get_011620()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011554() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_011555(),
          )],
          get_011610(),
        ))
      }
      pub(super) fn get_011548() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_011549(),
          )],
          get_011554(),
        ))
      }
      pub(super) fn get_011542() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_011543(),
          )],
          get_011548(),
        ))
      }
      pub(super) fn get_011536() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_011537(),
          )],
          get_011542(),
        ))
      }
      pub(super) fn get_011624() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011625() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_011623() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011624(), get_011625()))
      }
      pub(super) fn get_011626() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_011627() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011622() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011623(),
          vec![get_011626(), get_011627()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011621() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011622()))
      }
      pub(super) fn get_011528() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011529(), get_011536(), get_011621()))
      }
      pub(super) fn get_011523() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_011524(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_011526(),
            ),
          ],
          get_011528(),
        ))
      }
      pub(super) fn get_011628() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_011632() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_011633() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011631() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011632(), get_011633()))
      }
      pub(super) fn get_011635() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_011636() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011634() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011635(), get_011636()))
      }
      pub(super) fn get_011630() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011631(),
          )],
          get_011634(),
        ))
      }
      pub(super) fn get_011639() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_011640() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011638() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011639(), get_011640()))
      }
      pub(super) fn get_011641() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011637() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011638(),
          )],
          get_011641(),
        ))
      }
      pub(super) fn get_011645() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011646() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_011644() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011645(), get_011646()))
      }
      pub(super) fn get_011647() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011648() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_011643() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011644(),
          vec![get_011647(), get_011648()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011651() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011652() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_011650() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011651(), get_011652()))
      }
      pub(super) fn get_011653() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_011656() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011657() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_011655() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011656(), get_011657()))
      }
      pub(super) fn get_011660() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011661() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_011659() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011660(), get_011661()))
      }
      pub(super) fn get_011662() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_011658() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011659(),
          vec![get_011662()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011665() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_011664() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011665()))
      }
      pub(super) fn get_011668() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_011669() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_011667() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011668(), get_011669()))
      }
      pub(super) fn get_011672() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011671() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011672()]))
      }
      pub(super) fn get_011670() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011671()]))
      }
      pub(super) fn get_011666() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011667(),
          )],
          get_011670(),
        ))
      }
      pub(super) fn get_011663() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_011664(),
          )],
          get_011666(),
        ))
      }
      pub(super) fn get_011654() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011655(),
          vec![get_011658(), get_011663()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011649() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011650(),
          vec![get_011653(), get_011654()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011642() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_011643(),
          )],
          get_011649(),
        ))
      }
      pub(super) fn get_011629() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_011630(),
          get_011637(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_011642(),
        ))
      }
      pub(super) fn get_011675() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_011674() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011675()))
      }
      pub(super) fn get_011677() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_011676() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011677()))
      }
      pub(super) fn get_011682() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011683() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_011681() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011682(), get_011683()))
      }
      pub(super) fn get_011684() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 332u32)
        }))
      }
      pub(super) fn get_011680() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011681(),
          vec![get_011684()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011679() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_011680(),
        ))
      }
      pub(super) fn get_011687() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.max first param expected number, got ",
        ))
      }
      pub(super) fn get_011690() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011691() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_011689() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011690(), get_011691()))
      }
      pub(super) fn get_011692() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 332u32)
        }))
      }
      pub(super) fn get_011688() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011689(),
          vec![get_011692()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011686() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011687(),
          CoreBinaryOperator::Plus(None),
          get_011688(),
        ))
      }
      pub(super) fn get_011685() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011686()))
      }
      pub(super) fn get_011697() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011698() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_011696() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011697(), get_011698()))
      }
      pub(super) fn get_011699() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 333u32)
        }))
      }
      pub(super) fn get_011695() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011696(),
          vec![get_011699()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011694() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_011695(),
        ))
      }
      pub(super) fn get_011702() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "std.max second param expected number, got ",
        ))
      }
      pub(super) fn get_011705() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011706() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_011704() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011705(), get_011706()))
      }
      pub(super) fn get_011707() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 333u32)
        }))
      }
      pub(super) fn get_011703() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011704(),
          vec![get_011707()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011701() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011702(),
          CoreBinaryOperator::Plus(None),
          get_011703(),
        ))
      }
      pub(super) fn get_011700() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011701()))
      }
      pub(super) fn get_011710() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 332u32)
        }))
      }
      pub(super) fn get_011711() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 333u32)
        }))
      }
      pub(super) fn get_011709() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011710(),
          CoreBinaryOperator::LessThan(None),
          get_011711(),
        ))
      }
      pub(super) fn get_011712() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 332u32)
        }))
      }
      pub(super) fn get_011713() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 333u32)
        }))
      }
      pub(super) fn get_011708() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011709(), get_011712(), get_011713()))
      }
      pub(super) fn get_011693() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011694(), get_011700(), get_011708()))
      }
      pub(super) fn get_011678() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011679(), get_011685(), get_011693()))
      }
      pub(super) fn get_011673() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 332u32) },
              get_011674(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 333u32) },
              get_011676(),
            ),
          ],
          get_011678(),
        ))
      }
      pub(super) fn get_011516() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_011517()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_011518(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_011519(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_011523(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_011628(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_011629(),
            ),
          ],
          get_011673(),
        ))
      }
      pub(super) fn get_011714() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("clamp"))
      }
      pub(super) fn get_011716() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_011717() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_011720() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_011719() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011720()))
      }
      pub(super) fn get_011721() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_011718() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_011719(),
          )],
          get_011721(),
        ))
      }
      pub(super) fn get_011724() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_011723() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011724()))
      }
      pub(super) fn get_011726() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_011725() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011726()))
      }
      pub(super) fn get_011730() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011732() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011733() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011731() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011732(),
          CoreBinaryOperator::And(None),
          get_011733(),
        ))
      }
      pub(super) fn get_011729() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011730(),
          CoreBinaryOperator::GreaterThan(None),
          get_011731(),
        ))
      }
      pub(super) fn get_011734() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_011728() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011729(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_011734(),
        ))
      }
      pub(super) fn get_011738() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011739() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011737() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011738(), get_011739()))
      }
      pub(super) fn get_011740() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_011736() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011737(),
          vec![get_011740()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011744() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011745() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011743() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011744(), get_011745()))
      }
      pub(super) fn get_011746() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_011742() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011743(),
          vec![get_011746()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011750() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011751() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011749() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011750(), get_011751()))
      }
      pub(super) fn get_011752() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_011748() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011749(),
          vec![get_011752()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011756() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_011755() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011756()))
      }
      pub(super) fn get_011758() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_011757() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011758()))
      }
      pub(super) fn get_011762() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011763() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011761() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011762(), get_011763()))
      }
      pub(super) fn get_011764() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_011760() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011761(),
          vec![get_011764()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011768() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011769() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_011767() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011768(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011769(),
        ))
      }
      pub(super) fn get_011772() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011773() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_011771() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011772(),
          CoreBinaryOperator::Minus(None),
          get_011773(),
        ))
      }
      pub(super) fn get_011774() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_011770() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011771(),
          CoreBinaryOperator::Plus(None),
          get_011774(),
        ))
      }
      pub(super) fn get_011777() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011778() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_011776() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011777(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011778(),
        ))
      }
      pub(super) fn get_011781() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011782() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_011780() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011781(),
          CoreBinaryOperator::Minus(None),
          get_011782(),
        ))
      }
      pub(super) fn get_011783() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_011779() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011780(),
          CoreBinaryOperator::Plus(None),
          get_011783(),
        ))
      }
      pub(super) fn get_011785() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011786() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_011784() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011785(),
          CoreBinaryOperator::Minus(None),
          get_011786(),
        ))
      }
      pub(super) fn get_011775() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011776(), get_011779(), get_011784()))
      }
      pub(super) fn get_011766() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011767(), get_011770(), get_011775()))
      }
      pub(super) fn get_011790() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011792() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011793() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011791() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011792(),
          CoreBinaryOperator::And(None),
          get_011793(),
        ))
      }
      pub(super) fn get_011789() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011790(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011791(),
        ))
      }
      pub(super) fn get_011794() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011788() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011789(),
          CoreBinaryOperator::LessThan(None),
          get_011794(),
        ))
      }
      pub(super) fn get_011796() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011798() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_011799() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011797() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011798(),
          CoreBinaryOperator::Plus(None),
          get_011799(),
        ))
      }
      pub(super) fn get_011795() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011796(),
          CoreBinaryOperator::Mult(None),
          get_011797(),
        ))
      }
      pub(super) fn get_011803() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011804() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_011802() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011803(), get_011804()))
      }
      pub(super) fn get_011805() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_011807() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_011808() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011806() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011807(), get_011808()]))
      }
      pub(super) fn get_011801() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011802(),
          vec![get_011805(), get_011806()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011800() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011801()))
      }
      pub(super) fn get_011787() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011788(), get_011795(), get_011800()))
      }
      pub(super) fn get_011765() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_011766(),
          )],
          get_011787(),
        ))
      }
      pub(super) fn get_011759() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_011760(),
          )],
          get_011765(),
        ))
      }
      pub(super) fn get_011754() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_011755(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_011757(),
            ),
          ],
          get_011759(),
        ))
      }
      pub(super) fn get_011811() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011812() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_011810() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011811(), get_011812()))
      }
      pub(super) fn get_011813() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_011816() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011817() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_011815() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011816(), get_011817()))
      }
      pub(super) fn get_011818() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_011814() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011815(),
          vec![get_011818()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011819() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011809() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011810(),
          vec![get_011813(), get_011814(), get_011819()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011753() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_011754(),
          )],
          get_011809(),
        ))
      }
      pub(super) fn get_011747() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_011748(),
          )],
          get_011753(),
        ))
      }
      pub(super) fn get_011741() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_011742(),
          )],
          get_011747(),
        ))
      }
      pub(super) fn get_011735() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_011736(),
          )],
          get_011741(),
        ))
      }
      pub(super) fn get_011823() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011824() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_011822() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011823(), get_011824()))
      }
      pub(super) fn get_011825() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_011826() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011821() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011822(),
          vec![get_011825(), get_011826()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011820() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011821()))
      }
      pub(super) fn get_011727() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011728(), get_011735(), get_011820()))
      }
      pub(super) fn get_011722() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_011723(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_011725(),
            ),
          ],
          get_011727(),
        ))
      }
      pub(super) fn get_011827() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_011831() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_011832() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011830() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011831(), get_011832()))
      }
      pub(super) fn get_011834() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_011835() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011833() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011834(), get_011835()))
      }
      pub(super) fn get_011829() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011830(),
          )],
          get_011833(),
        ))
      }
      pub(super) fn get_011838() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_011839() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011837() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011838(), get_011839()))
      }
      pub(super) fn get_011840() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011836() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011837(),
          )],
          get_011840(),
        ))
      }
      pub(super) fn get_011844() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011845() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_011843() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011844(), get_011845()))
      }
      pub(super) fn get_011846() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011847() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_011842() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011843(),
          vec![get_011846(), get_011847()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011850() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011851() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_011849() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011850(), get_011851()))
      }
      pub(super) fn get_011852() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_011855() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011856() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_011854() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011855(), get_011856()))
      }
      pub(super) fn get_011859() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011860() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_011858() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011859(), get_011860()))
      }
      pub(super) fn get_011861() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_011857() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011858(),
          vec![get_011861()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011864() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_011863() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011864()))
      }
      pub(super) fn get_011867() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_011868() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_011866() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011867(), get_011868()))
      }
      pub(super) fn get_011871() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_011870() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011871()]))
      }
      pub(super) fn get_011869() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011870()]))
      }
      pub(super) fn get_011865() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_011866(),
          )],
          get_011869(),
        ))
      }
      pub(super) fn get_011862() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_011863(),
          )],
          get_011865(),
        ))
      }
      pub(super) fn get_011853() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011854(),
          vec![get_011857(), get_011862()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011848() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011849(),
          vec![get_011852(), get_011853()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011841() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_011842(),
          )],
          get_011848(),
        ))
      }
      pub(super) fn get_011828() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_011829(),
          get_011836(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_011841(),
        ))
      }
      pub(super) fn get_011874() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_011873() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011874()))
      }
      pub(super) fn get_011876() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'minVal' not bound"))
      }
      pub(super) fn get_011875() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011876()))
      }
      pub(super) fn get_011878() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'maxVal' not bound"))
      }
      pub(super) fn get_011877() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011878()))
      }
      pub(super) fn get_011881() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 334u32)
        }))
      }
      pub(super) fn get_011882() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("minVal", 335u32)
        }))
      }
      pub(super) fn get_011880() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011881(),
          CoreBinaryOperator::LessThan(None),
          get_011882(),
        ))
      }
      pub(super) fn get_011883() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("minVal", 335u32)
        }))
      }
      pub(super) fn get_011886() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 334u32)
        }))
      }
      pub(super) fn get_011887() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("maxVal", 336u32)
        }))
      }
      pub(super) fn get_011885() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011886(),
          CoreBinaryOperator::GreaterThan(None),
          get_011887(),
        ))
      }
      pub(super) fn get_011888() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("maxVal", 336u32)
        }))
      }
      pub(super) fn get_011889() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 334u32)
        }))
      }
      pub(super) fn get_011884() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011885(), get_011888(), get_011889()))
      }
      pub(super) fn get_011879() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011880(), get_011883(), get_011884()))
      }
      pub(super) fn get_011872() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("x", 334u32) },
              get_011873(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("minVal", 335u32) },
              get_011875(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("maxVal", 336u32) },
              get_011877(),
            ),
          ],
          get_011879(),
        ))
      }
      pub(super) fn get_011715() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_011716()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_011717(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_011718(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_011722(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_011827(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_011828(),
            ),
          ],
          get_011872(),
        ))
      }
      pub(super) fn get_011890() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("flattenArrays"))
      }
      pub(super) fn get_011892() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_011893() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_011896() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_011895() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011896()))
      }
      pub(super) fn get_011897() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_011894() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_011895(),
          )],
          get_011897(),
        ))
      }
      pub(super) fn get_011900() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_011899() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011900()))
      }
      pub(super) fn get_011902() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_011901() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011902()))
      }
      pub(super) fn get_011906() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011908() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011909() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011907() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011908(),
          CoreBinaryOperator::And(None),
          get_011909(),
        ))
      }
      pub(super) fn get_011905() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011906(),
          CoreBinaryOperator::GreaterThan(None),
          get_011907(),
        ))
      }
      pub(super) fn get_011910() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_011904() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011905(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_011910(),
        ))
      }
      pub(super) fn get_011914() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011915() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011913() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011914(), get_011915()))
      }
      pub(super) fn get_011916() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_011912() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011913(),
          vec![get_011916()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011920() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011921() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011919() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011920(), get_011921()))
      }
      pub(super) fn get_011922() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_011918() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011919(),
          vec![get_011922()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011926() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011927() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011925() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011926(), get_011927()))
      }
      pub(super) fn get_011928() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_011924() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011925(),
          vec![get_011928()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011932() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_011931() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011932()))
      }
      pub(super) fn get_011934() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_011933() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011934()))
      }
      pub(super) fn get_011938() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011939() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_011937() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011938(), get_011939()))
      }
      pub(super) fn get_011940() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_011936() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011937(),
          vec![get_011940()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011944() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011945() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_011943() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011944(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011945(),
        ))
      }
      pub(super) fn get_011948() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011949() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_011947() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011948(),
          CoreBinaryOperator::Minus(None),
          get_011949(),
        ))
      }
      pub(super) fn get_011950() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_011946() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011947(),
          CoreBinaryOperator::Plus(None),
          get_011950(),
        ))
      }
      pub(super) fn get_011953() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011954() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_011952() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011953(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011954(),
        ))
      }
      pub(super) fn get_011957() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011958() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_011956() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011957(),
          CoreBinaryOperator::Minus(None),
          get_011958(),
        ))
      }
      pub(super) fn get_011959() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_011955() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011956(),
          CoreBinaryOperator::Plus(None),
          get_011959(),
        ))
      }
      pub(super) fn get_011961() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_011962() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_011960() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011961(),
          CoreBinaryOperator::Minus(None),
          get_011962(),
        ))
      }
      pub(super) fn get_011951() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011952(), get_011955(), get_011960()))
      }
      pub(super) fn get_011942() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011943(), get_011946(), get_011951()))
      }
      pub(super) fn get_011966() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011968() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011969() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011967() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011968(),
          CoreBinaryOperator::And(None),
          get_011969(),
        ))
      }
      pub(super) fn get_011965() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011966(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_011967(),
        ))
      }
      pub(super) fn get_011970() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011964() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011965(),
          CoreBinaryOperator::LessThan(None),
          get_011970(),
        ))
      }
      pub(super) fn get_011972() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011974() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_011975() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_011973() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011974(),
          CoreBinaryOperator::Plus(None),
          get_011975(),
        ))
      }
      pub(super) fn get_011971() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_011972(),
          CoreBinaryOperator::Mult(None),
          get_011973(),
        ))
      }
      pub(super) fn get_011979() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011980() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_011978() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011979(), get_011980()))
      }
      pub(super) fn get_011981() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_011983() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_011984() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011982() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_011983(), get_011984()]))
      }
      pub(super) fn get_011977() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011978(),
          vec![get_011981(), get_011982()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011976() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011977()))
      }
      pub(super) fn get_011963() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011964(), get_011971(), get_011976()))
      }
      pub(super) fn get_011941() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_011942(),
          )],
          get_011963(),
        ))
      }
      pub(super) fn get_011935() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_011936(),
          )],
          get_011941(),
        ))
      }
      pub(super) fn get_011930() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_011931(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_011933(),
            ),
          ],
          get_011935(),
        ))
      }
      pub(super) fn get_011987() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011988() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_011986() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011987(), get_011988()))
      }
      pub(super) fn get_011989() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_011992() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_011993() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_011991() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011992(), get_011993()))
      }
      pub(super) fn get_011994() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_011990() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011991(),
          vec![get_011994()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011995() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_011985() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011986(),
          vec![get_011989(), get_011990(), get_011995()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011929() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_011930(),
          )],
          get_011985(),
        ))
      }
      pub(super) fn get_011923() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_011924(),
          )],
          get_011929(),
        ))
      }
      pub(super) fn get_011917() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_011918(),
          )],
          get_011923(),
        ))
      }
      pub(super) fn get_011911() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_011912(),
          )],
          get_011917(),
        ))
      }
      pub(super) fn get_011999() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012000() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_011998() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_011999(), get_012000()))
      }
      pub(super) fn get_012001() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_012002() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_011997() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_011998(),
          vec![get_012001(), get_012002()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_011996() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_011997()))
      }
      pub(super) fn get_011903() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_011904(), get_011911(), get_011996()))
      }
      pub(super) fn get_011898() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_011899(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_011901(),
            ),
          ],
          get_011903(),
        ))
      }
      pub(super) fn get_012003() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_012007() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_012008() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012006() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012007(), get_012008()))
      }
      pub(super) fn get_012010() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_012011() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012009() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012010(), get_012011()))
      }
      pub(super) fn get_012005() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012006(),
          )],
          get_012009(),
        ))
      }
      pub(super) fn get_012014() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_012015() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012013() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012014(), get_012015()))
      }
      pub(super) fn get_012016() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012012() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012013(),
          )],
          get_012016(),
        ))
      }
      pub(super) fn get_012020() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012021() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_012019() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012020(), get_012021()))
      }
      pub(super) fn get_012022() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012023() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_012018() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012019(),
          vec![get_012022(), get_012023()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012026() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012027() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_012025() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012026(), get_012027()))
      }
      pub(super) fn get_012028() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_012031() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012032() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_012030() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012031(), get_012032()))
      }
      pub(super) fn get_012035() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012036() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_012034() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012035(), get_012036()))
      }
      pub(super) fn get_012037() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_012033() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012034(),
          vec![get_012037()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012040() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_012039() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012040()))
      }
      pub(super) fn get_012043() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_012044() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_012042() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012043(), get_012044()))
      }
      pub(super) fn get_012047() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012046() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012047()]))
      }
      pub(super) fn get_012045() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012046()]))
      }
      pub(super) fn get_012041() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012042(),
          )],
          get_012045(),
        ))
      }
      pub(super) fn get_012038() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_012039(),
          )],
          get_012041(),
        ))
      }
      pub(super) fn get_012029() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012030(),
          vec![get_012033(), get_012038()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012024() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012025(),
          vec![get_012028(), get_012029()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012017() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_012018(),
          )],
          get_012024(),
        ))
      }
      pub(super) fn get_012004() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_012005(),
          get_012012(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_012017(),
        ))
      }
      pub(super) fn get_012050() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arrs' not bound"))
      }
      pub(super) fn get_012049() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012050()))
      }
      pub(super) fn get_012053() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012054() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_012052() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012053(), get_012054()))
      }
      pub(super) fn get_012057() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_012056() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012057()))
      }
      pub(super) fn get_012059() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_012058() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012059()))
      }
      pub(super) fn get_012061() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 338u32)
        }))
      }
      pub(super) fn get_012062() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 339u32)
        }))
      }
      pub(super) fn get_012060() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012061(),
          CoreBinaryOperator::Plus(None),
          get_012062(),
        ))
      }
      pub(super) fn get_012055() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 338u32) },
              get_012056(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 339u32) },
              get_012058(),
            ),
          ],
          get_012060(),
        ))
      }
      pub(super) fn get_012063() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arrs", 337u32)
        }))
      }
      pub(super) fn get_012064() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_012051() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012052(),
          vec![get_012055(), get_012063(), get_012064()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012048() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("arrs", 337u32) },
            get_012049(),
          )],
          get_012051(),
        ))
      }
      pub(super) fn get_011891() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_011892()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_011893(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_011894(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_011898(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_012003(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_012004(),
            ),
          ],
          get_012048(),
        ))
      }
      pub(super) fn get_012065() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestIni"))
      }
      pub(super) fn get_012067() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_012068() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_012071() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_012070() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012071()))
      }
      pub(super) fn get_012072() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_012069() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_012070(),
          )],
          get_012072(),
        ))
      }
      pub(super) fn get_012075() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_012074() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012075()))
      }
      pub(super) fn get_012077() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_012076() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012077()))
      }
      pub(super) fn get_012081() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012083() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012084() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012082() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012083(),
          CoreBinaryOperator::And(None),
          get_012084(),
        ))
      }
      pub(super) fn get_012080() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012081(),
          CoreBinaryOperator::GreaterThan(None),
          get_012082(),
        ))
      }
      pub(super) fn get_012085() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_012079() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012080(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_012085(),
        ))
      }
      pub(super) fn get_012089() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012090() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012088() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012089(), get_012090()))
      }
      pub(super) fn get_012091() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_012087() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012088(),
          vec![get_012091()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012095() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012096() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012094() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012095(), get_012096()))
      }
      pub(super) fn get_012097() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_012093() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012094(),
          vec![get_012097()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012101() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012102() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012100() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012101(), get_012102()))
      }
      pub(super) fn get_012103() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_012099() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012100(),
          vec![get_012103()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012107() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_012106() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012107()))
      }
      pub(super) fn get_012109() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_012108() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012109()))
      }
      pub(super) fn get_012113() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012114() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012112() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012113(), get_012114()))
      }
      pub(super) fn get_012115() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_012111() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012112(),
          vec![get_012115()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012119() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012120() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_012118() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012119(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012120(),
        ))
      }
      pub(super) fn get_012123() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012124() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_012122() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012123(),
          CoreBinaryOperator::Minus(None),
          get_012124(),
        ))
      }
      pub(super) fn get_012125() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_012121() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012122(),
          CoreBinaryOperator::Plus(None),
          get_012125(),
        ))
      }
      pub(super) fn get_012128() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012129() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_012127() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012128(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012129(),
        ))
      }
      pub(super) fn get_012132() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012133() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_012131() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012132(),
          CoreBinaryOperator::Minus(None),
          get_012133(),
        ))
      }
      pub(super) fn get_012134() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_012130() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012131(),
          CoreBinaryOperator::Plus(None),
          get_012134(),
        ))
      }
      pub(super) fn get_012136() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012137() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_012135() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012136(),
          CoreBinaryOperator::Minus(None),
          get_012137(),
        ))
      }
      pub(super) fn get_012126() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012127(), get_012130(), get_012135()))
      }
      pub(super) fn get_012117() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012118(), get_012121(), get_012126()))
      }
      pub(super) fn get_012141() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_012143() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012144() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_012142() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012143(),
          CoreBinaryOperator::And(None),
          get_012144(),
        ))
      }
      pub(super) fn get_012140() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012141(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012142(),
        ))
      }
      pub(super) fn get_012145() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012139() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012140(),
          CoreBinaryOperator::LessThan(None),
          get_012145(),
        ))
      }
      pub(super) fn get_012147() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012149() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_012150() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_012148() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012149(),
          CoreBinaryOperator::Plus(None),
          get_012150(),
        ))
      }
      pub(super) fn get_012146() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012147(),
          CoreBinaryOperator::Mult(None),
          get_012148(),
        ))
      }
      pub(super) fn get_012154() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012155() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012153() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012154(), get_012155()))
      }
      pub(super) fn get_012156() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_012158() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_012159() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012157() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012158(), get_012159()]))
      }
      pub(super) fn get_012152() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012153(),
          vec![get_012156(), get_012157()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012151() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012152()))
      }
      pub(super) fn get_012138() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012139(), get_012146(), get_012151()))
      }
      pub(super) fn get_012116() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_012117(),
          )],
          get_012138(),
        ))
      }
      pub(super) fn get_012110() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_012111(),
          )],
          get_012116(),
        ))
      }
      pub(super) fn get_012105() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_012106(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_012108(),
            ),
          ],
          get_012110(),
        ))
      }
      pub(super) fn get_012162() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012163() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_012161() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012162(), get_012163()))
      }
      pub(super) fn get_012164() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_012167() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012168() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_012166() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012167(), get_012168()))
      }
      pub(super) fn get_012169() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_012165() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012166(),
          vec![get_012169()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012170() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012160() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012161(),
          vec![get_012164(), get_012165(), get_012170()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012104() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_012105(),
          )],
          get_012160(),
        ))
      }
      pub(super) fn get_012098() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_012099(),
          )],
          get_012104(),
        ))
      }
      pub(super) fn get_012092() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_012093(),
          )],
          get_012098(),
        ))
      }
      pub(super) fn get_012086() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_012087(),
          )],
          get_012092(),
        ))
      }
      pub(super) fn get_012174() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012175() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012173() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012174(), get_012175()))
      }
      pub(super) fn get_012176() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_012177() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012172() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012173(),
          vec![get_012176(), get_012177()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012171() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012172()))
      }
      pub(super) fn get_012078() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012079(), get_012086(), get_012171()))
      }
      pub(super) fn get_012073() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_012074(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_012076(),
            ),
          ],
          get_012078(),
        ))
      }
      pub(super) fn get_012178() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_012182() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_012183() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012181() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012182(), get_012183()))
      }
      pub(super) fn get_012185() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_012186() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012184() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012185(), get_012186()))
      }
      pub(super) fn get_012180() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012181(),
          )],
          get_012184(),
        ))
      }
      pub(super) fn get_012189() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_012190() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012188() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012189(), get_012190()))
      }
      pub(super) fn get_012191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012187() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012188(),
          )],
          get_012191(),
        ))
      }
      pub(super) fn get_012195() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012196() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_012194() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012195(), get_012196()))
      }
      pub(super) fn get_012197() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012198() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_012193() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012194(),
          vec![get_012197(), get_012198()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012201() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012202() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_012200() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012201(), get_012202()))
      }
      pub(super) fn get_012203() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_012206() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012207() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_012205() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012206(), get_012207()))
      }
      pub(super) fn get_012210() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012211() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_012209() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012210(), get_012211()))
      }
      pub(super) fn get_012212() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_012208() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012209(),
          vec![get_012212()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012215() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_012214() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012215()))
      }
      pub(super) fn get_012218() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_012219() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_012217() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012218(), get_012219()))
      }
      pub(super) fn get_012222() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012221() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012222()]))
      }
      pub(super) fn get_012220() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012221()]))
      }
      pub(super) fn get_012216() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012217(),
          )],
          get_012220(),
        ))
      }
      pub(super) fn get_012213() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_012214(),
          )],
          get_012216(),
        ))
      }
      pub(super) fn get_012204() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012205(),
          vec![get_012208(), get_012213()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012199() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012200(),
          vec![get_012203(), get_012204()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012192() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_012193(),
          )],
          get_012199(),
        ))
      }
      pub(super) fn get_012179() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_012180(),
          get_012187(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_012192(),
        ))
      }
      pub(super) fn get_012225() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'ini' not bound"))
      }
      pub(super) fn get_012224() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012225()))
      }
      pub(super) fn get_012229() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'body' not bound"))
      }
      pub(super) fn get_012228() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012229()))
      }
      pub(super) fn get_012232() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012233() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_012231() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012232(), get_012233()))
      }
      pub(super) fn get_012234() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_012238() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012239() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_012237() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012238(), get_012239()))
      }
      pub(super) fn get_012240() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("body", 342u32)
        }))
      }
      pub(super) fn get_012236() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012237(),
          vec![get_012240()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012243() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012244() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_012242() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012243(), get_012244()))
      }
      pub(super) fn get_012245() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_012248() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012249() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_012247() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012248(), get_012249()))
      }
      pub(super) fn get_012252() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012253() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_012251() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012252(), get_012253()))
      }
      pub(super) fn get_012254() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 348u32)
        }))
      }
      pub(super) fn get_012250() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012251(),
          vec![get_012254()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012257() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_012256() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012257()))
      }
      pub(super) fn get_012260() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 348u32)
        }))
      }
      pub(super) fn get_012261() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 349u32)
        }))
      }
      pub(super) fn get_012259() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012260(), get_012261()))
      }
      pub(super) fn get_012265() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("body", 342u32)
        }))
      }
      pub(super) fn get_012266() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 343u32)
        }))
      }
      pub(super) fn get_012264() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012265(), get_012266()))
      }
      pub(super) fn get_012270() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012271() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_012269() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012270(), get_012271()))
      }
      pub(super) fn get_012272() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value_or_values", 344u32)
        }))
      }
      pub(super) fn get_012268() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012269(),
          vec![get_012272()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012274() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value_or_values", 344u32)
        }))
      }
      pub(super) fn get_012277() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012278() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_012276() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012277(), get_012278()))
      }
      pub(super) fn get_012279() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_012282() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012283() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_012281() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012282(), get_012283()))
      }
      pub(super) fn get_012286() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012287() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_012285() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012286(), get_012287()))
      }
      pub(super) fn get_012288() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 346u32)
        }))
      }
      pub(super) fn get_012284() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012285(),
          vec![get_012288()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012291() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_012290() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012291()))
      }
      pub(super) fn get_012294() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 346u32)
        }))
      }
      pub(super) fn get_012295() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 347u32)
        }))
      }
      pub(super) fn get_012293() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012294(), get_012295()))
      }
      pub(super) fn get_012299() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012300() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012298() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012299(), get_012300()))
      }
      pub(super) fn get_012301() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s = %s"))
      }
      pub(super) fn get_012303() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 343u32)
        }))
      }
      pub(super) fn get_012304() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 345u32)
        }))
      }
      pub(super) fn get_012302() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012303(), get_012304()]))
      }
      pub(super) fn get_012297() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012298(),
          vec![get_012301(), get_012302()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012296() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012297()]))
      }
      pub(super) fn get_012292() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("value", 345u32) },
            get_012293(),
          )],
          get_012296(),
        ))
      }
      pub(super) fn get_012289() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 347u32) },
            get_012290(),
          )],
          get_012292(),
        ))
      }
      pub(super) fn get_012280() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012281(),
          vec![get_012284(), get_012289()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012275() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012276(),
          vec![get_012279(), get_012280()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012273() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 346u32) },
            get_012274(),
          )],
          get_012275(),
        ))
      }
      pub(super) fn get_012308() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012309() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012307() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012308(), get_012309()))
      }
      pub(super) fn get_012310() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s = %s"))
      }
      pub(super) fn get_012312() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 343u32)
        }))
      }
      pub(super) fn get_012313() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value_or_values", 344u32)
        }))
      }
      pub(super) fn get_012311() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012312(), get_012313()]))
      }
      pub(super) fn get_012306() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012307(),
          vec![get_012310(), get_012311()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012305() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012306()]))
      }
      pub(super) fn get_012267() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012268(), get_012273(), get_012305()))
      }
      pub(super) fn get_012263() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("value_or_values", 344u32) },
            get_012264(),
          )],
          get_012267(),
        ))
      }
      pub(super) fn get_012262() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012263()]))
      }
      pub(super) fn get_012258() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 343u32) },
            get_012259(),
          )],
          get_012262(),
        ))
      }
      pub(super) fn get_012255() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 349u32) },
            get_012256(),
          )],
          get_012258(),
        ))
      }
      pub(super) fn get_012246() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012247(),
          vec![get_012250(), get_012255()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012241() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012242(),
          vec![get_012245(), get_012246()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012235() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 348u32) },
            get_012236(),
          )],
          get_012241(),
        ))
      }
      pub(super) fn get_012230() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012231(),
          vec![get_012234(), get_012235()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012227() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("body", 342u32) },
            get_012228(),
          )],
          get_012230(),
        ))
      }
      pub(super) fn get_012317() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'sname' not bound"))
      }
      pub(super) fn get_012316() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012317()))
      }
      pub(super) fn get_012319() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'sbody' not bound"))
      }
      pub(super) fn get_012318() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012319()))
      }
      pub(super) fn get_012324() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012325() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012323() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012324(), get_012325()))
      }
      pub(super) fn get_012326() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("[%s]"))
      }
      pub(super) fn get_012328() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("sname", 353u32)
        }))
      }
      pub(super) fn get_012327() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012328()]))
      }
      pub(super) fn get_012322() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012323(),
          vec![get_012326(), get_012327()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012321() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012322()]))
      }
      pub(super) fn get_012330() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("body_lines", 341u32)
        }))
      }
      pub(super) fn get_012331() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("sbody", 354u32)
        }))
      }
      pub(super) fn get_012329() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012330(),
          vec![get_012331()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012320() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012321(),
          CoreBinaryOperator::Plus(None),
          get_012329(),
        ))
      }
      pub(super) fn get_012315() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("sname", 353u32) },
              get_012316(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("sbody", 354u32) },
              get_012318(),
            ),
          ],
          get_012320(),
        ))
      }
      pub(super) fn get_012335() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012336() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectHas"))
      }
      pub(super) fn get_012334() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012335(), get_012336()))
      }
      pub(super) fn get_012337() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ini", 340u32)
        }))
      }
      pub(super) fn get_012338() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("main"))
      }
      pub(super) fn get_012333() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012334(),
          vec![get_012337(), get_012338()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012340() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("body_lines", 341u32)
        }))
      }
      pub(super) fn get_012342() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ini", 340u32)
        }))
      }
      pub(super) fn get_012343() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("main"))
      }
      pub(super) fn get_012341() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012342(), get_012343()))
      }
      pub(super) fn get_012339() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012340(),
          vec![get_012341()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012344() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_012332() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012333(), get_012339(), get_012344()))
      }
      pub(super) fn get_012348() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012349() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_012347() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012348(), get_012349()))
      }
      pub(super) fn get_012351() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ini", 340u32)
        }))
      }
      pub(super) fn get_012352() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("sections"))
      }
      pub(super) fn get_012350() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012351(), get_012352()))
      }
      pub(super) fn get_012346() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012347(),
          vec![get_012350()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012355() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012356() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_012354() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012355(), get_012356()))
      }
      pub(super) fn get_012357() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_012360() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012361() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_012359() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012360(), get_012361()))
      }
      pub(super) fn get_012364() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012365() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_012363() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012364(), get_012365()))
      }
      pub(super) fn get_012366() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 356u32)
        }))
      }
      pub(super) fn get_012362() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012363(),
          vec![get_012366()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012369() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_012368() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012369()))
      }
      pub(super) fn get_012372() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 356u32)
        }))
      }
      pub(super) fn get_012373() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 357u32)
        }))
      }
      pub(super) fn get_012371() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012372(), get_012373()))
      }
      pub(super) fn get_012376() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("section_lines", 350u32)
        }))
      }
      pub(super) fn get_012377() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 355u32)
        }))
      }
      pub(super) fn get_012380() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ini", 340u32)
        }))
      }
      pub(super) fn get_012381() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("sections"))
      }
      pub(super) fn get_012379() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012380(), get_012381()))
      }
      pub(super) fn get_012382() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 355u32)
        }))
      }
      pub(super) fn get_012378() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012379(), get_012382()))
      }
      pub(super) fn get_012375() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012376(),
          vec![get_012377(), get_012378()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012374() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012375()]))
      }
      pub(super) fn get_012370() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 355u32) },
            get_012371(),
          )],
          get_012374(),
        ))
      }
      pub(super) fn get_012367() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 357u32) },
            get_012368(),
          )],
          get_012370(),
        ))
      }
      pub(super) fn get_012358() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012359(),
          vec![get_012362(), get_012367()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012353() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012354(),
          vec![get_012357(), get_012358()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012345() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 356u32) },
            get_012346(),
          )],
          get_012353(),
        ))
      }
      pub(super) fn get_012385() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012386() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_012384() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012385(), get_012386()))
      }
      pub(super) fn get_012387() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_012390() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("main_body", 351u32)
        }))
      }
      pub(super) fn get_012393() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012394() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("flattenArrays"))
      }
      pub(super) fn get_012392() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012393(), get_012394()))
      }
      pub(super) fn get_012395() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("all_sections", 352u32)
        }))
      }
      pub(super) fn get_012391() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012392(),
          vec![get_012395()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012389() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012390(),
          CoreBinaryOperator::Plus(None),
          get_012391(),
        ))
      }
      pub(super) fn get_012397() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_012396() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012397()]))
      }
      pub(super) fn get_012388() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012389(),
          CoreBinaryOperator::Plus(None),
          get_012396(),
        ))
      }
      pub(super) fn get_012383() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012384(),
          vec![get_012387(), get_012388()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012314() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("section_lines", 350u32) },
              get_012315(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("main_body", 351u32) },
              get_012332(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("all_sections", 352u32) },
              get_012345(),
            ),
          ],
          get_012383(),
        ))
      }
      pub(super) fn get_012226() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("body_lines", 341u32) },
            get_012227(),
          )],
          get_012314(),
        ))
      }
      pub(super) fn get_012223() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("ini", 340u32) },
            get_012224(),
          )],
          get_012226(),
        ))
      }
      pub(super) fn get_012066() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_012067()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_012068(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_012069(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_012073(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_012178(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_012179(),
            ),
          ],
          get_012223(),
        ))
      }
      pub(super) fn get_012398() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("escapeStringJson"))
      }
      pub(super) fn get_012400() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_012401() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_012404() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_012403() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012404()))
      }
      pub(super) fn get_012405() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_012402() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_012403(),
          )],
          get_012405(),
        ))
      }
      pub(super) fn get_012408() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_012407() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012408()))
      }
      pub(super) fn get_012410() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_012409() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012410()))
      }
      pub(super) fn get_012414() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012416() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012417() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012415() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012416(),
          CoreBinaryOperator::And(None),
          get_012417(),
        ))
      }
      pub(super) fn get_012413() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012414(),
          CoreBinaryOperator::GreaterThan(None),
          get_012415(),
        ))
      }
      pub(super) fn get_012418() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_012412() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012413(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_012418(),
        ))
      }
      pub(super) fn get_012422() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012423() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012421() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012422(), get_012423()))
      }
      pub(super) fn get_012424() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_012420() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012421(),
          vec![get_012424()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012428() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012429() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012427() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012428(), get_012429()))
      }
      pub(super) fn get_012430() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_012426() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012427(),
          vec![get_012430()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012434() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012435() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012433() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012434(), get_012435()))
      }
      pub(super) fn get_012436() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_012432() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012433(),
          vec![get_012436()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012440() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_012439() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012440()))
      }
      pub(super) fn get_012442() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_012441() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012442()))
      }
      pub(super) fn get_012446() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012447() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012445() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012446(), get_012447()))
      }
      pub(super) fn get_012448() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_012444() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012445(),
          vec![get_012448()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012452() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012453() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_012451() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012452(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012453(),
        ))
      }
      pub(super) fn get_012456() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012457() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_012455() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012456(),
          CoreBinaryOperator::Minus(None),
          get_012457(),
        ))
      }
      pub(super) fn get_012458() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_012454() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012455(),
          CoreBinaryOperator::Plus(None),
          get_012458(),
        ))
      }
      pub(super) fn get_012461() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012462() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_012460() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012461(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012462(),
        ))
      }
      pub(super) fn get_012465() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012466() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_012464() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012465(),
          CoreBinaryOperator::Minus(None),
          get_012466(),
        ))
      }
      pub(super) fn get_012467() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_012463() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012464(),
          CoreBinaryOperator::Plus(None),
          get_012467(),
        ))
      }
      pub(super) fn get_012469() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012470() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_012468() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012469(),
          CoreBinaryOperator::Minus(None),
          get_012470(),
        ))
      }
      pub(super) fn get_012459() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012460(), get_012463(), get_012468()))
      }
      pub(super) fn get_012450() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012451(), get_012454(), get_012459()))
      }
      pub(super) fn get_012474() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_012476() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012477() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_012475() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012476(),
          CoreBinaryOperator::And(None),
          get_012477(),
        ))
      }
      pub(super) fn get_012473() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012474(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012475(),
        ))
      }
      pub(super) fn get_012478() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012472() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012473(),
          CoreBinaryOperator::LessThan(None),
          get_012478(),
        ))
      }
      pub(super) fn get_012480() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012482() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_012483() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_012481() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012482(),
          CoreBinaryOperator::Plus(None),
          get_012483(),
        ))
      }
      pub(super) fn get_012479() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012480(),
          CoreBinaryOperator::Mult(None),
          get_012481(),
        ))
      }
      pub(super) fn get_012487() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012488() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012486() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012487(), get_012488()))
      }
      pub(super) fn get_012489() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_012491() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_012492() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012490() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012491(), get_012492()]))
      }
      pub(super) fn get_012485() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012486(),
          vec![get_012489(), get_012490()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012484() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012485()))
      }
      pub(super) fn get_012471() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012472(), get_012479(), get_012484()))
      }
      pub(super) fn get_012449() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_012450(),
          )],
          get_012471(),
        ))
      }
      pub(super) fn get_012443() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_012444(),
          )],
          get_012449(),
        ))
      }
      pub(super) fn get_012438() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_012439(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_012441(),
            ),
          ],
          get_012443(),
        ))
      }
      pub(super) fn get_012495() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012496() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_012494() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012495(), get_012496()))
      }
      pub(super) fn get_012497() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_012500() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012501() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_012499() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012500(), get_012501()))
      }
      pub(super) fn get_012502() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_012498() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012499(),
          vec![get_012502()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012503() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012493() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012494(),
          vec![get_012497(), get_012498(), get_012503()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012437() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_012438(),
          )],
          get_012493(),
        ))
      }
      pub(super) fn get_012431() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_012432(),
          )],
          get_012437(),
        ))
      }
      pub(super) fn get_012425() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_012426(),
          )],
          get_012431(),
        ))
      }
      pub(super) fn get_012419() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_012420(),
          )],
          get_012425(),
        ))
      }
      pub(super) fn get_012507() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012508() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012506() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012507(), get_012508()))
      }
      pub(super) fn get_012509() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_012510() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012505() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012506(),
          vec![get_012509(), get_012510()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012504() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012505()))
      }
      pub(super) fn get_012411() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012412(), get_012419(), get_012504()))
      }
      pub(super) fn get_012406() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_012407(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_012409(),
            ),
          ],
          get_012411(),
        ))
      }
      pub(super) fn get_012511() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_012515() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_012516() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012514() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012515(), get_012516()))
      }
      pub(super) fn get_012518() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_012519() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012517() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012518(), get_012519()))
      }
      pub(super) fn get_012513() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012514(),
          )],
          get_012517(),
        ))
      }
      pub(super) fn get_012522() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_012523() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012521() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012522(), get_012523()))
      }
      pub(super) fn get_012524() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012520() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012521(),
          )],
          get_012524(),
        ))
      }
      pub(super) fn get_012528() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012529() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_012527() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012528(), get_012529()))
      }
      pub(super) fn get_012530() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012531() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_012526() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012527(),
          vec![get_012530(), get_012531()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012534() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012535() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_012533() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012534(), get_012535()))
      }
      pub(super) fn get_012536() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_012539() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012540() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_012538() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012539(), get_012540()))
      }
      pub(super) fn get_012543() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012544() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_012542() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012543(), get_012544()))
      }
      pub(super) fn get_012545() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_012541() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012542(),
          vec![get_012545()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012548() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_012547() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012548()))
      }
      pub(super) fn get_012551() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_012552() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_012550() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012551(), get_012552()))
      }
      pub(super) fn get_012555() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012554() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012555()]))
      }
      pub(super) fn get_012553() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012554()]))
      }
      pub(super) fn get_012549() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012550(),
          )],
          get_012553(),
        ))
      }
      pub(super) fn get_012546() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_012547(),
          )],
          get_012549(),
        ))
      }
      pub(super) fn get_012537() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012538(),
          vec![get_012541(), get_012546()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012532() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012533(),
          vec![get_012536(), get_012537()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012525() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_012526(),
          )],
          get_012532(),
        ))
      }
      pub(super) fn get_012512() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_012513(),
          get_012520(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_012525(),
        ))
      }
      pub(super) fn get_012558() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str_' not bound"))
      }
      pub(super) fn get_012557() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012558()))
      }
      pub(super) fn get_012562() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012563() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("toString"))
      }
      pub(super) fn get_012561() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012562(), get_012563()))
      }
      pub(super) fn get_012564() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str_", 358u32)
        }))
      }
      pub(super) fn get_012560() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012561(),
          vec![get_012564()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012568() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'ch' not bound"))
      }
      pub(super) fn get_012567() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012568()))
      }
      pub(super) fn get_012572() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012573() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_012571() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012572(), get_012573()))
      }
      pub(super) fn get_012574() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 361u32)
        }))
      }
      pub(super) fn get_012575() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\""))
      }
      pub(super) fn get_012570() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012571(),
          vec![get_012574(), get_012575()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012576() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\\\""))
      }
      pub(super) fn get_012580() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012581() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_012579() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012580(), get_012581()))
      }
      pub(super) fn get_012582() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 361u32)
        }))
      }
      pub(super) fn get_012583() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\\"))
      }
      pub(super) fn get_012578() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012579(),
          vec![get_012582(), get_012583()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012584() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\\\\"))
      }
      pub(super) fn get_012588() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012589() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_012587() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012588(), get_012589()))
      }
      pub(super) fn get_012590() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 361u32)
        }))
      }
      pub(super) fn get_012591() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\u{8}"))
      }
      pub(super) fn get_012586() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012587(),
          vec![get_012590(), get_012591()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012592() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\\b"))
      }
      pub(super) fn get_012596() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012597() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_012595() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012596(), get_012597()))
      }
      pub(super) fn get_012598() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 361u32)
        }))
      }
      pub(super) fn get_012599() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\u{c}"))
      }
      pub(super) fn get_012594() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012595(),
          vec![get_012598(), get_012599()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012600() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\\f"))
      }
      pub(super) fn get_012604() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012605() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_012603() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012604(), get_012605()))
      }
      pub(super) fn get_012606() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 361u32)
        }))
      }
      pub(super) fn get_012607() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_012602() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012603(),
          vec![get_012606(), get_012607()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012608() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\\n"))
      }
      pub(super) fn get_012612() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012613() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_012611() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012612(), get_012613()))
      }
      pub(super) fn get_012614() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 361u32)
        }))
      }
      pub(super) fn get_012615() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\r"))
      }
      pub(super) fn get_012610() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012611(),
          vec![get_012614(), get_012615()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012616() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\\r"))
      }
      pub(super) fn get_012620() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012621() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_012619() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012620(), get_012621()))
      }
      pub(super) fn get_012622() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 361u32)
        }))
      }
      pub(super) fn get_012623() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\t"))
      }
      pub(super) fn get_012618() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012619(),
          vec![get_012622(), get_012623()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012624() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\\t"))
      }
      pub(super) fn get_012628() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012629() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012627() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012628(), get_012629()))
      }
      pub(super) fn get_012630() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 361u32)
        }))
      }
      pub(super) fn get_012626() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012627(),
          vec![get_012630()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012633() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cp", 362u32)
        }))
      }
      pub(super) fn get_012635() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(32f64))
      }
      pub(super) fn get_012638() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cp", 362u32)
        }))
      }
      pub(super) fn get_012640() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(127f64))
      }
      pub(super) fn get_012641() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cp", 362u32)
        }))
      }
      pub(super) fn get_012639() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012640(),
          CoreBinaryOperator::And(None),
          get_012641(),
        ))
      }
      pub(super) fn get_012637() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012638(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012639(),
        ))
      }
      pub(super) fn get_012642() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(159f64))
      }
      pub(super) fn get_012636() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012637(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_012642(),
        ))
      }
      pub(super) fn get_012634() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012635(),
          CoreBinaryOperator::Or(None),
          get_012636(),
        ))
      }
      pub(super) fn get_012632() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012633(),
          CoreBinaryOperator::LessThan(None),
          get_012634(),
        ))
      }
      pub(super) fn get_012645() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012646() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012644() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012645(), get_012646()))
      }
      pub(super) fn get_012647() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\\u%04x"))
      }
      pub(super) fn get_012649() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cp", 362u32)
        }))
      }
      pub(super) fn get_012648() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012649()]))
      }
      pub(super) fn get_012643() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012644(),
          vec![get_012647(), get_012648()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012650() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 361u32)
        }))
      }
      pub(super) fn get_012631() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012632(), get_012643(), get_012650()))
      }
      pub(super) fn get_012625() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("cp", 362u32) },
            get_012626(),
          )],
          get_012631(),
        ))
      }
      pub(super) fn get_012617() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012618(), get_012624(), get_012625()))
      }
      pub(super) fn get_012609() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012610(), get_012616(), get_012617()))
      }
      pub(super) fn get_012601() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012602(), get_012608(), get_012609()))
      }
      pub(super) fn get_012593() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012594(), get_012600(), get_012601()))
      }
      pub(super) fn get_012585() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012586(), get_012592(), get_012593()))
      }
      pub(super) fn get_012577() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012578(), get_012584(), get_012585()))
      }
      pub(super) fn get_012569() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012570(), get_012576(), get_012577()))
      }
      pub(super) fn get_012566() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("ch", 361u32) },
            get_012567(),
          )],
          get_012569(),
        ))
      }
      pub(super) fn get_012653() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012654() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012652() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012653(), get_012654()))
      }
      pub(super) fn get_012655() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\"%s\""))
      }
      pub(super) fn get_012658() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012659() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_012657() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012658(), get_012659()))
      }
      pub(super) fn get_012660() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_012664() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012665() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_012663() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012664(), get_012665()))
      }
      pub(super) fn get_012666() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 359u32)
        }))
      }
      pub(super) fn get_012662() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012663(),
          vec![get_012666()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012669() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012670() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_012668() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012669(), get_012670()))
      }
      pub(super) fn get_012671() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_012674() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012675() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_012673() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012674(), get_012675()))
      }
      pub(super) fn get_012678() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012679() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_012677() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012678(), get_012679()))
      }
      pub(super) fn get_012680() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 364u32)
        }))
      }
      pub(super) fn get_012676() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012677(),
          vec![get_012680()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012683() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_012682() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012683()))
      }
      pub(super) fn get_012686() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 364u32)
        }))
      }
      pub(super) fn get_012687() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 365u32)
        }))
      }
      pub(super) fn get_012685() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012686(), get_012687()))
      }
      pub(super) fn get_012690() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("trans", 360u32)
        }))
      }
      pub(super) fn get_012691() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 363u32)
        }))
      }
      pub(super) fn get_012689() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012690(),
          vec![get_012691()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012688() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012689()]))
      }
      pub(super) fn get_012684() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("ch", 363u32) },
            get_012685(),
          )],
          get_012688(),
        ))
      }
      pub(super) fn get_012681() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 365u32) },
            get_012682(),
          )],
          get_012684(),
        ))
      }
      pub(super) fn get_012672() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012673(),
          vec![get_012676(), get_012681()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012667() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012668(),
          vec![get_012671(), get_012672()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012661() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 364u32) },
            get_012662(),
          )],
          get_012667(),
        ))
      }
      pub(super) fn get_012656() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012657(),
          vec![get_012660(), get_012661()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012651() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012652(),
          vec![get_012655(), get_012656()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012565() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("trans", 360u32) },
            get_012566(),
          )],
          get_012651(),
        ))
      }
      pub(super) fn get_012559() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("str", 359u32) },
            get_012560(),
          )],
          get_012565(),
        ))
      }
      pub(super) fn get_012556() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str_", 358u32) },
            get_012557(),
          )],
          get_012559(),
        ))
      }
      pub(super) fn get_012399() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_012400()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_012401(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_012402(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_012406(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_012511(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_012512(),
            ),
          ],
          get_012556(),
        ))
      }
      pub(super) fn get_012692() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("escapeStringPython"))
      }
      pub(super) fn get_012694() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_012695() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_012698() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_012697() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012698()))
      }
      pub(super) fn get_012699() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_012696() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_012697(),
          )],
          get_012699(),
        ))
      }
      pub(super) fn get_012702() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_012701() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012702()))
      }
      pub(super) fn get_012704() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_012703() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012704()))
      }
      pub(super) fn get_012708() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012710() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012711() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012709() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012710(),
          CoreBinaryOperator::And(None),
          get_012711(),
        ))
      }
      pub(super) fn get_012707() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012708(),
          CoreBinaryOperator::GreaterThan(None),
          get_012709(),
        ))
      }
      pub(super) fn get_012712() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_012706() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012707(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_012712(),
        ))
      }
      pub(super) fn get_012716() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012717() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012715() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012716(), get_012717()))
      }
      pub(super) fn get_012718() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_012714() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012715(),
          vec![get_012718()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012722() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012723() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012721() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012722(), get_012723()))
      }
      pub(super) fn get_012724() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_012720() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012721(),
          vec![get_012724()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012728() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012729() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012727() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012728(), get_012729()))
      }
      pub(super) fn get_012730() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_012726() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012727(),
          vec![get_012730()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012734() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_012733() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012734()))
      }
      pub(super) fn get_012736() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_012735() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012736()))
      }
      pub(super) fn get_012740() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012741() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012739() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012740(), get_012741()))
      }
      pub(super) fn get_012742() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_012738() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012739(),
          vec![get_012742()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012746() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012747() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_012745() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012746(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012747(),
        ))
      }
      pub(super) fn get_012750() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012751() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_012749() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012750(),
          CoreBinaryOperator::Minus(None),
          get_012751(),
        ))
      }
      pub(super) fn get_012752() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_012748() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012749(),
          CoreBinaryOperator::Plus(None),
          get_012752(),
        ))
      }
      pub(super) fn get_012755() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012756() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_012754() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012755(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012756(),
        ))
      }
      pub(super) fn get_012759() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012760() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_012758() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012759(),
          CoreBinaryOperator::Minus(None),
          get_012760(),
        ))
      }
      pub(super) fn get_012761() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_012757() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012758(),
          CoreBinaryOperator::Plus(None),
          get_012761(),
        ))
      }
      pub(super) fn get_012763() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012764() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_012762() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012763(),
          CoreBinaryOperator::Minus(None),
          get_012764(),
        ))
      }
      pub(super) fn get_012753() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012754(), get_012757(), get_012762()))
      }
      pub(super) fn get_012744() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012745(), get_012748(), get_012753()))
      }
      pub(super) fn get_012768() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_012770() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012771() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_012769() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012770(),
          CoreBinaryOperator::And(None),
          get_012771(),
        ))
      }
      pub(super) fn get_012767() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012768(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012769(),
        ))
      }
      pub(super) fn get_012772() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012766() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012767(),
          CoreBinaryOperator::LessThan(None),
          get_012772(),
        ))
      }
      pub(super) fn get_012774() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012776() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_012777() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_012775() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012776(),
          CoreBinaryOperator::Plus(None),
          get_012777(),
        ))
      }
      pub(super) fn get_012773() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012774(),
          CoreBinaryOperator::Mult(None),
          get_012775(),
        ))
      }
      pub(super) fn get_012781() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012782() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012780() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012781(), get_012782()))
      }
      pub(super) fn get_012783() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_012785() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_012786() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012784() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012785(), get_012786()]))
      }
      pub(super) fn get_012779() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012780(),
          vec![get_012783(), get_012784()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012778() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012779()))
      }
      pub(super) fn get_012765() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012766(), get_012773(), get_012778()))
      }
      pub(super) fn get_012743() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_012744(),
          )],
          get_012765(),
        ))
      }
      pub(super) fn get_012737() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_012738(),
          )],
          get_012743(),
        ))
      }
      pub(super) fn get_012732() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_012733(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_012735(),
            ),
          ],
          get_012737(),
        ))
      }
      pub(super) fn get_012789() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012790() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_012788() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012789(), get_012790()))
      }
      pub(super) fn get_012791() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_012794() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012795() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_012793() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012794(), get_012795()))
      }
      pub(super) fn get_012796() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_012792() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012793(),
          vec![get_012796()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012797() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012787() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012788(),
          vec![get_012791(), get_012792(), get_012797()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012731() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_012732(),
          )],
          get_012787(),
        ))
      }
      pub(super) fn get_012725() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_012726(),
          )],
          get_012731(),
        ))
      }
      pub(super) fn get_012719() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_012720(),
          )],
          get_012725(),
        ))
      }
      pub(super) fn get_012713() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_012714(),
          )],
          get_012719(),
        ))
      }
      pub(super) fn get_012801() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012802() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012800() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012801(), get_012802()))
      }
      pub(super) fn get_012803() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_012804() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012799() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012800(),
          vec![get_012803(), get_012804()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012798() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012799()))
      }
      pub(super) fn get_012705() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012706(), get_012713(), get_012798()))
      }
      pub(super) fn get_012700() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_012701(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_012703(),
            ),
          ],
          get_012705(),
        ))
      }
      pub(super) fn get_012805() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_012809() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_012810() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012808() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012809(), get_012810()))
      }
      pub(super) fn get_012812() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_012813() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012811() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012812(), get_012813()))
      }
      pub(super) fn get_012807() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012808(),
          )],
          get_012811(),
        ))
      }
      pub(super) fn get_012816() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_012817() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012815() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012816(), get_012817()))
      }
      pub(super) fn get_012818() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012814() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012815(),
          )],
          get_012818(),
        ))
      }
      pub(super) fn get_012822() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012823() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_012821() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012822(), get_012823()))
      }
      pub(super) fn get_012824() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012825() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_012820() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012821(),
          vec![get_012824(), get_012825()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012828() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012829() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_012827() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012828(), get_012829()))
      }
      pub(super) fn get_012830() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_012833() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012834() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_012832() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012833(), get_012834()))
      }
      pub(super) fn get_012837() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012838() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_012836() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012837(), get_012838()))
      }
      pub(super) fn get_012839() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_012835() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012836(),
          vec![get_012839()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012842() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_012841() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012842()))
      }
      pub(super) fn get_012845() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_012846() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_012844() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012845(), get_012846()))
      }
      pub(super) fn get_012849() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012848() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012849()]))
      }
      pub(super) fn get_012847() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012848()]))
      }
      pub(super) fn get_012843() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012844(),
          )],
          get_012847(),
        ))
      }
      pub(super) fn get_012840() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_012841(),
          )],
          get_012843(),
        ))
      }
      pub(super) fn get_012831() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012832(),
          vec![get_012835(), get_012840()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012826() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012827(),
          vec![get_012830(), get_012831()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012819() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_012820(),
          )],
          get_012826(),
        ))
      }
      pub(super) fn get_012806() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_012807(),
          get_012814(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_012819(),
        ))
      }
      pub(super) fn get_012852() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_012851() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012852()))
      }
      pub(super) fn get_012855() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012856() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("escapeStringJson"))
      }
      pub(super) fn get_012854() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012855(), get_012856()))
      }
      pub(super) fn get_012857() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 366u32)
        }))
      }
      pub(super) fn get_012853() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012854(),
          vec![get_012857()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012850() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str", 366u32) },
            get_012851(),
          )],
          get_012853(),
        ))
      }
      pub(super) fn get_012693() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_012694()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_012695(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_012696(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_012700(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_012805(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_012806(),
            ),
          ],
          get_012850(),
        ))
      }
      pub(super) fn get_012858() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("escapeStringBash"))
      }
      pub(super) fn get_012860() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_012861() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_012864() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_012863() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012864()))
      }
      pub(super) fn get_012865() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_012862() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_012863(),
          )],
          get_012865(),
        ))
      }
      pub(super) fn get_012868() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_012867() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012868()))
      }
      pub(super) fn get_012870() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_012869() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012870()))
      }
      pub(super) fn get_012874() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012876() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012877() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012875() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012876(),
          CoreBinaryOperator::And(None),
          get_012877(),
        ))
      }
      pub(super) fn get_012873() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012874(),
          CoreBinaryOperator::GreaterThan(None),
          get_012875(),
        ))
      }
      pub(super) fn get_012878() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_012872() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012873(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_012878(),
        ))
      }
      pub(super) fn get_012882() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012883() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012881() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012882(), get_012883()))
      }
      pub(super) fn get_012884() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_012880() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012881(),
          vec![get_012884()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012888() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012889() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012887() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012888(), get_012889()))
      }
      pub(super) fn get_012890() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_012886() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012887(),
          vec![get_012890()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012894() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012895() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012893() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012894(), get_012895()))
      }
      pub(super) fn get_012896() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_012892() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012893(),
          vec![get_012896()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012900() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_012899() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012900()))
      }
      pub(super) fn get_012902() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_012901() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012902()))
      }
      pub(super) fn get_012906() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012907() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_012905() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012906(), get_012907()))
      }
      pub(super) fn get_012908() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_012904() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012905(),
          vec![get_012908()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012912() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012913() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_012911() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012912(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012913(),
        ))
      }
      pub(super) fn get_012916() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012917() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_012915() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012916(),
          CoreBinaryOperator::Minus(None),
          get_012917(),
        ))
      }
      pub(super) fn get_012918() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_012914() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012915(),
          CoreBinaryOperator::Plus(None),
          get_012918(),
        ))
      }
      pub(super) fn get_012921() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012922() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_012920() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012921(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012922(),
        ))
      }
      pub(super) fn get_012925() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012926() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_012924() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012925(),
          CoreBinaryOperator::Minus(None),
          get_012926(),
        ))
      }
      pub(super) fn get_012927() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_012923() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012924(),
          CoreBinaryOperator::Plus(None),
          get_012927(),
        ))
      }
      pub(super) fn get_012929() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_012930() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_012928() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012929(),
          CoreBinaryOperator::Minus(None),
          get_012930(),
        ))
      }
      pub(super) fn get_012919() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012920(), get_012923(), get_012928()))
      }
      pub(super) fn get_012910() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012911(), get_012914(), get_012919()))
      }
      pub(super) fn get_012934() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_012936() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012937() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_012935() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012936(),
          CoreBinaryOperator::And(None),
          get_012937(),
        ))
      }
      pub(super) fn get_012933() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012934(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_012935(),
        ))
      }
      pub(super) fn get_012938() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012932() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012933(),
          CoreBinaryOperator::LessThan(None),
          get_012938(),
        ))
      }
      pub(super) fn get_012940() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012942() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_012943() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_012941() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012942(),
          CoreBinaryOperator::Plus(None),
          get_012943(),
        ))
      }
      pub(super) fn get_012939() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_012940(),
          CoreBinaryOperator::Mult(None),
          get_012941(),
        ))
      }
      pub(super) fn get_012947() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012948() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012946() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012947(), get_012948()))
      }
      pub(super) fn get_012949() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_012951() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_012952() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012950() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_012951(), get_012952()]))
      }
      pub(super) fn get_012945() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012946(),
          vec![get_012949(), get_012950()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012944() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012945()))
      }
      pub(super) fn get_012931() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012932(), get_012939(), get_012944()))
      }
      pub(super) fn get_012909() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_012910(),
          )],
          get_012931(),
        ))
      }
      pub(super) fn get_012903() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_012904(),
          )],
          get_012909(),
        ))
      }
      pub(super) fn get_012898() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_012899(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_012901(),
            ),
          ],
          get_012903(),
        ))
      }
      pub(super) fn get_012955() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012956() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_012954() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012955(), get_012956()))
      }
      pub(super) fn get_012957() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_012960() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012961() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_012959() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012960(), get_012961()))
      }
      pub(super) fn get_012962() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_012958() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012959(),
          vec![get_012962()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012963() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012953() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012954(),
          vec![get_012957(), get_012958(), get_012963()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012897() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_012898(),
          )],
          get_012953(),
        ))
      }
      pub(super) fn get_012891() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_012892(),
          )],
          get_012897(),
        ))
      }
      pub(super) fn get_012885() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_012886(),
          )],
          get_012891(),
        ))
      }
      pub(super) fn get_012879() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_012880(),
          )],
          get_012885(),
        ))
      }
      pub(super) fn get_012967() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012968() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_012966() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012967(), get_012968()))
      }
      pub(super) fn get_012969() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_012970() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_012965() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012966(),
          vec![get_012969(), get_012970()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012964() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_012965()))
      }
      pub(super) fn get_012871() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_012872(), get_012879(), get_012964()))
      }
      pub(super) fn get_012866() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_012867(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_012869(),
            ),
          ],
          get_012871(),
        ))
      }
      pub(super) fn get_012971() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_012975() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_012976() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012974() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012975(), get_012976()))
      }
      pub(super) fn get_012978() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_012979() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012977() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012978(), get_012979()))
      }
      pub(super) fn get_012973() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012974(),
          )],
          get_012977(),
        ))
      }
      pub(super) fn get_012982() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_012983() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012981() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012982(), get_012983()))
      }
      pub(super) fn get_012984() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_012980() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_012981(),
          )],
          get_012984(),
        ))
      }
      pub(super) fn get_012988() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012989() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_012987() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012988(), get_012989()))
      }
      pub(super) fn get_012990() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_012991() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_012986() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012987(),
          vec![get_012990(), get_012991()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012994() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_012995() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_012993() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012994(), get_012995()))
      }
      pub(super) fn get_012996() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_012999() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013000() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_012998() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_012999(), get_013000()))
      }
      pub(super) fn get_013003() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013004() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_013002() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013003(), get_013004()))
      }
      pub(super) fn get_013005() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_013001() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013002(),
          vec![get_013005()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013008() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_013007() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013008()))
      }
      pub(super) fn get_013011() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_013012() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_013010() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013011(), get_013012()))
      }
      pub(super) fn get_013015() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013014() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013015()]))
      }
      pub(super) fn get_013013() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013014()]))
      }
      pub(super) fn get_013009() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013010(),
          )],
          get_013013(),
        ))
      }
      pub(super) fn get_013006() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_013007(),
          )],
          get_013009(),
        ))
      }
      pub(super) fn get_012997() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012998(),
          vec![get_013001(), get_013006()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012992() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_012993(),
          vec![get_012996(), get_012997()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_012985() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_012986(),
          )],
          get_012992(),
        ))
      }
      pub(super) fn get_012972() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_012973(),
          get_012980(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_012985(),
        ))
      }
      pub(super) fn get_013018() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str_' not bound"))
      }
      pub(super) fn get_013017() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013018()))
      }
      pub(super) fn get_013022() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013023() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("toString"))
      }
      pub(super) fn get_013021() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013022(), get_013023()))
      }
      pub(super) fn get_013024() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str_", 367u32)
        }))
      }
      pub(super) fn get_013020() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013021(),
          vec![get_013024()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013028() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'ch' not bound"))
      }
      pub(super) fn get_013027() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013028()))
      }
      pub(super) fn get_013032() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013033() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_013031() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013032(), get_013033()))
      }
      pub(super) fn get_013034() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 370u32)
        }))
      }
      pub(super) fn get_013035() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("'"))
      }
      pub(super) fn get_013030() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013031(),
          vec![get_013034(), get_013035()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013036() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("'\"'\"'"))
      }
      pub(super) fn get_013037() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 370u32)
        }))
      }
      pub(super) fn get_013029() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013030(), get_013036(), get_013037()))
      }
      pub(super) fn get_013026() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("ch", 370u32) },
            get_013027(),
          )],
          get_013029(),
        ))
      }
      pub(super) fn get_013040() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013041() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_013039() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013040(), get_013041()))
      }
      pub(super) fn get_013042() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("'%s'"))
      }
      pub(super) fn get_013045() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013046() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_013044() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013045(), get_013046()))
      }
      pub(super) fn get_013047() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_013051() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013052() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_013050() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013051(), get_013052()))
      }
      pub(super) fn get_013053() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 368u32)
        }))
      }
      pub(super) fn get_013049() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013050(),
          vec![get_013053()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013056() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013057() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_013055() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013056(), get_013057()))
      }
      pub(super) fn get_013058() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_013061() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013062() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_013060() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013061(), get_013062()))
      }
      pub(super) fn get_013065() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013066() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_013064() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013065(), get_013066()))
      }
      pub(super) fn get_013067() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 372u32)
        }))
      }
      pub(super) fn get_013063() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013064(),
          vec![get_013067()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013070() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_013069() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013070()))
      }
      pub(super) fn get_013073() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 372u32)
        }))
      }
      pub(super) fn get_013074() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 373u32)
        }))
      }
      pub(super) fn get_013072() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013073(), get_013074()))
      }
      pub(super) fn get_013077() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("trans", 369u32)
        }))
      }
      pub(super) fn get_013078() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 371u32)
        }))
      }
      pub(super) fn get_013076() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013077(),
          vec![get_013078()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013075() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013076()]))
      }
      pub(super) fn get_013071() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("ch", 371u32) },
            get_013072(),
          )],
          get_013075(),
        ))
      }
      pub(super) fn get_013068() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 373u32) },
            get_013069(),
          )],
          get_013071(),
        ))
      }
      pub(super) fn get_013059() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013060(),
          vec![get_013063(), get_013068()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013054() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013055(),
          vec![get_013058(), get_013059()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013048() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 372u32) },
            get_013049(),
          )],
          get_013054(),
        ))
      }
      pub(super) fn get_013043() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013044(),
          vec![get_013047(), get_013048()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013038() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013039(),
          vec![get_013042(), get_013043()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013025() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("trans", 369u32) },
            get_013026(),
          )],
          get_013038(),
        ))
      }
      pub(super) fn get_013019() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("str", 368u32) },
            get_013020(),
          )],
          get_013025(),
        ))
      }
      pub(super) fn get_013016() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str_", 367u32) },
            get_013017(),
          )],
          get_013019(),
        ))
      }
      pub(super) fn get_012859() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_012860()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_012861(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_012862(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_012866(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_012971(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_012972(),
            ),
          ],
          get_013016(),
        ))
      }
      pub(super) fn get_013079() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("escapeStringDollars"))
      }
      pub(super) fn get_013081() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_013082() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_013085() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_013084() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013085()))
      }
      pub(super) fn get_013086() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_013083() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_013084(),
          )],
          get_013086(),
        ))
      }
      pub(super) fn get_013089() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_013088() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013089()))
      }
      pub(super) fn get_013091() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_013090() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013091()))
      }
      pub(super) fn get_013095() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013097() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013098() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013096() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013097(),
          CoreBinaryOperator::And(None),
          get_013098(),
        ))
      }
      pub(super) fn get_013094() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013095(),
          CoreBinaryOperator::GreaterThan(None),
          get_013096(),
        ))
      }
      pub(super) fn get_013099() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_013093() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013094(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_013099(),
        ))
      }
      pub(super) fn get_013103() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013104() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013102() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013103(), get_013104()))
      }
      pub(super) fn get_013105() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_013101() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013102(),
          vec![get_013105()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013109() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013110() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013108() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013109(), get_013110()))
      }
      pub(super) fn get_013111() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_013107() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013108(),
          vec![get_013111()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013115() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013116() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013114() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013115(), get_013116()))
      }
      pub(super) fn get_013117() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_013113() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013114(),
          vec![get_013117()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013121() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_013120() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013121()))
      }
      pub(super) fn get_013123() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_013122() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013123()))
      }
      pub(super) fn get_013127() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013128() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013126() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013127(), get_013128()))
      }
      pub(super) fn get_013129() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_013125() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013126(),
          vec![get_013129()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013133() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013134() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_013132() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013133(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_013134(),
        ))
      }
      pub(super) fn get_013137() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013138() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_013136() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013137(),
          CoreBinaryOperator::Minus(None),
          get_013138(),
        ))
      }
      pub(super) fn get_013139() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_013135() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013136(),
          CoreBinaryOperator::Plus(None),
          get_013139(),
        ))
      }
      pub(super) fn get_013142() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013143() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_013141() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013142(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_013143(),
        ))
      }
      pub(super) fn get_013146() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013147() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_013145() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013146(),
          CoreBinaryOperator::Minus(None),
          get_013147(),
        ))
      }
      pub(super) fn get_013148() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_013144() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013145(),
          CoreBinaryOperator::Plus(None),
          get_013148(),
        ))
      }
      pub(super) fn get_013150() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013151() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_013149() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013150(),
          CoreBinaryOperator::Minus(None),
          get_013151(),
        ))
      }
      pub(super) fn get_013140() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013141(), get_013144(), get_013149()))
      }
      pub(super) fn get_013131() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013132(), get_013135(), get_013140()))
      }
      pub(super) fn get_013155() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_013157() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013158() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_013156() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013157(),
          CoreBinaryOperator::And(None),
          get_013158(),
        ))
      }
      pub(super) fn get_013154() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013155(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_013156(),
        ))
      }
      pub(super) fn get_013159() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013153() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013154(),
          CoreBinaryOperator::LessThan(None),
          get_013159(),
        ))
      }
      pub(super) fn get_013161() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013163() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_013164() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_013162() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013163(),
          CoreBinaryOperator::Plus(None),
          get_013164(),
        ))
      }
      pub(super) fn get_013160() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013161(),
          CoreBinaryOperator::Mult(None),
          get_013162(),
        ))
      }
      pub(super) fn get_013168() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013169() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_013167() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013168(), get_013169()))
      }
      pub(super) fn get_013170() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_013172() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_013173() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013171() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013172(), get_013173()]))
      }
      pub(super) fn get_013166() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013167(),
          vec![get_013170(), get_013171()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013165() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013166()))
      }
      pub(super) fn get_013152() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013153(), get_013160(), get_013165()))
      }
      pub(super) fn get_013130() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_013131(),
          )],
          get_013152(),
        ))
      }
      pub(super) fn get_013124() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_013125(),
          )],
          get_013130(),
        ))
      }
      pub(super) fn get_013119() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_013120(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_013122(),
            ),
          ],
          get_013124(),
        ))
      }
      pub(super) fn get_013176() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013177() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_013175() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013176(), get_013177()))
      }
      pub(super) fn get_013178() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_013181() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013182() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_013180() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013181(), get_013182()))
      }
      pub(super) fn get_013183() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_013179() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013180(),
          vec![get_013183()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013184() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013174() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013175(),
          vec![get_013178(), get_013179(), get_013184()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013118() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_013119(),
          )],
          get_013174(),
        ))
      }
      pub(super) fn get_013112() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_013113(),
          )],
          get_013118(),
        ))
      }
      pub(super) fn get_013106() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_013107(),
          )],
          get_013112(),
        ))
      }
      pub(super) fn get_013100() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_013101(),
          )],
          get_013106(),
        ))
      }
      pub(super) fn get_013188() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013189() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_013187() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013188(), get_013189()))
      }
      pub(super) fn get_013190() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_013191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013186() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013187(),
          vec![get_013190(), get_013191()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013185() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013186()))
      }
      pub(super) fn get_013092() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013093(), get_013100(), get_013185()))
      }
      pub(super) fn get_013087() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_013088(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_013090(),
            ),
          ],
          get_013092(),
        ))
      }
      pub(super) fn get_013192() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_013196() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_013197() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013195() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013196(), get_013197()))
      }
      pub(super) fn get_013199() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_013200() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013198() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013199(), get_013200()))
      }
      pub(super) fn get_013194() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013195(),
          )],
          get_013198(),
        ))
      }
      pub(super) fn get_013203() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_013204() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013202() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013203(), get_013204()))
      }
      pub(super) fn get_013205() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013201() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013202(),
          )],
          get_013205(),
        ))
      }
      pub(super) fn get_013209() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013210() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_013208() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013209(), get_013210()))
      }
      pub(super) fn get_013211() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013212() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_013207() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013208(),
          vec![get_013211(), get_013212()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013215() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013216() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_013214() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013215(), get_013216()))
      }
      pub(super) fn get_013217() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_013220() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013221() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_013219() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013220(), get_013221()))
      }
      pub(super) fn get_013224() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013225() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_013223() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013224(), get_013225()))
      }
      pub(super) fn get_013226() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_013222() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013223(),
          vec![get_013226()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013229() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_013228() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013229()))
      }
      pub(super) fn get_013232() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_013233() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_013231() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013232(), get_013233()))
      }
      pub(super) fn get_013236() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013235() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013236()]))
      }
      pub(super) fn get_013234() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013235()]))
      }
      pub(super) fn get_013230() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013231(),
          )],
          get_013234(),
        ))
      }
      pub(super) fn get_013227() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_013228(),
          )],
          get_013230(),
        ))
      }
      pub(super) fn get_013218() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013219(),
          vec![get_013222(), get_013227()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013213() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013214(),
          vec![get_013217(), get_013218()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013206() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_013207(),
          )],
          get_013213(),
        ))
      }
      pub(super) fn get_013193() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_013194(),
          get_013201(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_013206(),
        ))
      }
      pub(super) fn get_013239() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str_' not bound"))
      }
      pub(super) fn get_013238() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013239()))
      }
      pub(super) fn get_013243() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013244() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("toString"))
      }
      pub(super) fn get_013242() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013243(), get_013244()))
      }
      pub(super) fn get_013245() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str_", 374u32)
        }))
      }
      pub(super) fn get_013241() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013242(),
          vec![get_013245()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013249() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'ch' not bound"))
      }
      pub(super) fn get_013248() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013249()))
      }
      pub(super) fn get_013253() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013254() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_013252() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013253(), get_013254()))
      }
      pub(super) fn get_013255() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 377u32)
        }))
      }
      pub(super) fn get_013256() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("$"))
      }
      pub(super) fn get_013251() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013252(),
          vec![get_013255(), get_013256()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013257() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("$$"))
      }
      pub(super) fn get_013258() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ch", 377u32)
        }))
      }
      pub(super) fn get_013250() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013251(), get_013257(), get_013258()))
      }
      pub(super) fn get_013247() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("ch", 377u32) },
            get_013248(),
          )],
          get_013250(),
        ))
      }
      pub(super) fn get_013261() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013262() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_013260() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013261(), get_013262()))
      }
      pub(super) fn get_013265() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_013264() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013265()))
      }
      pub(super) fn get_013267() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_013266() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013267()))
      }
      pub(super) fn get_013269() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 378u32)
        }))
      }
      pub(super) fn get_013271() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("trans", 376u32)
        }))
      }
      pub(super) fn get_013272() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 379u32)
        }))
      }
      pub(super) fn get_013270() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013271(),
          vec![get_013272()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013268() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013269(),
          CoreBinaryOperator::Plus(None),
          get_013270(),
        ))
      }
      pub(super) fn get_013263() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 378u32) },
              get_013264(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 379u32) },
              get_013266(),
            ),
          ],
          get_013268(),
        ))
      }
      pub(super) fn get_013275() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013276() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_013274() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013275(), get_013276()))
      }
      pub(super) fn get_013277() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 375u32)
        }))
      }
      pub(super) fn get_013273() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013274(),
          vec![get_013277()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013278() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_013259() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013260(),
          vec![get_013263(), get_013273(), get_013278()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013246() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("trans", 376u32) },
            get_013247(),
          )],
          get_013259(),
        ))
      }
      pub(super) fn get_013240() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("str", 375u32) },
            get_013241(),
          )],
          get_013246(),
        ))
      }
      pub(super) fn get_013237() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str_", 374u32) },
            get_013238(),
          )],
          get_013240(),
        ))
      }
      pub(super) fn get_013080() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_013081()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_013082(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_013083(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_013087(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_013192(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_013193(),
            ),
          ],
          get_013237(),
        ))
      }
      pub(super) fn get_013279() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestJson"))
      }
      pub(super) fn get_013281() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_013282() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_013285() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_013284() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013285()))
      }
      pub(super) fn get_013286() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_013283() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_013284(),
          )],
          get_013286(),
        ))
      }
      pub(super) fn get_013289() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_013288() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013289()))
      }
      pub(super) fn get_013291() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_013290() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013291()))
      }
      pub(super) fn get_013295() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013297() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013298() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013296() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013297(),
          CoreBinaryOperator::And(None),
          get_013298(),
        ))
      }
      pub(super) fn get_013294() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013295(),
          CoreBinaryOperator::GreaterThan(None),
          get_013296(),
        ))
      }
      pub(super) fn get_013299() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_013293() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013294(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_013299(),
        ))
      }
      pub(super) fn get_013303() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013304() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013302() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013303(), get_013304()))
      }
      pub(super) fn get_013305() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_013301() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013302(),
          vec![get_013305()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013309() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013310() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013308() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013309(), get_013310()))
      }
      pub(super) fn get_013311() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_013307() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013308(),
          vec![get_013311()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013315() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013316() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013314() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013315(), get_013316()))
      }
      pub(super) fn get_013317() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_013313() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013314(),
          vec![get_013317()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013321() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_013320() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013321()))
      }
      pub(super) fn get_013323() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_013322() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013323()))
      }
      pub(super) fn get_013327() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013328() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013326() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013327(), get_013328()))
      }
      pub(super) fn get_013329() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_013325() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013326(),
          vec![get_013329()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013333() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013334() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_013332() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013333(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_013334(),
        ))
      }
      pub(super) fn get_013337() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013338() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_013336() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013337(),
          CoreBinaryOperator::Minus(None),
          get_013338(),
        ))
      }
      pub(super) fn get_013339() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_013335() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013336(),
          CoreBinaryOperator::Plus(None),
          get_013339(),
        ))
      }
      pub(super) fn get_013342() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013343() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_013341() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013342(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_013343(),
        ))
      }
      pub(super) fn get_013346() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013347() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_013345() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013346(),
          CoreBinaryOperator::Minus(None),
          get_013347(),
        ))
      }
      pub(super) fn get_013348() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_013344() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013345(),
          CoreBinaryOperator::Plus(None),
          get_013348(),
        ))
      }
      pub(super) fn get_013350() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013351() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_013349() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013350(),
          CoreBinaryOperator::Minus(None),
          get_013351(),
        ))
      }
      pub(super) fn get_013340() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013341(), get_013344(), get_013349()))
      }
      pub(super) fn get_013331() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013332(), get_013335(), get_013340()))
      }
      pub(super) fn get_013355() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_013357() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013358() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_013356() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013357(),
          CoreBinaryOperator::And(None),
          get_013358(),
        ))
      }
      pub(super) fn get_013354() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013355(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_013356(),
        ))
      }
      pub(super) fn get_013359() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013353() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013354(),
          CoreBinaryOperator::LessThan(None),
          get_013359(),
        ))
      }
      pub(super) fn get_013361() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013363() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_013364() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_013362() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013363(),
          CoreBinaryOperator::Plus(None),
          get_013364(),
        ))
      }
      pub(super) fn get_013360() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013361(),
          CoreBinaryOperator::Mult(None),
          get_013362(),
        ))
      }
      pub(super) fn get_013368() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013369() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_013367() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013368(), get_013369()))
      }
      pub(super) fn get_013370() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_013372() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_013373() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013371() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013372(), get_013373()]))
      }
      pub(super) fn get_013366() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013367(),
          vec![get_013370(), get_013371()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013365() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013366()))
      }
      pub(super) fn get_013352() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013353(), get_013360(), get_013365()))
      }
      pub(super) fn get_013330() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_013331(),
          )],
          get_013352(),
        ))
      }
      pub(super) fn get_013324() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_013325(),
          )],
          get_013330(),
        ))
      }
      pub(super) fn get_013319() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_013320(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_013322(),
            ),
          ],
          get_013324(),
        ))
      }
      pub(super) fn get_013376() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013377() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_013375() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013376(), get_013377()))
      }
      pub(super) fn get_013378() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_013381() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013382() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_013380() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013381(), get_013382()))
      }
      pub(super) fn get_013383() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_013379() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013380(),
          vec![get_013383()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013384() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013374() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013375(),
          vec![get_013378(), get_013379(), get_013384()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013318() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_013319(),
          )],
          get_013374(),
        ))
      }
      pub(super) fn get_013312() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_013313(),
          )],
          get_013318(),
        ))
      }
      pub(super) fn get_013306() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_013307(),
          )],
          get_013312(),
        ))
      }
      pub(super) fn get_013300() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_013301(),
          )],
          get_013306(),
        ))
      }
      pub(super) fn get_013388() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013389() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_013387() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013388(), get_013389()))
      }
      pub(super) fn get_013390() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_013391() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013386() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013387(),
          vec![get_013390(), get_013391()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013385() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013386()))
      }
      pub(super) fn get_013292() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013293(), get_013300(), get_013385()))
      }
      pub(super) fn get_013287() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_013288(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_013290(),
            ),
          ],
          get_013292(),
        ))
      }
      pub(super) fn get_013392() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_013396() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_013397() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013395() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013396(), get_013397()))
      }
      pub(super) fn get_013399() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_013400() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013398() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013399(), get_013400()))
      }
      pub(super) fn get_013394() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013395(),
          )],
          get_013398(),
        ))
      }
      pub(super) fn get_013403() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_013404() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013402() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013403(), get_013404()))
      }
      pub(super) fn get_013405() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013401() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013402(),
          )],
          get_013405(),
        ))
      }
      pub(super) fn get_013409() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013410() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_013408() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013409(), get_013410()))
      }
      pub(super) fn get_013411() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013412() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_013407() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013408(),
          vec![get_013411(), get_013412()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013415() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013416() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_013414() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013415(), get_013416()))
      }
      pub(super) fn get_013417() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_013420() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013421() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_013419() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013420(), get_013421()))
      }
      pub(super) fn get_013424() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013425() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_013423() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013424(), get_013425()))
      }
      pub(super) fn get_013426() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_013422() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013423(),
          vec![get_013426()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013429() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_013428() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013429()))
      }
      pub(super) fn get_013432() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_013433() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_013431() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013432(), get_013433()))
      }
      pub(super) fn get_013436() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013435() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013436()]))
      }
      pub(super) fn get_013434() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013435()]))
      }
      pub(super) fn get_013430() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013431(),
          )],
          get_013434(),
        ))
      }
      pub(super) fn get_013427() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_013428(),
          )],
          get_013430(),
        ))
      }
      pub(super) fn get_013418() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013419(),
          vec![get_013422(), get_013427()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013413() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013414(),
          vec![get_013417(), get_013418()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013406() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_013407(),
          )],
          get_013413(),
        ))
      }
      pub(super) fn get_013393() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_013394(),
          get_013401(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_013406(),
        ))
      }
      pub(super) fn get_013439() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'value' not bound"))
      }
      pub(super) fn get_013438() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013439()))
      }
      pub(super) fn get_013442() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013443() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestJsonEx"))
      }
      pub(super) fn get_013441() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013442(), get_013443()))
      }
      pub(super) fn get_013444() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 380u32)
        }))
      }
      pub(super) fn get_013445() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("    "))
      }
      pub(super) fn get_013440() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013441(),
          vec![get_013444(), get_013445()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013437() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("value", 380u32) },
            get_013438(),
          )],
          get_013440(),
        ))
      }
      pub(super) fn get_013280() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_013281()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_013282(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_013283(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_013287(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_013392(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_013393(),
            ),
          ],
          get_013437(),
        ))
      }
      pub(super) fn get_013446() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestJsonEx"))
      }
      pub(super) fn get_013448() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_013449() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_013452() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_013451() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013452()))
      }
      pub(super) fn get_013453() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_013450() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_013451(),
          )],
          get_013453(),
        ))
      }
      pub(super) fn get_013456() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_013455() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013456()))
      }
      pub(super) fn get_013458() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_013457() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013458()))
      }
      pub(super) fn get_013462() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013464() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013465() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013463() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013464(),
          CoreBinaryOperator::And(None),
          get_013465(),
        ))
      }
      pub(super) fn get_013461() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013462(),
          CoreBinaryOperator::GreaterThan(None),
          get_013463(),
        ))
      }
      pub(super) fn get_013466() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_013460() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013461(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_013466(),
        ))
      }
      pub(super) fn get_013470() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013471() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013469() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013470(), get_013471()))
      }
      pub(super) fn get_013472() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_013468() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013469(),
          vec![get_013472()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013476() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013477() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013475() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013476(), get_013477()))
      }
      pub(super) fn get_013478() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_013474() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013475(),
          vec![get_013478()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013482() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013483() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013481() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013482(), get_013483()))
      }
      pub(super) fn get_013484() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_013480() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013481(),
          vec![get_013484()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013488() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_013487() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013488()))
      }
      pub(super) fn get_013490() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_013489() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013490()))
      }
      pub(super) fn get_013494() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013495() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013493() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013494(), get_013495()))
      }
      pub(super) fn get_013496() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_013492() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013493(),
          vec![get_013496()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013500() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013501() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_013499() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013500(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_013501(),
        ))
      }
      pub(super) fn get_013504() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013505() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_013503() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013504(),
          CoreBinaryOperator::Minus(None),
          get_013505(),
        ))
      }
      pub(super) fn get_013506() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_013502() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013503(),
          CoreBinaryOperator::Plus(None),
          get_013506(),
        ))
      }
      pub(super) fn get_013509() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013510() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_013508() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013509(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_013510(),
        ))
      }
      pub(super) fn get_013513() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013514() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_013512() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013513(),
          CoreBinaryOperator::Minus(None),
          get_013514(),
        ))
      }
      pub(super) fn get_013515() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_013511() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013512(),
          CoreBinaryOperator::Plus(None),
          get_013515(),
        ))
      }
      pub(super) fn get_013517() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013518() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_013516() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013517(),
          CoreBinaryOperator::Minus(None),
          get_013518(),
        ))
      }
      pub(super) fn get_013507() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013508(), get_013511(), get_013516()))
      }
      pub(super) fn get_013498() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013499(), get_013502(), get_013507()))
      }
      pub(super) fn get_013522() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_013524() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013525() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_013523() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013524(),
          CoreBinaryOperator::And(None),
          get_013525(),
        ))
      }
      pub(super) fn get_013521() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013522(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_013523(),
        ))
      }
      pub(super) fn get_013526() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013520() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013521(),
          CoreBinaryOperator::LessThan(None),
          get_013526(),
        ))
      }
      pub(super) fn get_013528() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013530() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_013531() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_013529() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013530(),
          CoreBinaryOperator::Plus(None),
          get_013531(),
        ))
      }
      pub(super) fn get_013527() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013528(),
          CoreBinaryOperator::Mult(None),
          get_013529(),
        ))
      }
      pub(super) fn get_013535() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013536() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_013534() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013535(), get_013536()))
      }
      pub(super) fn get_013537() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_013539() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_013540() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013538() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013539(), get_013540()]))
      }
      pub(super) fn get_013533() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013534(),
          vec![get_013537(), get_013538()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013532() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013533()))
      }
      pub(super) fn get_013519() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013520(), get_013527(), get_013532()))
      }
      pub(super) fn get_013497() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_013498(),
          )],
          get_013519(),
        ))
      }
      pub(super) fn get_013491() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_013492(),
          )],
          get_013497(),
        ))
      }
      pub(super) fn get_013486() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_013487(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_013489(),
            ),
          ],
          get_013491(),
        ))
      }
      pub(super) fn get_013543() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013544() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_013542() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013543(), get_013544()))
      }
      pub(super) fn get_013545() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_013548() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013549() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_013547() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013548(), get_013549()))
      }
      pub(super) fn get_013550() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_013546() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013547(),
          vec![get_013550()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013551() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013541() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013542(),
          vec![get_013545(), get_013546(), get_013551()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013485() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_013486(),
          )],
          get_013541(),
        ))
      }
      pub(super) fn get_013479() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_013480(),
          )],
          get_013485(),
        ))
      }
      pub(super) fn get_013473() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_013474(),
          )],
          get_013479(),
        ))
      }
      pub(super) fn get_013467() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_013468(),
          )],
          get_013473(),
        ))
      }
      pub(super) fn get_013555() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013556() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_013554() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013555(), get_013556()))
      }
      pub(super) fn get_013557() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_013558() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013553() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013554(),
          vec![get_013557(), get_013558()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013552() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013553()))
      }
      pub(super) fn get_013459() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013460(), get_013467(), get_013552()))
      }
      pub(super) fn get_013454() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_013455(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_013457(),
            ),
          ],
          get_013459(),
        ))
      }
      pub(super) fn get_013559() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_013563() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_013564() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013562() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013563(), get_013564()))
      }
      pub(super) fn get_013566() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_013567() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013565() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013566(), get_013567()))
      }
      pub(super) fn get_013561() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013562(),
          )],
          get_013565(),
        ))
      }
      pub(super) fn get_013570() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_013571() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013569() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013570(), get_013571()))
      }
      pub(super) fn get_013572() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013568() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013569(),
          )],
          get_013572(),
        ))
      }
      pub(super) fn get_013576() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013577() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_013575() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013576(), get_013577()))
      }
      pub(super) fn get_013578() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013579() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_013574() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013575(),
          vec![get_013578(), get_013579()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013582() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013583() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_013581() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013582(), get_013583()))
      }
      pub(super) fn get_013584() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_013587() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013588() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_013586() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013587(), get_013588()))
      }
      pub(super) fn get_013591() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013592() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_013590() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013591(), get_013592()))
      }
      pub(super) fn get_013593() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_013589() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013590(),
          vec![get_013593()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013596() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_013595() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013596()))
      }
      pub(super) fn get_013599() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_013600() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_013598() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013599(), get_013600()))
      }
      pub(super) fn get_013603() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013602() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013603()]))
      }
      pub(super) fn get_013601() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013602()]))
      }
      pub(super) fn get_013597() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013598(),
          )],
          get_013601(),
        ))
      }
      pub(super) fn get_013594() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_013595(),
          )],
          get_013597(),
        ))
      }
      pub(super) fn get_013585() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013586(),
          vec![get_013589(), get_013594()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013580() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013581(),
          vec![get_013584(), get_013585()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013573() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_013574(),
          )],
          get_013580(),
        ))
      }
      pub(super) fn get_013560() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_013561(),
          get_013568(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_013573(),
        ))
      }
      pub(super) fn get_013606() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'value' not bound"))
      }
      pub(super) fn get_013605() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013606()))
      }
      pub(super) fn get_013608() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'indent' not bound"))
      }
      pub(super) fn get_013607() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013608()))
      }
      pub(super) fn get_013612() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_013611() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013612()))
      }
      pub(super) fn get_013614() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'path' not bound"))
      }
      pub(super) fn get_013613() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013614()))
      }
      pub(super) fn get_013616() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'cindent' not bound"))
      }
      pub(super) fn get_013615() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013616()))
      }
      pub(super) fn get_013620() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013621() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_013619() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013620(), get_013621()))
      }
      pub(super) fn get_013622() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013623() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_013618() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013619(),
          vec![get_013622(), get_013623()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013624() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("true"))
      }
      pub(super) fn get_013628() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013629() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_013627() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013628(), get_013629()))
      }
      pub(super) fn get_013630() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013631() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_013626() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013627(),
          vec![get_013630(), get_013631()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013632() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("false"))
      }
      pub(super) fn get_013636() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013637() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_013635() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013636(), get_013637()))
      }
      pub(super) fn get_013638() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013639() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_013634() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013635(),
          vec![get_013638(), get_013639()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013640() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("null"))
      }
      pub(super) fn get_013644() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013645() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_013643() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013644(), get_013645()))
      }
      pub(super) fn get_013646() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013642() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013643(),
          vec![get_013646()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013648() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_013649() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013647() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013648(),
          CoreBinaryOperator::Plus(None),
          get_013649(),
        ))
      }
      pub(super) fn get_013653() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013654() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_013652() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013653(), get_013654()))
      }
      pub(super) fn get_013655() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013651() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013652(),
          vec![get_013655()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013658() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013659() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("escapeStringJson"))
      }
      pub(super) fn get_013657() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013658(), get_013659()))
      }
      pub(super) fn get_013660() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013656() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013657(),
          vec![get_013660()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013664() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013665() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isFunction"))
      }
      pub(super) fn get_013663() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013664(), get_013665()))
      }
      pub(super) fn get_013666() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013662() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013663(),
          vec![get_013666()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013669() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Tried to manifest function at "))
      }
      pub(super) fn get_013670() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("path", 385u32)
        }))
      }
      pub(super) fn get_013668() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013669(),
          CoreBinaryOperator::Plus(None),
          get_013670(),
        ))
      }
      pub(super) fn get_013667() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013668()))
      }
      pub(super) fn get_013674() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013675() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_013673() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013674(), get_013675()))
      }
      pub(super) fn get_013676() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013672() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013673(),
          vec![get_013676()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013680() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013681() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_013679() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013680(), get_013681()))
      }
      pub(super) fn get_013682() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013686() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013687() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_013685() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013686(), get_013687()))
      }
      pub(super) fn get_013688() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013684() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013685(),
          vec![get_013688()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013689() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_013683() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013684(),
          CoreBinaryOperator::Minus(None),
          get_013689(),
        ))
      }
      pub(super) fn get_013678() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013679(),
          vec![get_013682(), get_013683()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013692() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 386u32)
        }))
      }
      pub(super) fn get_013693() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("indent", 382u32)
        }))
      }
      pub(super) fn get_013691() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013692(),
          CoreBinaryOperator::Plus(None),
          get_013693(),
        ))
      }
      pub(super) fn get_013698() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("[\n"))
      }
      pub(super) fn get_013697() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013698()]))
      }
      pub(super) fn get_013701() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013702() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_013700() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013701(), get_013702()))
      }
      pub(super) fn get_013704() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(",\n"))
      }
      pub(super) fn get_013703() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013704()]))
      }
      pub(super) fn get_013706() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("range", 387u32)
        }))
      }
      pub(super) fn get_013709() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013710() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_013708() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013709(), get_013710()))
      }
      pub(super) fn get_013711() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_013714() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013715() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_013713() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013714(), get_013715()))
      }
      pub(super) fn get_013718() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013719() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_013717() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013718(), get_013719()))
      }
      pub(super) fn get_013720() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 391u32)
        }))
      }
      pub(super) fn get_013716() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013717(),
          vec![get_013720()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013723() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_013722() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013723()))
      }
      pub(super) fn get_013726() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 391u32)
        }))
      }
      pub(super) fn get_013727() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 392u32)
        }))
      }
      pub(super) fn get_013725() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013726(), get_013727()))
      }
      pub(super) fn get_013731() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("new_indent", 388u32)
        }))
      }
      pub(super) fn get_013733() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 383u32)
        }))
      }
      pub(super) fn get_013735() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013736() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 390u32)
        }))
      }
      pub(super) fn get_013734() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013735(), get_013736()))
      }
      pub(super) fn get_013738() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("path", 385u32)
        }))
      }
      pub(super) fn get_013740() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 390u32)
        }))
      }
      pub(super) fn get_013739() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013740()]))
      }
      pub(super) fn get_013737() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013738(),
          CoreBinaryOperator::Plus(None),
          get_013739(),
        ))
      }
      pub(super) fn get_013741() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("new_indent", 388u32)
        }))
      }
      pub(super) fn get_013732() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013733(),
          vec![get_013734(), get_013737(), get_013741()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013730() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013731(),
          CoreBinaryOperator::Plus(None),
          get_013732(),
        ))
      }
      pub(super) fn get_013729() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013730()]))
      }
      pub(super) fn get_013728() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013729()]))
      }
      pub(super) fn get_013724() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 390u32) },
            get_013725(),
          )],
          get_013728(),
        ))
      }
      pub(super) fn get_013721() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 392u32) },
            get_013722(),
          )],
          get_013724(),
        ))
      }
      pub(super) fn get_013712() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013713(),
          vec![get_013716(), get_013721()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013707() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013708(),
          vec![get_013711(), get_013712()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013705() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 391u32) },
            get_013706(),
          )],
          get_013707(),
        ))
      }
      pub(super) fn get_013699() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013700(),
          vec![get_013703(), get_013705()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013696() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013697(),
          CoreBinaryOperator::Plus(None),
          get_013699(),
        ))
      }
      pub(super) fn get_013745() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_013746() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 386u32)
        }))
      }
      pub(super) fn get_013744() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013745(),
          CoreBinaryOperator::Plus(None),
          get_013746(),
        ))
      }
      pub(super) fn get_013747() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("]"))
      }
      pub(super) fn get_013743() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013744(),
          CoreBinaryOperator::Plus(None),
          get_013747(),
        ))
      }
      pub(super) fn get_013742() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013743()]))
      }
      pub(super) fn get_013695() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013696(),
          CoreBinaryOperator::Plus(None),
          get_013742(),
        ))
      }
      pub(super) fn get_013750() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013751() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_013749() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013750(), get_013751()))
      }
      pub(super) fn get_013752() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_013753() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lines", 389u32)
        }))
      }
      pub(super) fn get_013748() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013749(),
          vec![get_013752(), get_013753()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013694() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lines", 389u32) },
            get_013695(),
          )],
          get_013748(),
        ))
      }
      pub(super) fn get_013690() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("new_indent", 388u32) },
            get_013691(),
          )],
          get_013694(),
        ))
      }
      pub(super) fn get_013677() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("range", 387u32) },
            get_013678(),
          )],
          get_013690(),
        ))
      }
      pub(super) fn get_013757() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013758() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_013756() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013757(), get_013758()))
      }
      pub(super) fn get_013759() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013755() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013756(),
          vec![get_013759()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013764() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("{\n"))
      }
      pub(super) fn get_013763() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013764()]))
      }
      pub(super) fn get_013767() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013768() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_013766() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013767(), get_013768()))
      }
      pub(super) fn get_013770() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(",\n"))
      }
      pub(super) fn get_013769() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013770()]))
      }
      pub(super) fn get_013774() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013775() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_013773() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013774(), get_013775()))
      }
      pub(super) fn get_013776() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013772() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013773(),
          vec![get_013776()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013779() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013780() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_013778() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013779(), get_013780()))
      }
      pub(super) fn get_013781() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_013784() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013785() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_013783() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013784(), get_013785()))
      }
      pub(super) fn get_013788() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013789() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_013787() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013788(), get_013789()))
      }
      pub(super) fn get_013790() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 395u32)
        }))
      }
      pub(super) fn get_013786() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013787(),
          vec![get_013790()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013793() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_013792() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013793()))
      }
      pub(super) fn get_013796() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 395u32)
        }))
      }
      pub(super) fn get_013797() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 396u32)
        }))
      }
      pub(super) fn get_013795() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013796(), get_013797()))
      }
      pub(super) fn get_013804() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 386u32)
        }))
      }
      pub(super) fn get_013805() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("indent", 382u32)
        }))
      }
      pub(super) fn get_013803() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013804(),
          CoreBinaryOperator::Plus(None),
          get_013805(),
        ))
      }
      pub(super) fn get_013808() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013809() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("escapeStringJson"))
      }
      pub(super) fn get_013807() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013808(), get_013809()))
      }
      pub(super) fn get_013810() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 394u32)
        }))
      }
      pub(super) fn get_013806() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013807(),
          vec![get_013810()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013802() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013803(),
          CoreBinaryOperator::Plus(None),
          get_013806(),
        ))
      }
      pub(super) fn get_013811() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(": "))
      }
      pub(super) fn get_013801() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013802(),
          CoreBinaryOperator::Plus(None),
          get_013811(),
        ))
      }
      pub(super) fn get_013813() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 383u32)
        }))
      }
      pub(super) fn get_013815() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 384u32)
        }))
      }
      pub(super) fn get_013816() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 394u32)
        }))
      }
      pub(super) fn get_013814() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013815(), get_013816()))
      }
      pub(super) fn get_013818() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("path", 385u32)
        }))
      }
      pub(super) fn get_013820() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 394u32)
        }))
      }
      pub(super) fn get_013819() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013820()]))
      }
      pub(super) fn get_013817() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013818(),
          CoreBinaryOperator::Plus(None),
          get_013819(),
        ))
      }
      pub(super) fn get_013822() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 386u32)
        }))
      }
      pub(super) fn get_013823() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("indent", 382u32)
        }))
      }
      pub(super) fn get_013821() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013822(),
          CoreBinaryOperator::Plus(None),
          get_013823(),
        ))
      }
      pub(super) fn get_013812() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013813(),
          vec![get_013814(), get_013817(), get_013821()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013800() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013801(),
          CoreBinaryOperator::Plus(None),
          get_013812(),
        ))
      }
      pub(super) fn get_013799() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013800()]))
      }
      pub(super) fn get_013798() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013799()]))
      }
      pub(super) fn get_013794() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 394u32) },
            get_013795(),
          )],
          get_013798(),
        ))
      }
      pub(super) fn get_013791() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 396u32) },
            get_013792(),
          )],
          get_013794(),
        ))
      }
      pub(super) fn get_013782() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013783(),
          vec![get_013786(), get_013791()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013777() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013778(),
          vec![get_013781(), get_013782()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013771() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 395u32) },
            get_013772(),
          )],
          get_013777(),
        ))
      }
      pub(super) fn get_013765() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013766(),
          vec![get_013769(), get_013771()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013762() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013763(),
          CoreBinaryOperator::Plus(None),
          get_013765(),
        ))
      }
      pub(super) fn get_013827() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_013828() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 386u32)
        }))
      }
      pub(super) fn get_013826() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013827(),
          CoreBinaryOperator::Plus(None),
          get_013828(),
        ))
      }
      pub(super) fn get_013829() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("}"))
      }
      pub(super) fn get_013825() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013826(),
          CoreBinaryOperator::Plus(None),
          get_013829(),
        ))
      }
      pub(super) fn get_013824() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013825()]))
      }
      pub(super) fn get_013761() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013762(),
          CoreBinaryOperator::Plus(None),
          get_013824(),
        ))
      }
      pub(super) fn get_013832() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013833() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_013831() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013832(), get_013833()))
      }
      pub(super) fn get_013834() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_013835() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lines", 393u32)
        }))
      }
      pub(super) fn get_013830() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013831(),
          vec![get_013834(), get_013835()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013760() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lines", 393u32) },
            get_013761(),
          )],
          get_013830(),
        ))
      }
      pub(super) fn get_013836() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_013754() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013755(), get_013760(), get_013836()))
      }
      pub(super) fn get_013671() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013672(), get_013677(), get_013754()))
      }
      pub(super) fn get_013661() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013662(), get_013667(), get_013671()))
      }
      pub(super) fn get_013650() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013651(), get_013656(), get_013661()))
      }
      pub(super) fn get_013641() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013642(), get_013647(), get_013650()))
      }
      pub(super) fn get_013633() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013634(), get_013640(), get_013641()))
      }
      pub(super) fn get_013625() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013626(), get_013632(), get_013633()))
      }
      pub(super) fn get_013617() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013618(), get_013624(), get_013625()))
      }
      pub(super) fn get_013610() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("v", 384u32) },
              get_013611(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("path", 385u32) },
              get_013613(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("cindent", 386u32) },
              get_013615(),
            ),
          ],
          get_013617(),
        ))
      }
      pub(super) fn get_013838() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 383u32)
        }))
      }
      pub(super) fn get_013839() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 381u32)
        }))
      }
      pub(super) fn get_013840() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_013841() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_013837() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013838(),
          vec![get_013839(), get_013840(), get_013841()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013609() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 383u32) },
            get_013610(),
          )],
          get_013837(),
        ))
      }
      pub(super) fn get_013604() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("value", 381u32) },
              get_013605(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("indent", 382u32) },
              get_013607(),
            ),
          ],
          get_013609(),
        ))
      }
      pub(super) fn get_013447() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_013448()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_013449(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_013450(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_013454(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_013559(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_013560(),
            ),
          ],
          get_013604(),
        ))
      }
      pub(super) fn get_013842() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestYamlDoc"))
      }
      pub(super) fn get_013844() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_013845() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_013848() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_013847() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013848()))
      }
      pub(super) fn get_013849() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_013846() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_013847(),
          )],
          get_013849(),
        ))
      }
      pub(super) fn get_013852() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_013851() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013852()))
      }
      pub(super) fn get_013854() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_013853() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013854()))
      }
      pub(super) fn get_013858() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013860() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013861() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013859() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013860(),
          CoreBinaryOperator::And(None),
          get_013861(),
        ))
      }
      pub(super) fn get_013857() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013858(),
          CoreBinaryOperator::GreaterThan(None),
          get_013859(),
        ))
      }
      pub(super) fn get_013862() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_013856() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013857(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_013862(),
        ))
      }
      pub(super) fn get_013866() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013867() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013865() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013866(), get_013867()))
      }
      pub(super) fn get_013868() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_013864() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013865(),
          vec![get_013868()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013872() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013873() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013871() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013872(), get_013873()))
      }
      pub(super) fn get_013874() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_013870() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013871(),
          vec![get_013874()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013878() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013879() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013877() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013878(), get_013879()))
      }
      pub(super) fn get_013880() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_013876() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013877(),
          vec![get_013880()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013884() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_013883() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013884()))
      }
      pub(super) fn get_013886() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_013885() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013886()))
      }
      pub(super) fn get_013890() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013891() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_013889() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013890(), get_013891()))
      }
      pub(super) fn get_013892() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_013888() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013889(),
          vec![get_013892()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013896() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013897() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_013895() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013896(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_013897(),
        ))
      }
      pub(super) fn get_013900() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013901() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_013899() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013900(),
          CoreBinaryOperator::Minus(None),
          get_013901(),
        ))
      }
      pub(super) fn get_013902() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_013898() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013899(),
          CoreBinaryOperator::Plus(None),
          get_013902(),
        ))
      }
      pub(super) fn get_013905() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013906() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_013904() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013905(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_013906(),
        ))
      }
      pub(super) fn get_013909() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013910() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_013908() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013909(),
          CoreBinaryOperator::Minus(None),
          get_013910(),
        ))
      }
      pub(super) fn get_013911() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_013907() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013908(),
          CoreBinaryOperator::Plus(None),
          get_013911(),
        ))
      }
      pub(super) fn get_013913() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_013914() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_013912() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013913(),
          CoreBinaryOperator::Minus(None),
          get_013914(),
        ))
      }
      pub(super) fn get_013903() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013904(), get_013907(), get_013912()))
      }
      pub(super) fn get_013894() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013895(), get_013898(), get_013903()))
      }
      pub(super) fn get_013918() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_013920() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013921() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_013919() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013920(),
          CoreBinaryOperator::And(None),
          get_013921(),
        ))
      }
      pub(super) fn get_013917() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013918(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_013919(),
        ))
      }
      pub(super) fn get_013922() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013916() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013917(),
          CoreBinaryOperator::LessThan(None),
          get_013922(),
        ))
      }
      pub(super) fn get_013924() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013926() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_013927() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_013925() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013926(),
          CoreBinaryOperator::Plus(None),
          get_013927(),
        ))
      }
      pub(super) fn get_013923() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_013924(),
          CoreBinaryOperator::Mult(None),
          get_013925(),
        ))
      }
      pub(super) fn get_013931() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013932() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_013930() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013931(), get_013932()))
      }
      pub(super) fn get_013933() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_013935() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_013936() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013934() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013935(), get_013936()]))
      }
      pub(super) fn get_013929() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013930(),
          vec![get_013933(), get_013934()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013928() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013929()))
      }
      pub(super) fn get_013915() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013916(), get_013923(), get_013928()))
      }
      pub(super) fn get_013893() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_013894(),
          )],
          get_013915(),
        ))
      }
      pub(super) fn get_013887() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_013888(),
          )],
          get_013893(),
        ))
      }
      pub(super) fn get_013882() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_013883(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_013885(),
            ),
          ],
          get_013887(),
        ))
      }
      pub(super) fn get_013939() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013940() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_013938() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013939(), get_013940()))
      }
      pub(super) fn get_013941() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_013944() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013945() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_013943() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013944(), get_013945()))
      }
      pub(super) fn get_013946() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_013942() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013943(),
          vec![get_013946()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013947() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013937() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013938(),
          vec![get_013941(), get_013942(), get_013947()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013881() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_013882(),
          )],
          get_013937(),
        ))
      }
      pub(super) fn get_013875() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_013876(),
          )],
          get_013881(),
        ))
      }
      pub(super) fn get_013869() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_013870(),
          )],
          get_013875(),
        ))
      }
      pub(super) fn get_013863() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_013864(),
          )],
          get_013869(),
        ))
      }
      pub(super) fn get_013951() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013952() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_013950() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013951(), get_013952()))
      }
      pub(super) fn get_013953() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_013954() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_013949() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013950(),
          vec![get_013953(), get_013954()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013948() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013949()))
      }
      pub(super) fn get_013855() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_013856(), get_013863(), get_013948()))
      }
      pub(super) fn get_013850() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_013851(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_013853(),
            ),
          ],
          get_013855(),
        ))
      }
      pub(super) fn get_013955() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_013959() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_013960() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013958() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013959(), get_013960()))
      }
      pub(super) fn get_013962() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_013963() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013961() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013962(), get_013963()))
      }
      pub(super) fn get_013957() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013958(),
          )],
          get_013961(),
        ))
      }
      pub(super) fn get_013966() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_013967() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013965() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013966(), get_013967()))
      }
      pub(super) fn get_013968() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013964() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013965(),
          )],
          get_013968(),
        ))
      }
      pub(super) fn get_013972() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013973() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_013971() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013972(), get_013973()))
      }
      pub(super) fn get_013974() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_013975() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_013970() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013971(),
          vec![get_013974(), get_013975()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013978() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013979() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_013977() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013978(), get_013979()))
      }
      pub(super) fn get_013980() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_013983() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013984() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_013982() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013983(), get_013984()))
      }
      pub(super) fn get_013987() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_013988() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_013986() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013987(), get_013988()))
      }
      pub(super) fn get_013989() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_013985() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013986(),
          vec![get_013989()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013992() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_013991() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_013992()))
      }
      pub(super) fn get_013995() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_013996() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_013994() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_013995(), get_013996()))
      }
      pub(super) fn get_013999() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_013998() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013999()]))
      }
      pub(super) fn get_013997() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_013998()]))
      }
      pub(super) fn get_013993() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_013994(),
          )],
          get_013997(),
        ))
      }
      pub(super) fn get_013990() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_013991(),
          )],
          get_013993(),
        ))
      }
      pub(super) fn get_013981() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013982(),
          vec![get_013985(), get_013990()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013976() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_013977(),
          vec![get_013980(), get_013981()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_013969() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_013970(),
          )],
          get_013976(),
        ))
      }
      pub(super) fn get_013956() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_013957(),
          get_013964(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_013969(),
        ))
      }
      pub(super) fn get_014002() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'value' not bound"))
      }
      pub(super) fn get_014001() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014002()))
      }
      pub(super) fn get_014003() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_014007() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_014006() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014007()))
      }
      pub(super) fn get_014009() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'path' not bound"))
      }
      pub(super) fn get_014008() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014009()))
      }
      pub(super) fn get_014011() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'cindent' not bound"))
      }
      pub(super) fn get_014010() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014011()))
      }
      pub(super) fn get_014015() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014016() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_014014() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014015(), get_014016()))
      }
      pub(super) fn get_014017() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014018() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_014013() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014014(),
          vec![get_014017(), get_014018()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014019() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("true"))
      }
      pub(super) fn get_014023() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014024() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_014022() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014023(), get_014024()))
      }
      pub(super) fn get_014025() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014026() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_014021() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014022(),
          vec![get_014025(), get_014026()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014027() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("false"))
      }
      pub(super) fn get_014031() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014032() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_014030() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014031(), get_014032()))
      }
      pub(super) fn get_014033() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014034() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_014029() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014030(),
          vec![get_014033(), get_014034()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014035() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("null"))
      }
      pub(super) fn get_014039() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014040() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_014038() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014039(), get_014040()))
      }
      pub(super) fn get_014041() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014037() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014038(),
          vec![get_014041()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014043() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_014044() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014042() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014043(),
          CoreBinaryOperator::Plus(None),
          get_014044(),
        ))
      }
      pub(super) fn get_014048() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014049() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_014047() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014048(), get_014049()))
      }
      pub(super) fn get_014050() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014046() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014047(),
          vec![get_014050()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014054() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014055() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014053() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014054(), get_014055()))
      }
      pub(super) fn get_014056() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014052() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014053(),
          vec![get_014056()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014060() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014061() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_014059() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014060(), get_014061()))
      }
      pub(super) fn get_014062() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("len", 403u32)
        }))
      }
      pub(super) fn get_014063() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014058() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014059(),
          vec![get_014062(), get_014063()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014064() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\"\""))
      }
      pub(super) fn get_014068() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014069() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_014067() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014068(), get_014069()))
      }
      pub(super) fn get_014071() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014073() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("len", 403u32)
        }))
      }
      pub(super) fn get_014074() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_014072() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014073(),
          CoreBinaryOperator::Minus(None),
          get_014074(),
        ))
      }
      pub(super) fn get_014070() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014071(), get_014072()))
      }
      pub(super) fn get_014075() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_014066() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014067(),
          vec![get_014070(), get_014075()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014079() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014080() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("split"))
      }
      pub(super) fn get_014078() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014079(), get_014080()))
      }
      pub(super) fn get_014081() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014082() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_014077() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014078(),
          vec![get_014081(), get_014082()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014085() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014086() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014084() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014085(), get_014086()))
      }
      pub(super) fn get_014089() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_014090() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 402u32)
        }))
      }
      pub(super) fn get_014088() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014089(),
          CoreBinaryOperator::Plus(None),
          get_014090(),
        ))
      }
      pub(super) fn get_014091() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("  "))
      }
      pub(super) fn get_014087() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014088(),
          CoreBinaryOperator::Plus(None),
          get_014091(),
        ))
      }
      pub(super) fn get_014094() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("|"))
      }
      pub(super) fn get_014093() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014094()]))
      }
      pub(super) fn get_014097() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014098() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_014096() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014097(), get_014098()))
      }
      pub(super) fn get_014099() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("split", 404u32)
        }))
      }
      pub(super) fn get_014100() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014104() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014105() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014103() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014104(), get_014105()))
      }
      pub(super) fn get_014106() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("split", 404u32)
        }))
      }
      pub(super) fn get_014102() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014103(),
          vec![get_014106()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014107() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_014101() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014102(),
          CoreBinaryOperator::Minus(None),
          get_014107(),
        ))
      }
      pub(super) fn get_014108() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_014095() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014096(),
          vec![get_014099(), get_014100(), get_014101(), get_014108()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014092() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014093(),
          CoreBinaryOperator::Plus(None),
          get_014095(),
        ))
      }
      pub(super) fn get_014083() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014084(),
          vec![get_014087(), get_014092()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014076() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("split", 404u32) },
            get_014077(),
          )],
          get_014083(),
        ))
      }
      pub(super) fn get_014111() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014112() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("escapeStringJson"))
      }
      pub(super) fn get_014110() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014111(), get_014112()))
      }
      pub(super) fn get_014113() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014109() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014110(),
          vec![get_014113()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014065() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014066(), get_014076(), get_014109()))
      }
      pub(super) fn get_014057() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014058(), get_014064(), get_014065()))
      }
      pub(super) fn get_014051() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("len", 403u32) },
            get_014052(),
          )],
          get_014057(),
        ))
      }
      pub(super) fn get_014117() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014118() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isFunction"))
      }
      pub(super) fn get_014116() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014117(), get_014118()))
      }
      pub(super) fn get_014119() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014115() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014116(),
          vec![get_014119()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014122() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Tried to manifest function at "))
      }
      pub(super) fn get_014123() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("path", 401u32)
        }))
      }
      pub(super) fn get_014121() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014122(),
          CoreBinaryOperator::Plus(None),
          get_014123(),
        ))
      }
      pub(super) fn get_014120() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014121()))
      }
      pub(super) fn get_014127() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014128() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_014126() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014127(), get_014128()))
      }
      pub(super) fn get_014129() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014125() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014126(),
          vec![get_014129()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014133() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014134() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_014132() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014133(), get_014134()))
      }
      pub(super) fn get_014137() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014138() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014136() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014137(), get_014138()))
      }
      pub(super) fn get_014139() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014135() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014136(),
          vec![get_014139()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014140() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014131() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014132(),
          vec![get_014135(), get_014140()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014141() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("[]"))
      }
      pub(super) fn get_014145() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'value' not bound"))
      }
      pub(super) fn get_014144() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014145()))
      }
      pub(super) fn get_014151() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014152() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_014150() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014151(), get_014152()))
      }
      pub(super) fn get_014153() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 406u32)
        }))
      }
      pub(super) fn get_014149() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014150(),
          vec![get_014153()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014156() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014157() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014155() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014156(), get_014157()))
      }
      pub(super) fn get_014158() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 406u32)
        }))
      }
      pub(super) fn get_014154() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014155(),
          vec![get_014158()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014148() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014149(),
          CoreBinaryOperator::And(None),
          get_014154(),
        ))
      }
      pub(super) fn get_014159() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014147() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014148(),
          CoreBinaryOperator::GreaterThan(None),
          get_014159(),
        ))
      }
      pub(super) fn get_014161() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("new_indent"))
      }
      pub(super) fn get_014164() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 402u32)
        }))
      }
      pub(super) fn get_014165() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("  "))
      }
      pub(super) fn get_014163() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014164(),
          CoreBinaryOperator::Plus(None),
          get_014165(),
        ))
      }
      pub(super) fn get_014162() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_014163()))
      }
      pub(super) fn get_014166() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("space"))
      }
      pub(super) fn get_014169() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_014171() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_014172() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("new_indent"))
      }
      pub(super) fn get_014170() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014171(), get_014172()))
      }
      pub(super) fn get_014168() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014169(),
          CoreBinaryOperator::Plus(None),
          get_014170(),
        ))
      }
      pub(super) fn get_014167() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_014168()))
      }
      pub(super) fn get_014160() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_014161(),
              CoreObjectFieldOperator::Default(None),
              get_014162(),
            ),
            CoreObjectField::new(
              get_014166(),
              CoreObjectFieldOperator::Default(None),
              get_014167(),
            ),
          ],
        ))
      }
      pub(super) fn get_014178() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014179() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_014177() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014178(), get_014179()))
      }
      pub(super) fn get_014180() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 406u32)
        }))
      }
      pub(super) fn get_014176() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014177(),
          vec![get_014180()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014183() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014184() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014182() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014183(), get_014184()))
      }
      pub(super) fn get_014185() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 406u32)
        }))
      }
      pub(super) fn get_014181() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014182(),
          vec![get_014185()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014175() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014176(),
          CoreBinaryOperator::And(None),
          get_014181(),
        ))
      }
      pub(super) fn get_014186() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014174() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014175(),
          CoreBinaryOperator::GreaterThan(None),
          get_014186(),
        ))
      }
      pub(super) fn get_014188() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("new_indent"))
      }
      pub(super) fn get_014191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 402u32)
        }))
      }
      pub(super) fn get_014192() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("  "))
      }
      pub(super) fn get_014190() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014191(),
          CoreBinaryOperator::Plus(None),
          get_014192(),
        ))
      }
      pub(super) fn get_014189() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_014190()))
      }
      pub(super) fn get_014193() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("space"))
      }
      pub(super) fn get_014195() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" "))
      }
      pub(super) fn get_014194() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_014195()))
      }
      pub(super) fn get_014187() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_014188(),
              CoreObjectFieldOperator::Default(None),
              get_014189(),
            ),
            CoreObjectField::new(
              get_014193(),
              CoreObjectFieldOperator::Default(None),
              get_014194(),
            ),
          ],
        ))
      }
      pub(super) fn get_014197() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("new_indent"))
      }
      pub(super) fn get_014199() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 402u32)
        }))
      }
      pub(super) fn get_014198() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_014199()))
      }
      pub(super) fn get_014200() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("space"))
      }
      pub(super) fn get_014202() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" "))
      }
      pub(super) fn get_014201() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_014202()))
      }
      pub(super) fn get_014196() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_014197(),
              CoreObjectFieldOperator::Default(None),
              get_014198(),
            ),
            CoreObjectField::new(
              get_014200(),
              CoreObjectFieldOperator::Default(None),
              get_014201(),
            ),
          ],
        ))
      }
      pub(super) fn get_014173() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014174(), get_014187(), get_014196()))
      }
      pub(super) fn get_014146() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014147(), get_014160(), get_014173()))
      }
      pub(super) fn get_014143() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("value", 406u32) },
            get_014144(),
          )],
          get_014146(),
        ))
      }
      pub(super) fn get_014206() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014207() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_014205() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014206(), get_014207()))
      }
      pub(super) fn get_014208() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014212() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014213() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014211() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014212(), get_014213()))
      }
      pub(super) fn get_014214() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014210() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014211(),
          vec![get_014214()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014215() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_014209() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014210(),
          CoreBinaryOperator::Minus(None),
          get_014215(),
        ))
      }
      pub(super) fn get_014204() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014205(),
          vec![get_014208(), get_014209()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014218() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("range", 407u32)
        }))
      }
      pub(super) fn get_014221() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014222() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014220() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014221(), get_014222()))
      }
      pub(super) fn get_014223() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_014226() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014227() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_014225() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014226(), get_014227()))
      }
      pub(super) fn get_014230() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014231() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014229() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014230(), get_014231()))
      }
      pub(super) fn get_014232() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 411u32)
        }))
      }
      pub(super) fn get_014228() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014229(),
          vec![get_014232()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014235() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_014234() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014235()))
      }
      pub(super) fn get_014238() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 411u32)
        }))
      }
      pub(super) fn get_014239() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 412u32)
        }))
      }
      pub(super) fn get_014237() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014238(), get_014239()))
      }
      pub(super) fn get_014243() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("params", 405u32)
        }))
      }
      pub(super) fn get_014245() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014246() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 409u32)
        }))
      }
      pub(super) fn get_014244() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014245(), get_014246()))
      }
      pub(super) fn get_014242() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014243(),
          vec![get_014244()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014241() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014242()]))
      }
      pub(super) fn get_014249() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014250() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014248() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014249(), get_014250()))
      }
      pub(super) fn get_014251() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_014254() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014255() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_014253() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014254(), get_014255()))
      }
      pub(super) fn get_014258() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014259() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014257() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014258(), get_014259()))
      }
      pub(super) fn get_014260() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 413u32)
        }))
      }
      pub(super) fn get_014256() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014257(),
          vec![get_014260()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014263() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_014262() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014263()))
      }
      pub(super) fn get_014266() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 413u32)
        }))
      }
      pub(super) fn get_014267() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 414u32)
        }))
      }
      pub(super) fn get_014265() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014266(), get_014267()))
      }
      pub(super) fn get_014271() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("-"))
      }
      pub(super) fn get_014273() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("param", 410u32)
        }))
      }
      pub(super) fn get_014274() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("space"))
      }
      pub(super) fn get_014272() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014273(), get_014274()))
      }
      pub(super) fn get_014270() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014271(),
          CoreBinaryOperator::Plus(None),
          get_014272(),
        ))
      }
      pub(super) fn get_014276() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 399u32)
        }))
      }
      pub(super) fn get_014278() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014279() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 409u32)
        }))
      }
      pub(super) fn get_014277() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014278(), get_014279()))
      }
      pub(super) fn get_014281() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("path", 401u32)
        }))
      }
      pub(super) fn get_014283() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 409u32)
        }))
      }
      pub(super) fn get_014282() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014283()]))
      }
      pub(super) fn get_014280() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014281(),
          CoreBinaryOperator::Plus(None),
          get_014282(),
        ))
      }
      pub(super) fn get_014285() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("param", 410u32)
        }))
      }
      pub(super) fn get_014286() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("new_indent"))
      }
      pub(super) fn get_014284() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014285(), get_014286()))
      }
      pub(super) fn get_014275() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014276(),
          vec![get_014277(), get_014280(), get_014284()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014269() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014270(),
          CoreBinaryOperator::Plus(None),
          get_014275(),
        ))
      }
      pub(super) fn get_014268() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014269()]))
      }
      pub(super) fn get_014264() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("param", 410u32) },
            get_014265(),
          )],
          get_014268(),
        ))
      }
      pub(super) fn get_014261() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 414u32) },
            get_014262(),
          )],
          get_014264(),
        ))
      }
      pub(super) fn get_014252() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014253(),
          vec![get_014256(), get_014261()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014247() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014248(),
          vec![get_014251(), get_014252()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014240() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 413u32) },
            get_014241(),
          )],
          get_014247(),
        ))
      }
      pub(super) fn get_014236() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 409u32) },
            get_014237(),
          )],
          get_014240(),
        ))
      }
      pub(super) fn get_014233() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 412u32) },
            get_014234(),
          )],
          get_014236(),
        ))
      }
      pub(super) fn get_014224() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014225(),
          vec![get_014228(), get_014233()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014219() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014220(),
          vec![get_014223(), get_014224()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014217() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 411u32) },
            get_014218(),
          )],
          get_014219(),
        ))
      }
      pub(super) fn get_014289() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014290() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014288() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014289(), get_014290()))
      }
      pub(super) fn get_014292() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_014293() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 402u32)
        }))
      }
      pub(super) fn get_014291() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014292(),
          CoreBinaryOperator::Plus(None),
          get_014293(),
        ))
      }
      pub(super) fn get_014294() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("parts", 408u32)
        }))
      }
      pub(super) fn get_014287() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014288(),
          vec![get_014291(), get_014294()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014216() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("parts", 408u32) },
            get_014217(),
          )],
          get_014287(),
        ))
      }
      pub(super) fn get_014203() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("range", 407u32) },
            get_014204(),
          )],
          get_014216(),
        ))
      }
      pub(super) fn get_014142() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("params", 405u32) },
            get_014143(),
          )],
          get_014203(),
        ))
      }
      pub(super) fn get_014130() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014131(), get_014141(), get_014142()))
      }
      pub(super) fn get_014298() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014299() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_014297() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014298(), get_014299()))
      }
      pub(super) fn get_014300() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014296() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014297(),
          vec![get_014300()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014304() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014305() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_014303() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014304(), get_014305()))
      }
      pub(super) fn get_014308() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014309() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014307() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014308(), get_014309()))
      }
      pub(super) fn get_014310() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014306() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014307(),
          vec![get_014310()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014311() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014302() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014303(),
          vec![get_014306(), get_014311()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014312() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("{}"))
      }
      pub(super) fn get_014316() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'value' not bound"))
      }
      pub(super) fn get_014315() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014316()))
      }
      pub(super) fn get_014322() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014323() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_014321() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014322(), get_014323()))
      }
      pub(super) fn get_014324() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 416u32)
        }))
      }
      pub(super) fn get_014320() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014321(),
          vec![get_014324()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014327() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014328() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014326() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014327(), get_014328()))
      }
      pub(super) fn get_014329() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 416u32)
        }))
      }
      pub(super) fn get_014325() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014326(),
          vec![get_014329()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014319() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014320(),
          CoreBinaryOperator::And(None),
          get_014325(),
        ))
      }
      pub(super) fn get_014330() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014318() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014319(),
          CoreBinaryOperator::GreaterThan(None),
          get_014330(),
        ))
      }
      pub(super) fn get_014332() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("new_indent"))
      }
      pub(super) fn get_014335() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("indent_array_in_object", 398u32)
        }))
      }
      pub(super) fn get_014337() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 402u32)
        }))
      }
      pub(super) fn get_014338() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("  "))
      }
      pub(super) fn get_014336() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014337(),
          CoreBinaryOperator::Plus(None),
          get_014338(),
        ))
      }
      pub(super) fn get_014339() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 402u32)
        }))
      }
      pub(super) fn get_014334() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014335(), get_014336(), get_014339()))
      }
      pub(super) fn get_014333() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_014334()))
      }
      pub(super) fn get_014340() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("space"))
      }
      pub(super) fn get_014343() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_014345() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_014346() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("new_indent"))
      }
      pub(super) fn get_014344() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014345(), get_014346()))
      }
      pub(super) fn get_014342() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014343(),
          CoreBinaryOperator::Plus(None),
          get_014344(),
        ))
      }
      pub(super) fn get_014341() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_014342()))
      }
      pub(super) fn get_014331() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_014332(),
              CoreObjectFieldOperator::Default(None),
              get_014333(),
            ),
            CoreObjectField::new(
              get_014340(),
              CoreObjectFieldOperator::Default(None),
              get_014341(),
            ),
          ],
        ))
      }
      pub(super) fn get_014352() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014353() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_014351() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014352(), get_014353()))
      }
      pub(super) fn get_014354() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 416u32)
        }))
      }
      pub(super) fn get_014350() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014351(),
          vec![get_014354()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014357() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014358() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014356() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014357(), get_014358()))
      }
      pub(super) fn get_014359() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 416u32)
        }))
      }
      pub(super) fn get_014355() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014356(),
          vec![get_014359()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014349() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014350(),
          CoreBinaryOperator::And(None),
          get_014355(),
        ))
      }
      pub(super) fn get_014360() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014348() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014349(),
          CoreBinaryOperator::GreaterThan(None),
          get_014360(),
        ))
      }
      pub(super) fn get_014362() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("new_indent"))
      }
      pub(super) fn get_014365() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 402u32)
        }))
      }
      pub(super) fn get_014366() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("  "))
      }
      pub(super) fn get_014364() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014365(),
          CoreBinaryOperator::Plus(None),
          get_014366(),
        ))
      }
      pub(super) fn get_014363() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_014364()))
      }
      pub(super) fn get_014367() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("space"))
      }
      pub(super) fn get_014370() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_014372() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_014373() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("new_indent"))
      }
      pub(super) fn get_014371() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014372(), get_014373()))
      }
      pub(super) fn get_014369() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014370(),
          CoreBinaryOperator::Plus(None),
          get_014371(),
        ))
      }
      pub(super) fn get_014368() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_014369()))
      }
      pub(super) fn get_014361() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_014362(),
              CoreObjectFieldOperator::Default(None),
              get_014363(),
            ),
            CoreObjectField::new(
              get_014367(),
              CoreObjectFieldOperator::Default(None),
              get_014368(),
            ),
          ],
        ))
      }
      pub(super) fn get_014375() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("new_indent"))
      }
      pub(super) fn get_014377() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 402u32)
        }))
      }
      pub(super) fn get_014376() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_014377()))
      }
      pub(super) fn get_014378() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("space"))
      }
      pub(super) fn get_014380() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" "))
      }
      pub(super) fn get_014379() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(vec![], get_014380()))
      }
      pub(super) fn get_014374() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_014375(),
              CoreObjectFieldOperator::Default(None),
              get_014376(),
            ),
            CoreObjectField::new(
              get_014378(),
              CoreObjectFieldOperator::Default(None),
              get_014379(),
            ),
          ],
        ))
      }
      pub(super) fn get_014347() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014348(), get_014361(), get_014374()))
      }
      pub(super) fn get_014317() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014318(), get_014331(), get_014347()))
      }
      pub(super) fn get_014314() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("value", 416u32) },
            get_014315(),
          )],
          get_014317(),
        ))
      }
      pub(super) fn get_014385() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014386() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_014384() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014385(), get_014386()))
      }
      pub(super) fn get_014387() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014383() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014384(),
          vec![get_014387()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014390() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014391() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014389() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014390(), get_014391()))
      }
      pub(super) fn get_014392() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_014395() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014396() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_014394() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014395(), get_014396()))
      }
      pub(super) fn get_014399() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014400() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014398() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014399(), get_014400()))
      }
      pub(super) fn get_014401() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 420u32)
        }))
      }
      pub(super) fn get_014397() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014398(),
          vec![get_014401()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014404() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_014403() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014404()))
      }
      pub(super) fn get_014407() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 420u32)
        }))
      }
      pub(super) fn get_014408() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 421u32)
        }))
      }
      pub(super) fn get_014406() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014407(), get_014408()))
      }
      pub(super) fn get_014412() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("params", 415u32)
        }))
      }
      pub(super) fn get_014414() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014415() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 418u32)
        }))
      }
      pub(super) fn get_014413() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014414(), get_014415()))
      }
      pub(super) fn get_014411() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014412(),
          vec![get_014413()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014410() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014411()]))
      }
      pub(super) fn get_014418() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014419() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014417() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014418(), get_014419()))
      }
      pub(super) fn get_014420() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_014423() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014424() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_014422() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014423(), get_014424()))
      }
      pub(super) fn get_014427() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014428() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014426() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014427(), get_014428()))
      }
      pub(super) fn get_014429() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 422u32)
        }))
      }
      pub(super) fn get_014425() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014426(),
          vec![get_014429()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014432() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_014431() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014432()))
      }
      pub(super) fn get_014435() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 422u32)
        }))
      }
      pub(super) fn get_014436() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 423u32)
        }))
      }
      pub(super) fn get_014434() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014435(), get_014436()))
      }
      pub(super) fn get_014443() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014444() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("escapeStringJson"))
      }
      pub(super) fn get_014442() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014443(), get_014444()))
      }
      pub(super) fn get_014445() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 418u32)
        }))
      }
      pub(super) fn get_014441() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014442(),
          vec![get_014445()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014446() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(":"))
      }
      pub(super) fn get_014440() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014441(),
          CoreBinaryOperator::Plus(None),
          get_014446(),
        ))
      }
      pub(super) fn get_014448() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("param", 419u32)
        }))
      }
      pub(super) fn get_014449() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("space"))
      }
      pub(super) fn get_014447() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014448(), get_014449()))
      }
      pub(super) fn get_014439() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014440(),
          CoreBinaryOperator::Plus(None),
          get_014447(),
        ))
      }
      pub(super) fn get_014451() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 399u32)
        }))
      }
      pub(super) fn get_014453() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 400u32)
        }))
      }
      pub(super) fn get_014454() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 418u32)
        }))
      }
      pub(super) fn get_014452() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014453(), get_014454()))
      }
      pub(super) fn get_014456() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("path", 401u32)
        }))
      }
      pub(super) fn get_014458() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 418u32)
        }))
      }
      pub(super) fn get_014457() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014458()]))
      }
      pub(super) fn get_014455() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014456(),
          CoreBinaryOperator::Plus(None),
          get_014457(),
        ))
      }
      pub(super) fn get_014460() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("param", 419u32)
        }))
      }
      pub(super) fn get_014461() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("new_indent"))
      }
      pub(super) fn get_014459() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014460(), get_014461()))
      }
      pub(super) fn get_014450() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014451(),
          vec![get_014452(), get_014455(), get_014459()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014438() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014439(),
          CoreBinaryOperator::Plus(None),
          get_014450(),
        ))
      }
      pub(super) fn get_014437() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014438()]))
      }
      pub(super) fn get_014433() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("param", 419u32) },
            get_014434(),
          )],
          get_014437(),
        ))
      }
      pub(super) fn get_014430() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 423u32) },
            get_014431(),
          )],
          get_014433(),
        ))
      }
      pub(super) fn get_014421() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014422(),
          vec![get_014425(), get_014430()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014416() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014417(),
          vec![get_014420(), get_014421()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014409() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 422u32) },
            get_014410(),
          )],
          get_014416(),
        ))
      }
      pub(super) fn get_014405() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 418u32) },
            get_014406(),
          )],
          get_014409(),
        ))
      }
      pub(super) fn get_014402() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 421u32) },
            get_014403(),
          )],
          get_014405(),
        ))
      }
      pub(super) fn get_014393() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014394(),
          vec![get_014397(), get_014402()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014388() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014389(),
          vec![get_014392(), get_014393()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014382() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 420u32) },
            get_014383(),
          )],
          get_014388(),
        ))
      }
      pub(super) fn get_014464() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014465() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014463() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014464(), get_014465()))
      }
      pub(super) fn get_014467() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_014468() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("cindent", 402u32)
        }))
      }
      pub(super) fn get_014466() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014467(),
          CoreBinaryOperator::Plus(None),
          get_014468(),
        ))
      }
      pub(super) fn get_014469() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lines", 417u32)
        }))
      }
      pub(super) fn get_014462() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014463(),
          vec![get_014466(), get_014469()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014381() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lines", 417u32) },
            get_014382(),
          )],
          get_014462(),
        ))
      }
      pub(super) fn get_014313() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("params", 415u32) },
            get_014314(),
          )],
          get_014381(),
        ))
      }
      pub(super) fn get_014301() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014302(), get_014312(), get_014313()))
      }
      pub(super) fn get_014470() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_014295() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014296(), get_014301(), get_014470()))
      }
      pub(super) fn get_014124() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014125(), get_014130(), get_014295()))
      }
      pub(super) fn get_014114() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014115(), get_014120(), get_014124()))
      }
      pub(super) fn get_014045() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014046(), get_014051(), get_014114()))
      }
      pub(super) fn get_014036() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014037(), get_014042(), get_014045()))
      }
      pub(super) fn get_014028() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014029(), get_014035(), get_014036()))
      }
      pub(super) fn get_014020() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014021(), get_014027(), get_014028()))
      }
      pub(super) fn get_014012() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014013(), get_014019(), get_014020()))
      }
      pub(super) fn get_014005() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("v", 400u32) },
              get_014006(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("path", 401u32) },
              get_014008(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("cindent", 402u32) },
              get_014010(),
            ),
          ],
          get_014012(),
        ))
      }
      pub(super) fn get_014472() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 399u32)
        }))
      }
      pub(super) fn get_014473() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 397u32)
        }))
      }
      pub(super) fn get_014474() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_014475() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_014471() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014472(),
          vec![get_014473(), get_014474(), get_014475()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014004() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 399u32) },
            get_014005(),
          )],
          get_014471(),
        ))
      }
      pub(super) fn get_014000() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("value", 397u32) },
              get_014001(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("indent_array_in_object", 398u32) },
              get_014003(),
            ),
          ],
          get_014004(),
        ))
      }
      pub(super) fn get_013843() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_013844()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_013845(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_013846(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_013850(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_013955(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_013956(),
            ),
          ],
          get_014000(),
        ))
      }
      pub(super) fn get_014476() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestYamlStream"))
      }
      pub(super) fn get_014478() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_014479() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_014482() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_014481() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014482()))
      }
      pub(super) fn get_014483() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_014480() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_014481(),
          )],
          get_014483(),
        ))
      }
      pub(super) fn get_014486() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_014485() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014486()))
      }
      pub(super) fn get_014488() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_014487() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014488()))
      }
      pub(super) fn get_014492() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_014494() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014495() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_014493() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014494(),
          CoreBinaryOperator::And(None),
          get_014495(),
        ))
      }
      pub(super) fn get_014491() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014492(),
          CoreBinaryOperator::GreaterThan(None),
          get_014493(),
        ))
      }
      pub(super) fn get_014496() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_014490() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014491(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_014496(),
        ))
      }
      pub(super) fn get_014500() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014501() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_014499() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014500(), get_014501()))
      }
      pub(super) fn get_014502() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_014498() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014499(),
          vec![get_014502()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014506() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014507() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_014505() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014506(), get_014507()))
      }
      pub(super) fn get_014508() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_014504() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014505(),
          vec![get_014508()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014512() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014513() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_014511() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014512(), get_014513()))
      }
      pub(super) fn get_014514() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_014510() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014511(),
          vec![get_014514()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014518() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_014517() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014518()))
      }
      pub(super) fn get_014520() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_014519() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014520()))
      }
      pub(super) fn get_014524() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014525() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_014523() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014524(), get_014525()))
      }
      pub(super) fn get_014526() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_014522() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014523(),
          vec![get_014526()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014530() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_014531() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_014529() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014530(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_014531(),
        ))
      }
      pub(super) fn get_014534() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_014535() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_014533() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014534(),
          CoreBinaryOperator::Minus(None),
          get_014535(),
        ))
      }
      pub(super) fn get_014536() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_014532() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014533(),
          CoreBinaryOperator::Plus(None),
          get_014536(),
        ))
      }
      pub(super) fn get_014539() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_014540() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_014538() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014539(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_014540(),
        ))
      }
      pub(super) fn get_014543() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_014544() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_014542() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014543(),
          CoreBinaryOperator::Minus(None),
          get_014544(),
        ))
      }
      pub(super) fn get_014545() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_014541() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014542(),
          CoreBinaryOperator::Plus(None),
          get_014545(),
        ))
      }
      pub(super) fn get_014547() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_014548() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_014546() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014547(),
          CoreBinaryOperator::Minus(None),
          get_014548(),
        ))
      }
      pub(super) fn get_014537() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014538(), get_014541(), get_014546()))
      }
      pub(super) fn get_014528() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014529(), get_014532(), get_014537()))
      }
      pub(super) fn get_014552() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_014554() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014555() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_014553() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014554(),
          CoreBinaryOperator::And(None),
          get_014555(),
        ))
      }
      pub(super) fn get_014551() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014552(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_014553(),
        ))
      }
      pub(super) fn get_014556() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_014550() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014551(),
          CoreBinaryOperator::LessThan(None),
          get_014556(),
        ))
      }
      pub(super) fn get_014558() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_014560() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_014561() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_014559() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014560(),
          CoreBinaryOperator::Plus(None),
          get_014561(),
        ))
      }
      pub(super) fn get_014557() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014558(),
          CoreBinaryOperator::Mult(None),
          get_014559(),
        ))
      }
      pub(super) fn get_014565() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014566() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_014564() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014565(), get_014566()))
      }
      pub(super) fn get_014567() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_014569() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_014570() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_014568() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014569(), get_014570()]))
      }
      pub(super) fn get_014563() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014564(),
          vec![get_014567(), get_014568()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014562() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014563()))
      }
      pub(super) fn get_014549() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014550(), get_014557(), get_014562()))
      }
      pub(super) fn get_014527() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_014528(),
          )],
          get_014549(),
        ))
      }
      pub(super) fn get_014521() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_014522(),
          )],
          get_014527(),
        ))
      }
      pub(super) fn get_014516() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_014517(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_014519(),
            ),
          ],
          get_014521(),
        ))
      }
      pub(super) fn get_014573() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014574() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_014572() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014573(), get_014574()))
      }
      pub(super) fn get_014575() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_014578() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014579() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_014577() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014578(), get_014579()))
      }
      pub(super) fn get_014580() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_014576() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014577(),
          vec![get_014580()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014581() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014571() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014572(),
          vec![get_014575(), get_014576(), get_014581()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014515() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_014516(),
          )],
          get_014571(),
        ))
      }
      pub(super) fn get_014509() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_014510(),
          )],
          get_014515(),
        ))
      }
      pub(super) fn get_014503() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_014504(),
          )],
          get_014509(),
        ))
      }
      pub(super) fn get_014497() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_014498(),
          )],
          get_014503(),
        ))
      }
      pub(super) fn get_014585() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014586() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_014584() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014585(), get_014586()))
      }
      pub(super) fn get_014587() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_014588() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_014583() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014584(),
          vec![get_014587(), get_014588()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014582() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014583()))
      }
      pub(super) fn get_014489() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014490(), get_014497(), get_014582()))
      }
      pub(super) fn get_014484() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_014485(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_014487(),
            ),
          ],
          get_014489(),
        ))
      }
      pub(super) fn get_014589() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_014593() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_014594() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014592() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014593(), get_014594()))
      }
      pub(super) fn get_014596() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_014597() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_014595() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014596(), get_014597()))
      }
      pub(super) fn get_014591() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_014592(),
          )],
          get_014595(),
        ))
      }
      pub(super) fn get_014600() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_014601() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014599() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014600(), get_014601()))
      }
      pub(super) fn get_014602() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_014598() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_014599(),
          )],
          get_014602(),
        ))
      }
      pub(super) fn get_014606() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014607() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_014605() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014606(), get_014607()))
      }
      pub(super) fn get_014608() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014609() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_014604() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014605(),
          vec![get_014608(), get_014609()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014612() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014613() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014611() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014612(), get_014613()))
      }
      pub(super) fn get_014614() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_014617() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014618() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_014616() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014617(), get_014618()))
      }
      pub(super) fn get_014621() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014622() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014620() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014621(), get_014622()))
      }
      pub(super) fn get_014623() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_014619() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014620(),
          vec![get_014623()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014626() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_014625() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014626()))
      }
      pub(super) fn get_014629() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_014630() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_014628() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014629(), get_014630()))
      }
      pub(super) fn get_014633() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_014632() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014633()]))
      }
      pub(super) fn get_014631() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014632()]))
      }
      pub(super) fn get_014627() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_014628(),
          )],
          get_014631(),
        ))
      }
      pub(super) fn get_014624() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_014625(),
          )],
          get_014627(),
        ))
      }
      pub(super) fn get_014615() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014616(),
          vec![get_014619(), get_014624()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014610() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014611(),
          vec![get_014614(), get_014615()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014603() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_014604(),
          )],
          get_014610(),
        ))
      }
      pub(super) fn get_014590() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_014591(),
          get_014598(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_014603(),
        ))
      }
      pub(super) fn get_014636() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'value' not bound"))
      }
      pub(super) fn get_014635() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014636()))
      }
      pub(super) fn get_014637() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_014638() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_014643() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014644() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_014642() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014643(), get_014644()))
      }
      pub(super) fn get_014645() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 424u32)
        }))
      }
      pub(super) fn get_014641() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014642(),
          vec![get_014645()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014640() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_014641(),
        ))
      }
      pub(super) fn get_014648() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "manifestYamlStream only takes arrays, got ",
        ))
      }
      pub(super) fn get_014651() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014652() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_014650() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014651(), get_014652()))
      }
      pub(super) fn get_014653() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 424u32)
        }))
      }
      pub(super) fn get_014649() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014650(),
          vec![get_014653()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014647() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014648(),
          CoreBinaryOperator::Plus(None),
          get_014649(),
        ))
      }
      pub(super) fn get_014646() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014647()))
      }
      pub(super) fn get_014656() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("---\n"))
      }
      pub(super) fn get_014659() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014660() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014658() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014659(), get_014660()))
      }
      pub(super) fn get_014661() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n---\n"))
      }
      pub(super) fn get_014663() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 424u32)
        }))
      }
      pub(super) fn get_014666() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014667() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014665() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014666(), get_014667()))
      }
      pub(super) fn get_014668() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_014671() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014672() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_014670() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014671(), get_014672()))
      }
      pub(super) fn get_014675() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014676() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014674() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014675(), get_014676()))
      }
      pub(super) fn get_014677() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 428u32)
        }))
      }
      pub(super) fn get_014673() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014674(),
          vec![get_014677()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014680() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_014679() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014680()))
      }
      pub(super) fn get_014683() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 428u32)
        }))
      }
      pub(super) fn get_014684() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 429u32)
        }))
      }
      pub(super) fn get_014682() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014683(), get_014684()))
      }
      pub(super) fn get_014688() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014689() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestYamlDoc"))
      }
      pub(super) fn get_014687() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014688(), get_014689()))
      }
      pub(super) fn get_014690() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("e", 427u32)
        }))
      }
      pub(super) fn get_014691() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("indent_array_in_object", 425u32)
        }))
      }
      pub(super) fn get_014686() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014687(),
          vec![get_014690(), get_014691()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014685() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014686()]))
      }
      pub(super) fn get_014681() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("e", 427u32) },
            get_014682(),
          )],
          get_014685(),
        ))
      }
      pub(super) fn get_014678() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 429u32) },
            get_014679(),
          )],
          get_014681(),
        ))
      }
      pub(super) fn get_014669() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014670(),
          vec![get_014673(), get_014678()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014664() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014665(),
          vec![get_014668(), get_014669()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014662() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 428u32) },
            get_014663(),
          )],
          get_014664(),
        ))
      }
      pub(super) fn get_014657() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014658(),
          vec![get_014661(), get_014662()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014655() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014656(),
          CoreBinaryOperator::Plus(None),
          get_014657(),
        ))
      }
      pub(super) fn get_014693() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c_document_end", 426u32)
        }))
      }
      pub(super) fn get_014694() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n...\n"))
      }
      pub(super) fn get_014695() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_014692() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014693(), get_014694(), get_014695()))
      }
      pub(super) fn get_014654() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014655(),
          CoreBinaryOperator::Plus(None),
          get_014692(),
        ))
      }
      pub(super) fn get_014639() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014640(), get_014646(), get_014654()))
      }
      pub(super) fn get_014634() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("value", 424u32) },
              get_014635(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("indent_array_in_object", 425u32) },
              get_014637(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("c_document_end", 426u32) },
              get_014638(),
            ),
          ],
          get_014639(),
        ))
      }
      pub(super) fn get_014477() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_014478()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_014479(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_014480(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_014484(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_014589(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_014590(),
            ),
          ],
          get_014634(),
        ))
      }
      pub(super) fn get_014696() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestPython"))
      }
      pub(super) fn get_014698() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_014699() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_014702() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_014701() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014702()))
      }
      pub(super) fn get_014703() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_014700() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_014701(),
          )],
          get_014703(),
        ))
      }
      pub(super) fn get_014706() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_014705() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014706()))
      }
      pub(super) fn get_014708() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_014707() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014708()))
      }
      pub(super) fn get_014712() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_014714() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014715() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_014713() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014714(),
          CoreBinaryOperator::And(None),
          get_014715(),
        ))
      }
      pub(super) fn get_014711() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014712(),
          CoreBinaryOperator::GreaterThan(None),
          get_014713(),
        ))
      }
      pub(super) fn get_014716() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_014710() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014711(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_014716(),
        ))
      }
      pub(super) fn get_014720() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014721() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_014719() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014720(), get_014721()))
      }
      pub(super) fn get_014722() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_014718() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014719(),
          vec![get_014722()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014726() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014727() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_014725() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014726(), get_014727()))
      }
      pub(super) fn get_014728() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_014724() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014725(),
          vec![get_014728()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014732() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014733() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_014731() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014732(), get_014733()))
      }
      pub(super) fn get_014734() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_014730() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014731(),
          vec![get_014734()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014738() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_014737() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014738()))
      }
      pub(super) fn get_014740() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_014739() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014740()))
      }
      pub(super) fn get_014744() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014745() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_014743() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014744(), get_014745()))
      }
      pub(super) fn get_014746() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_014742() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014743(),
          vec![get_014746()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014750() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_014751() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_014749() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014750(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_014751(),
        ))
      }
      pub(super) fn get_014754() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_014755() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_014753() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014754(),
          CoreBinaryOperator::Minus(None),
          get_014755(),
        ))
      }
      pub(super) fn get_014756() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_014752() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014753(),
          CoreBinaryOperator::Plus(None),
          get_014756(),
        ))
      }
      pub(super) fn get_014759() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_014760() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_014758() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014759(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_014760(),
        ))
      }
      pub(super) fn get_014763() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_014764() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_014762() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014763(),
          CoreBinaryOperator::Minus(None),
          get_014764(),
        ))
      }
      pub(super) fn get_014765() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_014761() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014762(),
          CoreBinaryOperator::Plus(None),
          get_014765(),
        ))
      }
      pub(super) fn get_014767() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_014768() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_014766() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014767(),
          CoreBinaryOperator::Minus(None),
          get_014768(),
        ))
      }
      pub(super) fn get_014757() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014758(), get_014761(), get_014766()))
      }
      pub(super) fn get_014748() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014749(), get_014752(), get_014757()))
      }
      pub(super) fn get_014772() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_014774() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014775() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_014773() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014774(),
          CoreBinaryOperator::And(None),
          get_014775(),
        ))
      }
      pub(super) fn get_014771() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014772(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_014773(),
        ))
      }
      pub(super) fn get_014776() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_014770() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014771(),
          CoreBinaryOperator::LessThan(None),
          get_014776(),
        ))
      }
      pub(super) fn get_014778() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_014780() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_014781() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_014779() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014780(),
          CoreBinaryOperator::Plus(None),
          get_014781(),
        ))
      }
      pub(super) fn get_014777() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_014778(),
          CoreBinaryOperator::Mult(None),
          get_014779(),
        ))
      }
      pub(super) fn get_014785() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014786() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_014784() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014785(), get_014786()))
      }
      pub(super) fn get_014787() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_014789() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_014790() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_014788() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014789(), get_014790()]))
      }
      pub(super) fn get_014783() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014784(),
          vec![get_014787(), get_014788()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014782() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014783()))
      }
      pub(super) fn get_014769() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014770(), get_014777(), get_014782()))
      }
      pub(super) fn get_014747() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_014748(),
          )],
          get_014769(),
        ))
      }
      pub(super) fn get_014741() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_014742(),
          )],
          get_014747(),
        ))
      }
      pub(super) fn get_014736() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_014737(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_014739(),
            ),
          ],
          get_014741(),
        ))
      }
      pub(super) fn get_014793() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014794() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_014792() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014793(), get_014794()))
      }
      pub(super) fn get_014795() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_014798() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014799() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_014797() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014798(), get_014799()))
      }
      pub(super) fn get_014800() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_014796() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014797(),
          vec![get_014800()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014801() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014791() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014792(),
          vec![get_014795(), get_014796(), get_014801()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014735() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_014736(),
          )],
          get_014791(),
        ))
      }
      pub(super) fn get_014729() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_014730(),
          )],
          get_014735(),
        ))
      }
      pub(super) fn get_014723() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_014724(),
          )],
          get_014729(),
        ))
      }
      pub(super) fn get_014717() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_014718(),
          )],
          get_014723(),
        ))
      }
      pub(super) fn get_014805() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014806() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_014804() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014805(), get_014806()))
      }
      pub(super) fn get_014807() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_014808() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_014803() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014804(),
          vec![get_014807(), get_014808()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014802() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014803()))
      }
      pub(super) fn get_014709() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014710(), get_014717(), get_014802()))
      }
      pub(super) fn get_014704() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_014705(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_014707(),
            ),
          ],
          get_014709(),
        ))
      }
      pub(super) fn get_014809() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_014813() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_014814() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014812() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014813(), get_014814()))
      }
      pub(super) fn get_014816() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_014817() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_014815() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014816(), get_014817()))
      }
      pub(super) fn get_014811() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_014812(),
          )],
          get_014815(),
        ))
      }
      pub(super) fn get_014820() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_014821() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014819() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014820(), get_014821()))
      }
      pub(super) fn get_014822() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_014818() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_014819(),
          )],
          get_014822(),
        ))
      }
      pub(super) fn get_014826() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014827() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_014825() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014826(), get_014827()))
      }
      pub(super) fn get_014828() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_014829() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_014824() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014825(),
          vec![get_014828(), get_014829()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014832() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014833() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014831() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014832(), get_014833()))
      }
      pub(super) fn get_014834() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_014837() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014838() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_014836() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014837(), get_014838()))
      }
      pub(super) fn get_014841() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014842() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014840() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014841(), get_014842()))
      }
      pub(super) fn get_014843() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_014839() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014840(),
          vec![get_014843()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014846() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_014845() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014846()))
      }
      pub(super) fn get_014849() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_014850() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_014848() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014849(), get_014850()))
      }
      pub(super) fn get_014853() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_014852() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014853()]))
      }
      pub(super) fn get_014851() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014852()]))
      }
      pub(super) fn get_014847() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_014848(),
          )],
          get_014851(),
        ))
      }
      pub(super) fn get_014844() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_014845(),
          )],
          get_014847(),
        ))
      }
      pub(super) fn get_014835() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014836(),
          vec![get_014839(), get_014844()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014830() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014831(),
          vec![get_014834(), get_014835()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014823() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_014824(),
          )],
          get_014830(),
        ))
      }
      pub(super) fn get_014810() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_014811(),
          get_014818(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_014823(),
        ))
      }
      pub(super) fn get_014856() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_014855() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014856()))
      }
      pub(super) fn get_014860() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014861() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_014859() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014860(), get_014861()))
      }
      pub(super) fn get_014862() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_014858() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014859(),
          vec![get_014862()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014867() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014868() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_014866() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014867(), get_014868()))
      }
      pub(super) fn get_014869() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_014865() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014866(),
          vec![get_014869()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014872() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014873() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014871() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014872(), get_014873()))
      }
      pub(super) fn get_014874() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_014877() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014878() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_014876() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014877(), get_014878()))
      }
      pub(super) fn get_014881() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014882() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014880() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014881(), get_014882()))
      }
      pub(super) fn get_014883() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 433u32)
        }))
      }
      pub(super) fn get_014879() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014880(),
          vec![get_014883()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014886() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_014885() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014886()))
      }
      pub(super) fn get_014889() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 433u32)
        }))
      }
      pub(super) fn get_014890() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 434u32)
        }))
      }
      pub(super) fn get_014888() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014889(), get_014890()))
      }
      pub(super) fn get_014894() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014895() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_014893() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014894(), get_014895()))
      }
      pub(super) fn get_014896() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s: %s"))
      }
      pub(super) fn get_014900() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014901() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("escapeStringPython"))
      }
      pub(super) fn get_014899() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014900(), get_014901()))
      }
      pub(super) fn get_014902() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 432u32)
        }))
      }
      pub(super) fn get_014898() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014899(),
          vec![get_014902()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014905() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014906() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestPython"))
      }
      pub(super) fn get_014904() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014905(), get_014906()))
      }
      pub(super) fn get_014908() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_014909() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 432u32)
        }))
      }
      pub(super) fn get_014907() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014908(), get_014909()))
      }
      pub(super) fn get_014903() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014904(),
          vec![get_014907()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014897() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014898(), get_014903()]))
      }
      pub(super) fn get_014892() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014893(),
          vec![get_014896(), get_014897()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014891() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014892()]))
      }
      pub(super) fn get_014887() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 432u32) },
            get_014888(),
          )],
          get_014891(),
        ))
      }
      pub(super) fn get_014884() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 434u32) },
            get_014885(),
          )],
          get_014887(),
        ))
      }
      pub(super) fn get_014875() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014876(),
          vec![get_014879(), get_014884()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014870() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014871(),
          vec![get_014874(), get_014875()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014864() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 433u32) },
            get_014865(),
          )],
          get_014870(),
        ))
      }
      pub(super) fn get_014912() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014913() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_014911() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014912(), get_014913()))
      }
      pub(super) fn get_014914() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("{%s}"))
      }
      pub(super) fn get_014918() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014919() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014917() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014918(), get_014919()))
      }
      pub(super) fn get_014920() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(", "))
      }
      pub(super) fn get_014921() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fields", 431u32)
        }))
      }
      pub(super) fn get_014916() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014917(),
          vec![get_014920(), get_014921()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014915() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014916()]))
      }
      pub(super) fn get_014910() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014911(),
          vec![get_014914(), get_014915()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014863() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("fields", 431u32) },
            get_014864(),
          )],
          get_014910(),
        ))
      }
      pub(super) fn get_014925() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014926() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_014924() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014925(), get_014926()))
      }
      pub(super) fn get_014927() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_014923() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014924(),
          vec![get_014927()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014930() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014931() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_014929() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014930(), get_014931()))
      }
      pub(super) fn get_014932() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("[%s]"))
      }
      pub(super) fn get_014936() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014937() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014935() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014936(), get_014937()))
      }
      pub(super) fn get_014938() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(", "))
      }
      pub(super) fn get_014940() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_014943() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014944() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_014942() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014943(), get_014944()))
      }
      pub(super) fn get_014945() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_014948() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014949() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_014947() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014948(), get_014949()))
      }
      pub(super) fn get_014952() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014953() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_014951() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014952(), get_014953()))
      }
      pub(super) fn get_014954() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 436u32)
        }))
      }
      pub(super) fn get_014950() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014951(),
          vec![get_014954()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014957() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_014956() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014957()))
      }
      pub(super) fn get_014960() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 436u32)
        }))
      }
      pub(super) fn get_014961() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 437u32)
        }))
      }
      pub(super) fn get_014959() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014960(), get_014961()))
      }
      pub(super) fn get_014965() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014966() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestPython"))
      }
      pub(super) fn get_014964() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014965(), get_014966()))
      }
      pub(super) fn get_014967() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v2", 435u32)
        }))
      }
      pub(super) fn get_014963() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014964(),
          vec![get_014967()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014962() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014963()]))
      }
      pub(super) fn get_014958() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("v2", 435u32) },
            get_014959(),
          )],
          get_014962(),
        ))
      }
      pub(super) fn get_014955() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 437u32) },
            get_014956(),
          )],
          get_014958(),
        ))
      }
      pub(super) fn get_014946() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014947(),
          vec![get_014950(), get_014955()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014941() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014942(),
          vec![get_014945(), get_014946()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014939() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 436u32) },
            get_014940(),
          )],
          get_014941(),
        ))
      }
      pub(super) fn get_014934() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014935(),
          vec![get_014938(), get_014939()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014933() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014934()]))
      }
      pub(super) fn get_014928() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014929(),
          vec![get_014932(), get_014933()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014971() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014972() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_014970() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014971(), get_014972()))
      }
      pub(super) fn get_014973() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_014969() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014970(),
          vec![get_014973()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014976() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014977() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_014975() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014976(), get_014977()))
      }
      pub(super) fn get_014978() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s"))
      }
      pub(super) fn get_014982() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014983() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("escapeStringPython"))
      }
      pub(super) fn get_014981() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014982(), get_014983()))
      }
      pub(super) fn get_014984() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_014980() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014981(),
          vec![get_014984()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014979() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_014980()]))
      }
      pub(super) fn get_014974() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014975(),
          vec![get_014978(), get_014979()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014988() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014989() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isFunction"))
      }
      pub(super) fn get_014987() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014988(), get_014989()))
      }
      pub(super) fn get_014990() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_014986() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014987(),
          vec![get_014990()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_014992() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("cannot manifest function"))
      }
      pub(super) fn get_014991() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_014992()))
      }
      pub(super) fn get_014996() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_014997() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isNumber"))
      }
      pub(super) fn get_014995() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_014996(), get_014997()))
      }
      pub(super) fn get_014998() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_014994() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_014995(),
          vec![get_014998()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015001() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015002() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("toString"))
      }
      pub(super) fn get_015000() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015001(), get_015002()))
      }
      pub(super) fn get_015003() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_014999() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015000(),
          vec![get_015003()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015007() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015008() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_015006() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015007(), get_015008()))
      }
      pub(super) fn get_015009() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_015010() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_015005() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015006(),
          vec![get_015009(), get_015010()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015011() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("True"))
      }
      pub(super) fn get_015015() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015016() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_015014() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015015(), get_015016()))
      }
      pub(super) fn get_015017() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_015018() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_015013() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015014(),
          vec![get_015017(), get_015018()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015019() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("False"))
      }
      pub(super) fn get_015023() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015024() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_015022() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015023(), get_015024()))
      }
      pub(super) fn get_015025() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 430u32)
        }))
      }
      pub(super) fn get_015026() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_015021() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015022(),
          vec![get_015025(), get_015026()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015027() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("None"))
      }
      pub(super) fn get_015028() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_015020() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015021(), get_015027(), get_015028()))
      }
      pub(super) fn get_015012() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015013(), get_015019(), get_015020()))
      }
      pub(super) fn get_015004() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015005(), get_015011(), get_015012()))
      }
      pub(super) fn get_014993() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014994(), get_014999(), get_015004()))
      }
      pub(super) fn get_014985() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014986(), get_014991(), get_014993()))
      }
      pub(super) fn get_014968() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014969(), get_014974(), get_014985()))
      }
      pub(super) fn get_014922() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014923(), get_014928(), get_014968()))
      }
      pub(super) fn get_014857() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_014858(), get_014863(), get_014922()))
      }
      pub(super) fn get_014854() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("v", 430u32) },
            get_014855(),
          )],
          get_014857(),
        ))
      }
      pub(super) fn get_014697() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_014698()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_014699(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_014700(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_014704(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_014809(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_014810(),
            ),
          ],
          get_014854(),
        ))
      }
      pub(super) fn get_015029() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestPythonVars"))
      }
      pub(super) fn get_015031() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_015032() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_015035() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_015034() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015035()))
      }
      pub(super) fn get_015036() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_015033() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_015034(),
          )],
          get_015036(),
        ))
      }
      pub(super) fn get_015039() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_015038() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015039()))
      }
      pub(super) fn get_015041() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_015040() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015041()))
      }
      pub(super) fn get_015045() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015047() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015048() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015046() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015047(),
          CoreBinaryOperator::And(None),
          get_015048(),
        ))
      }
      pub(super) fn get_015044() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015045(),
          CoreBinaryOperator::GreaterThan(None),
          get_015046(),
        ))
      }
      pub(super) fn get_015049() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_015043() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015044(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_015049(),
        ))
      }
      pub(super) fn get_015053() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015054() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015052() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015053(), get_015054()))
      }
      pub(super) fn get_015055() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_015051() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015052(),
          vec![get_015055()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015059() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015060() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015058() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015059(), get_015060()))
      }
      pub(super) fn get_015061() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_015057() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015058(),
          vec![get_015061()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015065() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015066() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015064() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015065(), get_015066()))
      }
      pub(super) fn get_015067() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_015063() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015064(),
          vec![get_015067()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015071() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_015070() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015071()))
      }
      pub(super) fn get_015073() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_015072() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015073()))
      }
      pub(super) fn get_015077() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015078() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015076() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015077(), get_015078()))
      }
      pub(super) fn get_015079() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_015075() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015076(),
          vec![get_015079()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015083() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015084() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_015082() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015083(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_015084(),
        ))
      }
      pub(super) fn get_015087() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015088() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_015086() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015087(),
          CoreBinaryOperator::Minus(None),
          get_015088(),
        ))
      }
      pub(super) fn get_015089() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_015085() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015086(),
          CoreBinaryOperator::Plus(None),
          get_015089(),
        ))
      }
      pub(super) fn get_015092() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015093() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_015091() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015092(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_015093(),
        ))
      }
      pub(super) fn get_015096() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015097() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_015095() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015096(),
          CoreBinaryOperator::Minus(None),
          get_015097(),
        ))
      }
      pub(super) fn get_015098() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_015094() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015095(),
          CoreBinaryOperator::Plus(None),
          get_015098(),
        ))
      }
      pub(super) fn get_015100() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015101() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_015099() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015100(),
          CoreBinaryOperator::Minus(None),
          get_015101(),
        ))
      }
      pub(super) fn get_015090() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015091(), get_015094(), get_015099()))
      }
      pub(super) fn get_015081() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015082(), get_015085(), get_015090()))
      }
      pub(super) fn get_015105() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_015107() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015108() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_015106() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015107(),
          CoreBinaryOperator::And(None),
          get_015108(),
        ))
      }
      pub(super) fn get_015104() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015105(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_015106(),
        ))
      }
      pub(super) fn get_015109() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015103() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015104(),
          CoreBinaryOperator::LessThan(None),
          get_015109(),
        ))
      }
      pub(super) fn get_015111() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015113() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_015114() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_015112() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015113(),
          CoreBinaryOperator::Plus(None),
          get_015114(),
        ))
      }
      pub(super) fn get_015110() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015111(),
          CoreBinaryOperator::Mult(None),
          get_015112(),
        ))
      }
      pub(super) fn get_015118() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015119() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_015117() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015118(), get_015119()))
      }
      pub(super) fn get_015120() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_015122() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_015123() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015121() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015122(), get_015123()]))
      }
      pub(super) fn get_015116() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015117(),
          vec![get_015120(), get_015121()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015115() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015116()))
      }
      pub(super) fn get_015102() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015103(), get_015110(), get_015115()))
      }
      pub(super) fn get_015080() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_015081(),
          )],
          get_015102(),
        ))
      }
      pub(super) fn get_015074() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_015075(),
          )],
          get_015080(),
        ))
      }
      pub(super) fn get_015069() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_015070(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_015072(),
            ),
          ],
          get_015074(),
        ))
      }
      pub(super) fn get_015126() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015127() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_015125() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015126(), get_015127()))
      }
      pub(super) fn get_015128() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_015131() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015132() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_015130() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015131(), get_015132()))
      }
      pub(super) fn get_015133() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_015129() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015130(),
          vec![get_015133()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015134() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015124() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015125(),
          vec![get_015128(), get_015129(), get_015134()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015068() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_015069(),
          )],
          get_015124(),
        ))
      }
      pub(super) fn get_015062() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_015063(),
          )],
          get_015068(),
        ))
      }
      pub(super) fn get_015056() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_015057(),
          )],
          get_015062(),
        ))
      }
      pub(super) fn get_015050() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_015051(),
          )],
          get_015056(),
        ))
      }
      pub(super) fn get_015138() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015139() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_015137() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015138(), get_015139()))
      }
      pub(super) fn get_015140() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_015141() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015136() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015137(),
          vec![get_015140(), get_015141()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015135() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015136()))
      }
      pub(super) fn get_015042() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015043(), get_015050(), get_015135()))
      }
      pub(super) fn get_015037() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_015038(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_015040(),
            ),
          ],
          get_015042(),
        ))
      }
      pub(super) fn get_015142() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_015146() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_015147() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015145() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015146(), get_015147()))
      }
      pub(super) fn get_015149() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_015150() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_015148() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015149(), get_015150()))
      }
      pub(super) fn get_015144() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_015145(),
          )],
          get_015148(),
        ))
      }
      pub(super) fn get_015153() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_015154() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015152() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015153(), get_015154()))
      }
      pub(super) fn get_015155() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_015151() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_015152(),
          )],
          get_015155(),
        ))
      }
      pub(super) fn get_015159() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015160() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_015158() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015159(), get_015160()))
      }
      pub(super) fn get_015161() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015162() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_015157() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015158(),
          vec![get_015161(), get_015162()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015165() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015166() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_015164() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015165(), get_015166()))
      }
      pub(super) fn get_015167() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_015170() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015171() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_015169() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015170(), get_015171()))
      }
      pub(super) fn get_015174() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015175() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_015173() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015174(), get_015175()))
      }
      pub(super) fn get_015176() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_015172() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015173(),
          vec![get_015176()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015179() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_015178() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015179()))
      }
      pub(super) fn get_015182() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_015183() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_015181() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015182(), get_015183()))
      }
      pub(super) fn get_015186() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_015185() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015186()]))
      }
      pub(super) fn get_015184() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015185()]))
      }
      pub(super) fn get_015180() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_015181(),
          )],
          get_015184(),
        ))
      }
      pub(super) fn get_015177() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_015178(),
          )],
          get_015180(),
        ))
      }
      pub(super) fn get_015168() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015169(),
          vec![get_015172(), get_015177()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015163() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015164(),
          vec![get_015167(), get_015168()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015156() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_015157(),
          )],
          get_015163(),
        ))
      }
      pub(super) fn get_015143() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_015144(),
          get_015151(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_015156(),
        ))
      }
      pub(super) fn get_015189() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'conf' not bound"))
      }
      pub(super) fn get_015188() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015189()))
      }
      pub(super) fn get_015194() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015195() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_015193() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015194(), get_015195()))
      }
      pub(super) fn get_015196() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("conf", 438u32)
        }))
      }
      pub(super) fn get_015192() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015193(),
          vec![get_015196()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015199() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015200() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_015198() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015199(), get_015200()))
      }
      pub(super) fn get_015201() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_015204() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015205() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_015203() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015204(), get_015205()))
      }
      pub(super) fn get_015208() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015209() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_015207() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015208(), get_015209()))
      }
      pub(super) fn get_015210() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 441u32)
        }))
      }
      pub(super) fn get_015206() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015207(),
          vec![get_015210()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015213() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_015212() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015213()))
      }
      pub(super) fn get_015216() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 441u32)
        }))
      }
      pub(super) fn get_015217() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 442u32)
        }))
      }
      pub(super) fn get_015215() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015216(), get_015217()))
      }
      pub(super) fn get_015221() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015222() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_015220() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015221(), get_015222()))
      }
      pub(super) fn get_015223() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s = %s"))
      }
      pub(super) fn get_015225() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 440u32)
        }))
      }
      pub(super) fn get_015228() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015229() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestPython"))
      }
      pub(super) fn get_015227() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015228(), get_015229()))
      }
      pub(super) fn get_015231() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("conf", 438u32)
        }))
      }
      pub(super) fn get_015232() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 440u32)
        }))
      }
      pub(super) fn get_015230() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015231(), get_015232()))
      }
      pub(super) fn get_015226() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015227(),
          vec![get_015230()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015224() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015225(), get_015226()]))
      }
      pub(super) fn get_015219() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015220(),
          vec![get_015223(), get_015224()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015218() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015219()]))
      }
      pub(super) fn get_015214() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 440u32) },
            get_015215(),
          )],
          get_015218(),
        ))
      }
      pub(super) fn get_015211() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 442u32) },
            get_015212(),
          )],
          get_015214(),
        ))
      }
      pub(super) fn get_015202() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015203(),
          vec![get_015206(), get_015211()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015197() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015198(),
          vec![get_015201(), get_015202()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015191() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 441u32) },
            get_015192(),
          )],
          get_015197(),
        ))
      }
      pub(super) fn get_015235() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015236() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_015234() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015235(), get_015236()))
      }
      pub(super) fn get_015237() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("\n"))
      }
      pub(super) fn get_015239() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("vars", 439u32)
        }))
      }
      pub(super) fn get_015241() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_015240() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015241()]))
      }
      pub(super) fn get_015238() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015239(),
          CoreBinaryOperator::Plus(None),
          get_015240(),
        ))
      }
      pub(super) fn get_015233() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015234(),
          vec![get_015237(), get_015238()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015190() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("vars", 439u32) },
            get_015191(),
          )],
          get_015233(),
        ))
      }
      pub(super) fn get_015187() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("conf", 438u32) },
            get_015188(),
          )],
          get_015190(),
        ))
      }
      pub(super) fn get_015030() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_015031()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_015032(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_015033(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_015037(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_015142(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_015143(),
            ),
          ],
          get_015187(),
        ))
      }
      pub(super) fn get_015242() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("manifestXmlJsonml"))
      }
      pub(super) fn get_015244() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_015245() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_015248() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_015247() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015248()))
      }
      pub(super) fn get_015249() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_015246() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_015247(),
          )],
          get_015249(),
        ))
      }
      pub(super) fn get_015252() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_015251() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015252()))
      }
      pub(super) fn get_015254() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_015253() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015254()))
      }
      pub(super) fn get_015258() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015260() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015261() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015259() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015260(),
          CoreBinaryOperator::And(None),
          get_015261(),
        ))
      }
      pub(super) fn get_015257() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015258(),
          CoreBinaryOperator::GreaterThan(None),
          get_015259(),
        ))
      }
      pub(super) fn get_015262() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_015256() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015257(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_015262(),
        ))
      }
      pub(super) fn get_015266() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015267() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015265() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015266(), get_015267()))
      }
      pub(super) fn get_015268() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_015264() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015265(),
          vec![get_015268()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015272() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015273() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015271() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015272(), get_015273()))
      }
      pub(super) fn get_015274() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_015270() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015271(),
          vec![get_015274()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015278() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015279() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015277() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015278(), get_015279()))
      }
      pub(super) fn get_015280() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_015276() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015277(),
          vec![get_015280()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015284() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_015283() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015284()))
      }
      pub(super) fn get_015286() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_015285() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015286()))
      }
      pub(super) fn get_015290() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015291() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015289() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015290(), get_015291()))
      }
      pub(super) fn get_015292() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_015288() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015289(),
          vec![get_015292()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015296() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015297() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_015295() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015296(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_015297(),
        ))
      }
      pub(super) fn get_015300() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015301() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_015299() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015300(),
          CoreBinaryOperator::Minus(None),
          get_015301(),
        ))
      }
      pub(super) fn get_015302() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_015298() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015299(),
          CoreBinaryOperator::Plus(None),
          get_015302(),
        ))
      }
      pub(super) fn get_015305() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015306() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_015304() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015305(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_015306(),
        ))
      }
      pub(super) fn get_015309() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015310() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_015308() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015309(),
          CoreBinaryOperator::Minus(None),
          get_015310(),
        ))
      }
      pub(super) fn get_015311() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_015307() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015308(),
          CoreBinaryOperator::Plus(None),
          get_015311(),
        ))
      }
      pub(super) fn get_015313() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015314() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_015312() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015313(),
          CoreBinaryOperator::Minus(None),
          get_015314(),
        ))
      }
      pub(super) fn get_015303() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015304(), get_015307(), get_015312()))
      }
      pub(super) fn get_015294() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015295(), get_015298(), get_015303()))
      }
      pub(super) fn get_015318() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_015320() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015321() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_015319() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015320(),
          CoreBinaryOperator::And(None),
          get_015321(),
        ))
      }
      pub(super) fn get_015317() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015318(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_015319(),
        ))
      }
      pub(super) fn get_015322() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015316() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015317(),
          CoreBinaryOperator::LessThan(None),
          get_015322(),
        ))
      }
      pub(super) fn get_015324() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015326() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_015327() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_015325() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015326(),
          CoreBinaryOperator::Plus(None),
          get_015327(),
        ))
      }
      pub(super) fn get_015323() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015324(),
          CoreBinaryOperator::Mult(None),
          get_015325(),
        ))
      }
      pub(super) fn get_015331() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015332() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_015330() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015331(), get_015332()))
      }
      pub(super) fn get_015333() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_015335() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_015336() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015334() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015335(), get_015336()]))
      }
      pub(super) fn get_015329() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015330(),
          vec![get_015333(), get_015334()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015328() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015329()))
      }
      pub(super) fn get_015315() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015316(), get_015323(), get_015328()))
      }
      pub(super) fn get_015293() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_015294(),
          )],
          get_015315(),
        ))
      }
      pub(super) fn get_015287() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_015288(),
          )],
          get_015293(),
        ))
      }
      pub(super) fn get_015282() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_015283(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_015285(),
            ),
          ],
          get_015287(),
        ))
      }
      pub(super) fn get_015339() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015340() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_015338() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015339(), get_015340()))
      }
      pub(super) fn get_015341() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_015344() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015345() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_015343() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015344(), get_015345()))
      }
      pub(super) fn get_015346() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_015342() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015343(),
          vec![get_015346()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015347() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015337() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015338(),
          vec![get_015341(), get_015342(), get_015347()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015281() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_015282(),
          )],
          get_015337(),
        ))
      }
      pub(super) fn get_015275() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_015276(),
          )],
          get_015281(),
        ))
      }
      pub(super) fn get_015269() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_015270(),
          )],
          get_015275(),
        ))
      }
      pub(super) fn get_015263() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_015264(),
          )],
          get_015269(),
        ))
      }
      pub(super) fn get_015351() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015352() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_015350() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015351(), get_015352()))
      }
      pub(super) fn get_015353() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_015354() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015349() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015350(),
          vec![get_015353(), get_015354()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015348() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015349()))
      }
      pub(super) fn get_015255() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015256(), get_015263(), get_015348()))
      }
      pub(super) fn get_015250() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_015251(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_015253(),
            ),
          ],
          get_015255(),
        ))
      }
      pub(super) fn get_015355() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_015359() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_015360() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015358() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015359(), get_015360()))
      }
      pub(super) fn get_015362() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_015363() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_015361() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015362(), get_015363()))
      }
      pub(super) fn get_015357() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_015358(),
          )],
          get_015361(),
        ))
      }
      pub(super) fn get_015366() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_015367() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015365() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015366(), get_015367()))
      }
      pub(super) fn get_015368() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_015364() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_015365(),
          )],
          get_015368(),
        ))
      }
      pub(super) fn get_015372() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015373() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_015371() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015372(), get_015373()))
      }
      pub(super) fn get_015374() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015375() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_015370() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015371(),
          vec![get_015374(), get_015375()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015378() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015379() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_015377() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015378(), get_015379()))
      }
      pub(super) fn get_015380() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_015383() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015384() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_015382() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015383(), get_015384()))
      }
      pub(super) fn get_015387() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015388() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_015386() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015387(), get_015388()))
      }
      pub(super) fn get_015389() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_015385() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015386(),
          vec![get_015389()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015392() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_015391() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015392()))
      }
      pub(super) fn get_015395() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_015396() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_015394() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015395(), get_015396()))
      }
      pub(super) fn get_015399() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_015398() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015399()]))
      }
      pub(super) fn get_015397() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015398()]))
      }
      pub(super) fn get_015393() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_015394(),
          )],
          get_015397(),
        ))
      }
      pub(super) fn get_015390() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_015391(),
          )],
          get_015393(),
        ))
      }
      pub(super) fn get_015381() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015382(),
          vec![get_015385(), get_015390()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015376() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015377(),
          vec![get_015380(), get_015381()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015369() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_015370(),
          )],
          get_015376(),
        ))
      }
      pub(super) fn get_015356() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_015357(),
          get_015364(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_015369(),
        ))
      }
      pub(super) fn get_015402() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'value' not bound"))
      }
      pub(super) fn get_015401() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015402()))
      }
      pub(super) fn get_015407() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015408() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_015406() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015407(), get_015408()))
      }
      pub(super) fn get_015409() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 443u32)
        }))
      }
      pub(super) fn get_015405() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015406(),
          vec![get_015409()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015404() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_015405(),
        ))
      }
      pub(super) fn get_015413() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015414() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_015412() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015413(), get_015414()))
      }
      pub(super) fn get_015415() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Expected a JSONML value (an array), got %s",
        ))
      }
      pub(super) fn get_015418() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015419() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_015417() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015418(), get_015419()))
      }
      pub(super) fn get_015420() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 443u32)
        }))
      }
      pub(super) fn get_015416() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015417(),
          vec![get_015420()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015411() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015412(),
          vec![get_015415(), get_015416()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015410() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015411()))
      }
      pub(super) fn get_015424() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'v' not bound"))
      }
      pub(super) fn get_015423() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015424()))
      }
      pub(super) fn get_015428() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015429() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_015427() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015428(), get_015429()))
      }
      pub(super) fn get_015430() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 445u32)
        }))
      }
      pub(super) fn get_015426() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015427(),
          vec![get_015430()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015431() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 445u32)
        }))
      }
      pub(super) fn get_015434() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 445u32)
        }))
      }
      pub(super) fn get_015435() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015433() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015434(), get_015435()))
      }
      pub(super) fn get_015440() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015441() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_015439() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015440(), get_015441()))
      }
      pub(super) fn get_015442() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 445u32)
        }))
      }
      pub(super) fn get_015438() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015439(),
          vec![get_015442()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015444() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_015447() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015448() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_015446() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015447(), get_015448()))
      }
      pub(super) fn get_015450() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 445u32)
        }))
      }
      pub(super) fn get_015451() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_015449() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015450(), get_015451()))
      }
      pub(super) fn get_015445() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015446(),
          vec![get_015449()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015443() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015444(),
          CoreBinaryOperator::And(None),
          get_015445(),
        ))
      }
      pub(super) fn get_015437() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015438(),
          CoreBinaryOperator::GreaterThan(None),
          get_015443(),
        ))
      }
      pub(super) fn get_015454() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("has_attrs", 447u32)
        }))
      }
      pub(super) fn get_015456() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 445u32)
        }))
      }
      pub(super) fn get_015457() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_015455() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015456(), get_015457()))
      }
      pub(super) fn get_015458() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(vec![], vec![]))
      }
      pub(super) fn get_015453() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015454(), get_015455(), get_015458()))
      }
      pub(super) fn get_015461() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("has_attrs", 447u32)
        }))
      }
      pub(super) fn get_015464() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015465() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_015463() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015464(), get_015465()))
      }
      pub(super) fn get_015466() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 445u32)
        }))
      }
      pub(super) fn get_015467() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_015468() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_015469() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_015462() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015463(),
          vec![get_015466(), get_015467(), get_015468(), get_015469()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015472() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015473() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_015471() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015472(), get_015473()))
      }
      pub(super) fn get_015474() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("v", 445u32)
        }))
      }
      pub(super) fn get_015475() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_015476() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_015477() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_015470() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015471(),
          vec![get_015474(), get_015475(), get_015476(), get_015477()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015460() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015461(), get_015462(), get_015470()))
      }
      pub(super) fn get_015481() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015482() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_015480() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015481(), get_015482()))
      }
      pub(super) fn get_015483() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_015487() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015488() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_015486() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015487(), get_015488()))
      }
      pub(super) fn get_015489() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("attrs", 448u32)
        }))
      }
      pub(super) fn get_015485() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015486(),
          vec![get_015489()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015492() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015493() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_015491() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015492(), get_015493()))
      }
      pub(super) fn get_015494() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_015497() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015498() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_015496() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015497(), get_015498()))
      }
      pub(super) fn get_015501() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015502() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_015500() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015501(), get_015502()))
      }
      pub(super) fn get_015503() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 452u32)
        }))
      }
      pub(super) fn get_015499() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015500(),
          vec![get_015503()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015506() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_015505() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015506()))
      }
      pub(super) fn get_015509() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 452u32)
        }))
      }
      pub(super) fn get_015510() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 453u32)
        }))
      }
      pub(super) fn get_015508() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015509(), get_015510()))
      }
      pub(super) fn get_015514() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015515() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_015513() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015514(), get_015515()))
      }
      pub(super) fn get_015516() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(" %s=\"%s\""))
      }
      pub(super) fn get_015518() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 451u32)
        }))
      }
      pub(super) fn get_015520() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("attrs", 448u32)
        }))
      }
      pub(super) fn get_015521() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 451u32)
        }))
      }
      pub(super) fn get_015519() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015520(), get_015521()))
      }
      pub(super) fn get_015517() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015518(), get_015519()]))
      }
      pub(super) fn get_015512() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015513(),
          vec![get_015516(), get_015517()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015511() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015512()]))
      }
      pub(super) fn get_015507() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 451u32) },
            get_015508(),
          )],
          get_015511(),
        ))
      }
      pub(super) fn get_015504() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 453u32) },
            get_015505(),
          )],
          get_015507(),
        ))
      }
      pub(super) fn get_015495() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015496(),
          vec![get_015499(), get_015504()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015490() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015491(),
          vec![get_015494(), get_015495()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015484() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 452u32) },
            get_015485(),
          )],
          get_015490(),
        ))
      }
      pub(super) fn get_015479() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015480(),
          vec![get_015483(), get_015484()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015524() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015525() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("deepJoin"))
      }
      pub(super) fn get_015523() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015524(), get_015525()))
      }
      pub(super) fn get_015527() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("<"))
      }
      pub(super) fn get_015528() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tag", 446u32)
        }))
      }
      pub(super) fn get_015529() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("attrs_str", 450u32)
        }))
      }
      pub(super) fn get_015530() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(">"))
      }
      pub(super) fn get_015532() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("children", 449u32)
        }))
      }
      pub(super) fn get_015535() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015536() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_015534() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015535(), get_015536()))
      }
      pub(super) fn get_015537() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_015540() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015541() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_015539() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015540(), get_015541()))
      }
      pub(super) fn get_015544() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015545() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_015543() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015544(), get_015545()))
      }
      pub(super) fn get_015546() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 455u32)
        }))
      }
      pub(super) fn get_015542() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015543(),
          vec![get_015546()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015549() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_015548() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015549()))
      }
      pub(super) fn get_015552() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 455u32)
        }))
      }
      pub(super) fn get_015553() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 456u32)
        }))
      }
      pub(super) fn get_015551() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015552(), get_015553()))
      }
      pub(super) fn get_015556() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 444u32)
        }))
      }
      pub(super) fn get_015557() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 454u32)
        }))
      }
      pub(super) fn get_015555() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015556(),
          vec![get_015557()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015554() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015555()]))
      }
      pub(super) fn get_015550() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("x", 454u32) },
            get_015551(),
          )],
          get_015554(),
        ))
      }
      pub(super) fn get_015547() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 456u32) },
            get_015548(),
          )],
          get_015550(),
        ))
      }
      pub(super) fn get_015538() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015539(),
          vec![get_015542(), get_015547()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015533() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015534(),
          vec![get_015537(), get_015538()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015531() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 455u32) },
            get_015532(),
          )],
          get_015533(),
        ))
      }
      pub(super) fn get_015558() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("</"))
      }
      pub(super) fn get_015559() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tag", 446u32)
        }))
      }
      pub(super) fn get_015560() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(">"))
      }
      pub(super) fn get_015526() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![
          get_015527(),
          get_015528(),
          get_015529(),
          get_015530(),
          get_015531(),
          get_015558(),
          get_015559(),
          get_015560(),
        ]))
      }
      pub(super) fn get_015522() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015523(),
          vec![get_015526()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015478() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("attrs_str", 450u32) },
            get_015479(),
          )],
          get_015522(),
        ))
      }
      pub(super) fn get_015459() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("children", 449u32) },
            get_015460(),
          )],
          get_015478(),
        ))
      }
      pub(super) fn get_015452() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("attrs", 448u32) },
            get_015453(),
          )],
          get_015459(),
        ))
      }
      pub(super) fn get_015436() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("has_attrs", 447u32) },
            get_015437(),
          )],
          get_015452(),
        ))
      }
      pub(super) fn get_015432() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("tag", 446u32) },
            get_015433(),
          )],
          get_015436(),
        ))
      }
      pub(super) fn get_015425() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015426(), get_015431(), get_015432()))
      }
      pub(super) fn get_015422() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("v", 445u32) },
            get_015423(),
          )],
          get_015425(),
        ))
      }
      pub(super) fn get_015562() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 444u32)
        }))
      }
      pub(super) fn get_015563() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 443u32)
        }))
      }
      pub(super) fn get_015561() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015562(),
          vec![get_015563()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015421() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 444u32) },
            get_015422(),
          )],
          get_015561(),
        ))
      }
      pub(super) fn get_015403() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015404(), get_015410(), get_015421()))
      }
      pub(super) fn get_015400() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("value", 443u32) },
            get_015401(),
          )],
          get_015403(),
        ))
      }
      pub(super) fn get_015243() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_015244()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_015245(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_015246(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_015250(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_015355(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_015356(),
            ),
          ],
          get_015400(),
        ))
      }
      pub(super) fn get_015564() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("base64"))
      }
      pub(super) fn get_015566() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_015567() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_015570() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_015569() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015570()))
      }
      pub(super) fn get_015571() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_015568() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_015569(),
          )],
          get_015571(),
        ))
      }
      pub(super) fn get_015574() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_015573() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015574()))
      }
      pub(super) fn get_015576() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_015575() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015576()))
      }
      pub(super) fn get_015580() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015582() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015583() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015581() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015582(),
          CoreBinaryOperator::And(None),
          get_015583(),
        ))
      }
      pub(super) fn get_015579() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015580(),
          CoreBinaryOperator::GreaterThan(None),
          get_015581(),
        ))
      }
      pub(super) fn get_015584() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_015578() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015579(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_015584(),
        ))
      }
      pub(super) fn get_015588() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015589() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015587() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015588(), get_015589()))
      }
      pub(super) fn get_015590() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_015586() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015587(),
          vec![get_015590()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015594() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015595() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015593() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015594(), get_015595()))
      }
      pub(super) fn get_015596() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_015592() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015593(),
          vec![get_015596()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015600() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015601() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015599() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015600(), get_015601()))
      }
      pub(super) fn get_015602() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_015598() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015599(),
          vec![get_015602()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015606() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_015605() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015606()))
      }
      pub(super) fn get_015608() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_015607() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015608()))
      }
      pub(super) fn get_015612() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015613() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015611() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015612(), get_015613()))
      }
      pub(super) fn get_015614() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_015610() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015611(),
          vec![get_015614()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015618() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015619() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_015617() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015618(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_015619(),
        ))
      }
      pub(super) fn get_015622() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015623() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_015621() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015622(),
          CoreBinaryOperator::Minus(None),
          get_015623(),
        ))
      }
      pub(super) fn get_015624() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_015620() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015621(),
          CoreBinaryOperator::Plus(None),
          get_015624(),
        ))
      }
      pub(super) fn get_015627() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015628() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_015626() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015627(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_015628(),
        ))
      }
      pub(super) fn get_015631() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015632() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_015630() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015631(),
          CoreBinaryOperator::Minus(None),
          get_015632(),
        ))
      }
      pub(super) fn get_015633() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_015629() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015630(),
          CoreBinaryOperator::Plus(None),
          get_015633(),
        ))
      }
      pub(super) fn get_015635() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_015636() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_015634() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015635(),
          CoreBinaryOperator::Minus(None),
          get_015636(),
        ))
      }
      pub(super) fn get_015625() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015626(), get_015629(), get_015634()))
      }
      pub(super) fn get_015616() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015617(), get_015620(), get_015625()))
      }
      pub(super) fn get_015640() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_015642() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015643() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_015641() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015642(),
          CoreBinaryOperator::And(None),
          get_015643(),
        ))
      }
      pub(super) fn get_015639() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015640(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_015641(),
        ))
      }
      pub(super) fn get_015644() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015638() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015639(),
          CoreBinaryOperator::LessThan(None),
          get_015644(),
        ))
      }
      pub(super) fn get_015646() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015648() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_015649() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_015647() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015648(),
          CoreBinaryOperator::Plus(None),
          get_015649(),
        ))
      }
      pub(super) fn get_015645() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015646(),
          CoreBinaryOperator::Mult(None),
          get_015647(),
        ))
      }
      pub(super) fn get_015653() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015654() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_015652() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015653(), get_015654()))
      }
      pub(super) fn get_015655() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_015657() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_015658() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015656() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015657(), get_015658()]))
      }
      pub(super) fn get_015651() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015652(),
          vec![get_015655(), get_015656()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015650() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015651()))
      }
      pub(super) fn get_015637() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015638(), get_015645(), get_015650()))
      }
      pub(super) fn get_015615() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_015616(),
          )],
          get_015637(),
        ))
      }
      pub(super) fn get_015609() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_015610(),
          )],
          get_015615(),
        ))
      }
      pub(super) fn get_015604() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_015605(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_015607(),
            ),
          ],
          get_015609(),
        ))
      }
      pub(super) fn get_015661() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015662() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_015660() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015661(), get_015662()))
      }
      pub(super) fn get_015663() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_015666() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015667() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_015665() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015666(), get_015667()))
      }
      pub(super) fn get_015668() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_015664() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015665(),
          vec![get_015668()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015669() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015659() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015660(),
          vec![get_015663(), get_015664(), get_015669()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015603() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_015604(),
          )],
          get_015659(),
        ))
      }
      pub(super) fn get_015597() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_015598(),
          )],
          get_015603(),
        ))
      }
      pub(super) fn get_015591() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_015592(),
          )],
          get_015597(),
        ))
      }
      pub(super) fn get_015585() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_015586(),
          )],
          get_015591(),
        ))
      }
      pub(super) fn get_015673() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015674() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_015672() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015673(), get_015674()))
      }
      pub(super) fn get_015675() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_015676() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015671() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015672(),
          vec![get_015675(), get_015676()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015670() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015671()))
      }
      pub(super) fn get_015577() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015578(), get_015585(), get_015670()))
      }
      pub(super) fn get_015572() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_015573(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_015575(),
            ),
          ],
          get_015577(),
        ))
      }
      pub(super) fn get_015677() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_015681() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_015682() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015680() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015681(), get_015682()))
      }
      pub(super) fn get_015684() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_015685() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_015683() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015684(), get_015685()))
      }
      pub(super) fn get_015679() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_015680(),
          )],
          get_015683(),
        ))
      }
      pub(super) fn get_015688() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_015689() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015687() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015688(), get_015689()))
      }
      pub(super) fn get_015690() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_015686() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_015687(),
          )],
          get_015690(),
        ))
      }
      pub(super) fn get_015694() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015695() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_015693() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015694(), get_015695()))
      }
      pub(super) fn get_015696() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015697() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_015692() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015693(),
          vec![get_015696(), get_015697()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015700() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015701() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_015699() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015700(), get_015701()))
      }
      pub(super) fn get_015702() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_015705() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015706() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_015704() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015705(), get_015706()))
      }
      pub(super) fn get_015709() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015710() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_015708() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015709(), get_015710()))
      }
      pub(super) fn get_015711() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_015707() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015708(),
          vec![get_015711()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015714() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_015713() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015714()))
      }
      pub(super) fn get_015717() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_015718() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_015716() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015717(), get_015718()))
      }
      pub(super) fn get_015721() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_015720() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015721()]))
      }
      pub(super) fn get_015719() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_015720()]))
      }
      pub(super) fn get_015715() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_015716(),
          )],
          get_015719(),
        ))
      }
      pub(super) fn get_015712() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_015713(),
          )],
          get_015715(),
        ))
      }
      pub(super) fn get_015703() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015704(),
          vec![get_015707(), get_015712()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015698() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015699(),
          vec![get_015702(), get_015703()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015691() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_015692(),
          )],
          get_015698(),
        ))
      }
      pub(super) fn get_015678() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_015679(),
          get_015686(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_015691(),
        ))
      }
      pub(super) fn get_015724() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'input' not bound"))
      }
      pub(super) fn get_015723() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015724()))
      }
      pub(super) fn get_015729() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015730() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_015728() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015729(), get_015730()))
      }
      pub(super) fn get_015731() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("input", 457u32)
        }))
      }
      pub(super) fn get_015727() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015728(),
          vec![get_015731()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015734() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015735() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("map"))
      }
      pub(super) fn get_015733() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015734(), get_015735()))
      }
      pub(super) fn get_015738() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'c' not bound"))
      }
      pub(super) fn get_015737() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015738()))
      }
      pub(super) fn get_015741() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015742() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015740() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015741(), get_015742()))
      }
      pub(super) fn get_015743() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("c", 459u32)
        }))
      }
      pub(super) fn get_015739() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015740(),
          vec![get_015743()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015736() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("c", 459u32) },
            get_015737(),
          )],
          get_015739(),
        ))
      }
      pub(super) fn get_015744() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("input", 457u32)
        }))
      }
      pub(super) fn get_015732() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015733(),
          vec![get_015736(), get_015744()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015745() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("input", 457u32)
        }))
      }
      pub(super) fn get_015726() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015727(), get_015732(), get_015745()))
      }
      pub(super) fn get_015749() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_015748() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015749()))
      }
      pub(super) fn get_015751() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_015750() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015751()))
      }
      pub(super) fn get_015753() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'r' not bound"))
      }
      pub(super) fn get_015752() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015753()))
      }
      pub(super) fn get_015756() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015759() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015760() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_015758() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015759(), get_015760()))
      }
      pub(super) fn get_015761() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015757() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015758(),
          vec![get_015761()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015755() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015756(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_015757(),
        ))
      }
      pub(super) fn get_015762() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("r", 463u32)
        }))
      }
      pub(super) fn get_015765() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015767() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_015770() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015771() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_015769() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015770(), get_015771()))
      }
      pub(super) fn get_015772() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015768() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015769(),
          vec![get_015772()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015766() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015767(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_015768(),
        ))
      }
      pub(super) fn get_015764() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015765(),
          CoreBinaryOperator::Plus(None),
          get_015766(),
        ))
      }
      pub(super) fn get_015777() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_015781() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015782() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015780() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015781(), get_015782()))
      }
      pub(super) fn get_015783() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(252f64))
      }
      pub(super) fn get_015779() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015780(),
          CoreBinaryOperator::BitAnd(None),
          get_015783(),
        ))
      }
      pub(super) fn get_015784() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_015778() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015779(),
          CoreBinaryOperator::ShiftR(None),
          get_015784(),
        ))
      }
      pub(super) fn get_015776() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015777(), get_015778()))
      }
      pub(super) fn get_015786() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_015790() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015791() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015789() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015790(), get_015791()))
      }
      pub(super) fn get_015792() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(3f64))
      }
      pub(super) fn get_015788() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015789(),
          CoreBinaryOperator::BitAnd(None),
          get_015792(),
        ))
      }
      pub(super) fn get_015793() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(4f64))
      }
      pub(super) fn get_015787() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015788(),
          CoreBinaryOperator::ShiftL(None),
          get_015793(),
        ))
      }
      pub(super) fn get_015785() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015786(), get_015787()))
      }
      pub(super) fn get_015775() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015776(),
          CoreBinaryOperator::Plus(None),
          get_015785(),
        ))
      }
      pub(super) fn get_015794() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("=="))
      }
      pub(super) fn get_015774() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015775(),
          CoreBinaryOperator::Plus(None),
          get_015794(),
        ))
      }
      pub(super) fn get_015796() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 460u32)
        }))
      }
      pub(super) fn get_015797() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015799() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015800() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(3f64))
      }
      pub(super) fn get_015798() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015799(),
          CoreBinaryOperator::Plus(None),
          get_015800(),
        ))
      }
      pub(super) fn get_015802() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("r", 463u32)
        }))
      }
      pub(super) fn get_015803() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 464u32)
        }))
      }
      pub(super) fn get_015801() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015802(),
          CoreBinaryOperator::Plus(None),
          get_015803(),
        ))
      }
      pub(super) fn get_015795() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015796(),
          vec![get_015797(), get_015798(), get_015801()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_015773() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("str", 464u32) },
            get_015774(),
          )],
          get_015795(),
        ))
      }
      pub(super) fn get_015806() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015808() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_015811() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015812() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_015810() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015811(), get_015812()))
      }
      pub(super) fn get_015813() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015809() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015810(),
          vec![get_015813()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015807() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015808(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_015809(),
        ))
      }
      pub(super) fn get_015805() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015806(),
          CoreBinaryOperator::Plus(None),
          get_015807(),
        ))
      }
      pub(super) fn get_015819() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_015823() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015824() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015822() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015823(), get_015824()))
      }
      pub(super) fn get_015825() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(252f64))
      }
      pub(super) fn get_015821() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015822(),
          CoreBinaryOperator::BitAnd(None),
          get_015825(),
        ))
      }
      pub(super) fn get_015826() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_015820() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015821(),
          CoreBinaryOperator::ShiftR(None),
          get_015826(),
        ))
      }
      pub(super) fn get_015818() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015819(), get_015820()))
      }
      pub(super) fn get_015828() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_015833() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015834() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015832() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015833(), get_015834()))
      }
      pub(super) fn get_015835() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(3f64))
      }
      pub(super) fn get_015831() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015832(),
          CoreBinaryOperator::BitAnd(None),
          get_015835(),
        ))
      }
      pub(super) fn get_015837() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(4f64))
      }
      pub(super) fn get_015840() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015842() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015843() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_015841() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015842(),
          CoreBinaryOperator::Plus(None),
          get_015843(),
        ))
      }
      pub(super) fn get_015839() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015840(), get_015841()))
      }
      pub(super) fn get_015844() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(240f64))
      }
      pub(super) fn get_015838() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015839(),
          CoreBinaryOperator::BitAnd(None),
          get_015844(),
        ))
      }
      pub(super) fn get_015836() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015837(),
          CoreBinaryOperator::BitOr(None),
          get_015838(),
        ))
      }
      pub(super) fn get_015830() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015831(),
          CoreBinaryOperator::ShiftL(None),
          get_015836(),
        ))
      }
      pub(super) fn get_015845() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(4f64))
      }
      pub(super) fn get_015829() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015830(),
          CoreBinaryOperator::ShiftR(None),
          get_015845(),
        ))
      }
      pub(super) fn get_015827() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015828(), get_015829()))
      }
      pub(super) fn get_015817() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015818(),
          CoreBinaryOperator::Plus(None),
          get_015827(),
        ))
      }
      pub(super) fn get_015847() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_015851() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015853() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015854() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_015852() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015853(),
          CoreBinaryOperator::Plus(None),
          get_015854(),
        ))
      }
      pub(super) fn get_015850() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015851(), get_015852()))
      }
      pub(super) fn get_015855() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(15f64))
      }
      pub(super) fn get_015849() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015850(),
          CoreBinaryOperator::BitAnd(None),
          get_015855(),
        ))
      }
      pub(super) fn get_015856() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_015848() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015849(),
          CoreBinaryOperator::ShiftL(None),
          get_015856(),
        ))
      }
      pub(super) fn get_015846() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015847(), get_015848()))
      }
      pub(super) fn get_015816() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015817(),
          CoreBinaryOperator::Plus(None),
          get_015846(),
        ))
      }
      pub(super) fn get_015857() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("="))
      }
      pub(super) fn get_015815() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015816(),
          CoreBinaryOperator::Plus(None),
          get_015857(),
        ))
      }
      pub(super) fn get_015859() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 460u32)
        }))
      }
      pub(super) fn get_015860() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015862() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015863() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(3f64))
      }
      pub(super) fn get_015861() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015862(),
          CoreBinaryOperator::Plus(None),
          get_015863(),
        ))
      }
      pub(super) fn get_015865() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("r", 463u32)
        }))
      }
      pub(super) fn get_015866() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 465u32)
        }))
      }
      pub(super) fn get_015864() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015865(),
          CoreBinaryOperator::Plus(None),
          get_015866(),
        ))
      }
      pub(super) fn get_015858() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015859(),
          vec![get_015860(), get_015861(), get_015864()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_015814() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("str", 465u32) },
            get_015815(),
          )],
          get_015858(),
        ))
      }
      pub(super) fn get_015872() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_015876() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015877() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015875() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015876(), get_015877()))
      }
      pub(super) fn get_015878() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(252f64))
      }
      pub(super) fn get_015874() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015875(),
          CoreBinaryOperator::BitAnd(None),
          get_015878(),
        ))
      }
      pub(super) fn get_015879() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_015873() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015874(),
          CoreBinaryOperator::ShiftR(None),
          get_015879(),
        ))
      }
      pub(super) fn get_015871() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015872(), get_015873()))
      }
      pub(super) fn get_015881() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_015886() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015887() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015885() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015886(), get_015887()))
      }
      pub(super) fn get_015888() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(3f64))
      }
      pub(super) fn get_015884() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015885(),
          CoreBinaryOperator::BitAnd(None),
          get_015888(),
        ))
      }
      pub(super) fn get_015890() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(4f64))
      }
      pub(super) fn get_015893() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015895() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015896() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_015894() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015895(),
          CoreBinaryOperator::Plus(None),
          get_015896(),
        ))
      }
      pub(super) fn get_015892() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015893(), get_015894()))
      }
      pub(super) fn get_015897() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(240f64))
      }
      pub(super) fn get_015891() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015892(),
          CoreBinaryOperator::BitAnd(None),
          get_015897(),
        ))
      }
      pub(super) fn get_015889() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015890(),
          CoreBinaryOperator::BitOr(None),
          get_015891(),
        ))
      }
      pub(super) fn get_015883() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015884(),
          CoreBinaryOperator::ShiftL(None),
          get_015889(),
        ))
      }
      pub(super) fn get_015898() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(4f64))
      }
      pub(super) fn get_015882() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015883(),
          CoreBinaryOperator::ShiftR(None),
          get_015898(),
        ))
      }
      pub(super) fn get_015880() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015881(), get_015882()))
      }
      pub(super) fn get_015870() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015871(),
          CoreBinaryOperator::Plus(None),
          get_015880(),
        ))
      }
      pub(super) fn get_015900() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_015905() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015907() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015908() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_015906() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015907(),
          CoreBinaryOperator::Plus(None),
          get_015908(),
        ))
      }
      pub(super) fn get_015904() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015905(), get_015906()))
      }
      pub(super) fn get_015909() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(15f64))
      }
      pub(super) fn get_015903() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015904(),
          CoreBinaryOperator::BitAnd(None),
          get_015909(),
        ))
      }
      pub(super) fn get_015911() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_015914() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015916() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015917() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_015915() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015916(),
          CoreBinaryOperator::Plus(None),
          get_015917(),
        ))
      }
      pub(super) fn get_015913() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015914(), get_015915()))
      }
      pub(super) fn get_015918() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(192f64))
      }
      pub(super) fn get_015912() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015913(),
          CoreBinaryOperator::BitAnd(None),
          get_015918(),
        ))
      }
      pub(super) fn get_015910() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015911(),
          CoreBinaryOperator::BitOr(None),
          get_015912(),
        ))
      }
      pub(super) fn get_015902() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015903(),
          CoreBinaryOperator::ShiftL(None),
          get_015910(),
        ))
      }
      pub(super) fn get_015919() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(6f64))
      }
      pub(super) fn get_015901() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015902(),
          CoreBinaryOperator::ShiftR(None),
          get_015919(),
        ))
      }
      pub(super) fn get_015899() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015900(), get_015901()))
      }
      pub(super) fn get_015869() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015870(),
          CoreBinaryOperator::Plus(None),
          get_015899(),
        ))
      }
      pub(super) fn get_015921() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_015924() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015926() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015927() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_015925() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015926(),
          CoreBinaryOperator::Plus(None),
          get_015927(),
        ))
      }
      pub(super) fn get_015923() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015924(), get_015925()))
      }
      pub(super) fn get_015928() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_015922() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015923(),
          CoreBinaryOperator::BitAnd(None),
          get_015928(),
        ))
      }
      pub(super) fn get_015920() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015921(), get_015922()))
      }
      pub(super) fn get_015868() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015869(),
          CoreBinaryOperator::Plus(None),
          get_015920(),
        ))
      }
      pub(super) fn get_015930() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 460u32)
        }))
      }
      pub(super) fn get_015931() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 461u32)
        }))
      }
      pub(super) fn get_015933() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 462u32)
        }))
      }
      pub(super) fn get_015934() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(3f64))
      }
      pub(super) fn get_015932() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015933(),
          CoreBinaryOperator::Plus(None),
          get_015934(),
        ))
      }
      pub(super) fn get_015936() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("r", 463u32)
        }))
      }
      pub(super) fn get_015937() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 466u32)
        }))
      }
      pub(super) fn get_015935() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015936(),
          CoreBinaryOperator::Plus(None),
          get_015937(),
        ))
      }
      pub(super) fn get_015929() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015930(),
          vec![get_015931(), get_015932(), get_015935()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_015867() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("str", 466u32) },
            get_015868(),
          )],
          get_015929(),
        ))
      }
      pub(super) fn get_015804() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015805(), get_015814(), get_015867()))
      }
      pub(super) fn get_015763() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015764(), get_015773(), get_015804()))
      }
      pub(super) fn get_015754() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015755(), get_015762(), get_015763()))
      }
      pub(super) fn get_015747() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 461u32) },
              get_015748(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 462u32) },
              get_015750(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("r", 463u32) },
              get_015752(),
            ),
          ],
          get_015754(),
        ))
      }
      pub(super) fn get_015941() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015942() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_015940() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015941(), get_015942()))
      }
      pub(super) fn get_015945() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'r' not bound"))
      }
      pub(super) fn get_015944() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015945()))
      }
      pub(super) fn get_015947() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_015946() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015947()))
      }
      pub(super) fn get_015949() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("r", 468u32)
        }))
      }
      pub(super) fn get_015951() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 469u32)
        }))
      }
      pub(super) fn get_015952() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(256f64))
      }
      pub(super) fn get_015950() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015951(),
          CoreBinaryOperator::LessThan(None),
          get_015952(),
        ))
      }
      pub(super) fn get_015948() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015949(),
          CoreBinaryOperator::And(None),
          get_015950(),
        ))
      }
      pub(super) fn get_015943() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("r", 468u32) },
              get_015944(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 469u32) },
              get_015946(),
            ),
          ],
          get_015948(),
        ))
      }
      pub(super) fn get_015953() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("bytes", 458u32)
        }))
      }
      pub(super) fn get_015954() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_015939() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015940(),
          vec![get_015943(), get_015953(), get_015954()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015957() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("sanity", 467u32)
        }))
      }
      pub(super) fn get_015956() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_015957(),
        ))
      }
      pub(super) fn get_015959() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Can only base64 encode strings / arrays of single bytes.",
        ))
      }
      pub(super) fn get_015958() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015959()))
      }
      pub(super) fn get_015961() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 460u32)
        }))
      }
      pub(super) fn get_015962() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("bytes", 458u32)
        }))
      }
      pub(super) fn get_015963() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015964() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_015960() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015961(),
          vec![get_015962(), get_015963(), get_015964()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015955() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015956(), get_015958(), get_015960()))
      }
      pub(super) fn get_015938() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("sanity", 467u32) },
            get_015939(),
          )],
          get_015955(),
        ))
      }
      pub(super) fn get_015746() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 460u32) },
            get_015747(),
          )],
          get_015938(),
        ))
      }
      pub(super) fn get_015725() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("bytes", 458u32) },
            get_015726(),
          )],
          get_015746(),
        ))
      }
      pub(super) fn get_015722() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("input", 457u32) },
            get_015723(),
          )],
          get_015725(),
        ))
      }
      pub(super) fn get_015565() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_015566()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_015567(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_015568(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_015572(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_015677(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_015678(),
            ),
          ],
          get_015722(),
        ))
      }
      pub(super) fn get_015965() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("base64DecodeBytes"))
      }
      pub(super) fn get_015967() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_015968() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_015971() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_015970() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015971()))
      }
      pub(super) fn get_015972() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_015969() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_015970(),
          )],
          get_015972(),
        ))
      }
      pub(super) fn get_015975() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_015974() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015975()))
      }
      pub(super) fn get_015977() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_015976() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_015977()))
      }
      pub(super) fn get_015981() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015983() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_015984() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_015982() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015983(),
          CoreBinaryOperator::And(None),
          get_015984(),
        ))
      }
      pub(super) fn get_015980() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015981(),
          CoreBinaryOperator::GreaterThan(None),
          get_015982(),
        ))
      }
      pub(super) fn get_015985() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_015979() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_015980(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_015985(),
        ))
      }
      pub(super) fn get_015989() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015990() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015988() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015989(), get_015990()))
      }
      pub(super) fn get_015991() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_015987() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015988(),
          vec![get_015991()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_015995() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_015996() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_015994() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_015995(), get_015996()))
      }
      pub(super) fn get_015997() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_015993() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_015994(),
          vec![get_015997()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016001() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016002() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016000() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016001(), get_016002()))
      }
      pub(super) fn get_016003() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_015999() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016000(),
          vec![get_016003()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016007() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_016006() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016007()))
      }
      pub(super) fn get_016009() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_016008() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016009()))
      }
      pub(super) fn get_016013() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016014() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016012() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016013(), get_016014()))
      }
      pub(super) fn get_016015() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_016011() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016012(),
          vec![get_016015()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016019() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016020() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_016018() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016019(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016020(),
        ))
      }
      pub(super) fn get_016023() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016024() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_016022() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016023(),
          CoreBinaryOperator::Minus(None),
          get_016024(),
        ))
      }
      pub(super) fn get_016025() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_016021() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016022(),
          CoreBinaryOperator::Plus(None),
          get_016025(),
        ))
      }
      pub(super) fn get_016028() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016029() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_016027() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016028(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016029(),
        ))
      }
      pub(super) fn get_016032() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016033() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_016031() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016032(),
          CoreBinaryOperator::Minus(None),
          get_016033(),
        ))
      }
      pub(super) fn get_016034() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_016030() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016031(),
          CoreBinaryOperator::Plus(None),
          get_016034(),
        ))
      }
      pub(super) fn get_016036() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016037() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_016035() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016036(),
          CoreBinaryOperator::Minus(None),
          get_016037(),
        ))
      }
      pub(super) fn get_016026() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016027(), get_016030(), get_016035()))
      }
      pub(super) fn get_016017() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016018(), get_016021(), get_016026()))
      }
      pub(super) fn get_016041() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_016043() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016044() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_016042() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016043(),
          CoreBinaryOperator::And(None),
          get_016044(),
        ))
      }
      pub(super) fn get_016040() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016041(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016042(),
        ))
      }
      pub(super) fn get_016045() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016039() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016040(),
          CoreBinaryOperator::LessThan(None),
          get_016045(),
        ))
      }
      pub(super) fn get_016047() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016049() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_016050() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_016048() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016049(),
          CoreBinaryOperator::Plus(None),
          get_016050(),
        ))
      }
      pub(super) fn get_016046() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016047(),
          CoreBinaryOperator::Mult(None),
          get_016048(),
        ))
      }
      pub(super) fn get_016054() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016055() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_016053() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016054(), get_016055()))
      }
      pub(super) fn get_016056() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_016058() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_016059() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016057() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016058(), get_016059()]))
      }
      pub(super) fn get_016052() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016053(),
          vec![get_016056(), get_016057()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016051() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016052()))
      }
      pub(super) fn get_016038() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016039(), get_016046(), get_016051()))
      }
      pub(super) fn get_016016() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_016017(),
          )],
          get_016038(),
        ))
      }
      pub(super) fn get_016010() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_016011(),
          )],
          get_016016(),
        ))
      }
      pub(super) fn get_016005() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_016006(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_016008(),
            ),
          ],
          get_016010(),
        ))
      }
      pub(super) fn get_016062() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016063() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_016061() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016062(), get_016063()))
      }
      pub(super) fn get_016064() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_016067() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016068() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_016066() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016067(), get_016068()))
      }
      pub(super) fn get_016069() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_016065() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016066(),
          vec![get_016069()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016070() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016060() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016061(),
          vec![get_016064(), get_016065(), get_016070()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016004() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_016005(),
          )],
          get_016060(),
        ))
      }
      pub(super) fn get_015998() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_015999(),
          )],
          get_016004(),
        ))
      }
      pub(super) fn get_015992() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_015993(),
          )],
          get_015998(),
        ))
      }
      pub(super) fn get_015986() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_015987(),
          )],
          get_015992(),
        ))
      }
      pub(super) fn get_016074() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016075() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_016073() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016074(), get_016075()))
      }
      pub(super) fn get_016076() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_016077() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016072() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016073(),
          vec![get_016076(), get_016077()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016071() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016072()))
      }
      pub(super) fn get_015978() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_015979(), get_015986(), get_016071()))
      }
      pub(super) fn get_015973() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_015974(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_015976(),
            ),
          ],
          get_015978(),
        ))
      }
      pub(super) fn get_016078() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_016082() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_016083() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016081() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016082(), get_016083()))
      }
      pub(super) fn get_016085() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_016086() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_016084() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016085(), get_016086()))
      }
      pub(super) fn get_016080() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_016081(),
          )],
          get_016084(),
        ))
      }
      pub(super) fn get_016089() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_016090() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016088() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016089(), get_016090()))
      }
      pub(super) fn get_016091() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_016087() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_016088(),
          )],
          get_016091(),
        ))
      }
      pub(super) fn get_016095() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016096() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_016094() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016095(), get_016096()))
      }
      pub(super) fn get_016097() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016098() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_016093() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016094(),
          vec![get_016097(), get_016098()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016101() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016102() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_016100() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016101(), get_016102()))
      }
      pub(super) fn get_016103() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_016106() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016107() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_016105() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016106(), get_016107()))
      }
      pub(super) fn get_016110() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016111() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_016109() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016110(), get_016111()))
      }
      pub(super) fn get_016112() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_016108() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016109(),
          vec![get_016112()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016115() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_016114() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016115()))
      }
      pub(super) fn get_016118() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_016119() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_016117() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016118(), get_016119()))
      }
      pub(super) fn get_016122() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_016121() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016122()]))
      }
      pub(super) fn get_016120() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016121()]))
      }
      pub(super) fn get_016116() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_016117(),
          )],
          get_016120(),
        ))
      }
      pub(super) fn get_016113() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_016114(),
          )],
          get_016116(),
        ))
      }
      pub(super) fn get_016104() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016105(),
          vec![get_016108(), get_016113()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016099() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016100(),
          vec![get_016103(), get_016104()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016092() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_016093(),
          )],
          get_016099(),
        ))
      }
      pub(super) fn get_016079() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_016080(),
          get_016087(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_016092(),
        ))
      }
      pub(super) fn get_016125() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_016124() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016125()))
      }
      pub(super) fn get_016129() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016130() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_016128() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016129(), get_016130()))
      }
      pub(super) fn get_016133() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016134() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_016132() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016133(), get_016134()))
      }
      pub(super) fn get_016135() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 470u32)
        }))
      }
      pub(super) fn get_016131() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016132(),
          vec![get_016135()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016139() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016140() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_016138() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016139(), get_016140()))
      }
      pub(super) fn get_016141() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(4f64))
      }
      pub(super) fn get_016142() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016137() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016138(),
          vec![get_016141(), get_016142()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016136() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_016137(),
        ))
      }
      pub(super) fn get_016127() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016128(),
          vec![get_016131(), get_016136()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016146() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016147() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_016145() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016146(), get_016147()))
      }
      pub(super) fn get_016148() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "Not a base64 encoded string \"%s\"",
        ))
      }
      pub(super) fn get_016149() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 470u32)
        }))
      }
      pub(super) fn get_016144() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016145(),
          vec![get_016148(), get_016149()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016143() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016144()))
      }
      pub(super) fn get_016153() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_016152() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016153()))
      }
      pub(super) fn get_016155() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_016154() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016155()))
      }
      pub(super) fn get_016157() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'r' not bound"))
      }
      pub(super) fn get_016156() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016157()))
      }
      pub(super) fn get_016160() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 473u32)
        }))
      }
      pub(super) fn get_016163() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016164() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_016162() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016163(), get_016164()))
      }
      pub(super) fn get_016165() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 472u32)
        }))
      }
      pub(super) fn get_016161() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016162(),
          vec![get_016165()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016159() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016160(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016161(),
        ))
      }
      pub(super) fn get_016166() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("r", 474u32)
        }))
      }
      pub(super) fn get_016171() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_inv", 7u32)
        }))
      }
      pub(super) fn get_016173() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 472u32)
        }))
      }
      pub(super) fn get_016174() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 473u32)
        }))
      }
      pub(super) fn get_016172() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016173(), get_016174()))
      }
      pub(super) fn get_016170() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016171(), get_016172()))
      }
      pub(super) fn get_016176() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_016179() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_inv", 7u32)
        }))
      }
      pub(super) fn get_016181() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 472u32)
        }))
      }
      pub(super) fn get_016183() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 473u32)
        }))
      }
      pub(super) fn get_016184() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_016182() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016183(),
          CoreBinaryOperator::Plus(None),
          get_016184(),
        ))
      }
      pub(super) fn get_016180() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016181(), get_016182()))
      }
      pub(super) fn get_016178() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016179(), get_016180()))
      }
      pub(super) fn get_016185() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(4f64))
      }
      pub(super) fn get_016177() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016178(),
          CoreBinaryOperator::ShiftR(None),
          get_016185(),
        ))
      }
      pub(super) fn get_016175() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016176(),
          CoreBinaryOperator::BitOr(None),
          get_016177(),
        ))
      }
      pub(super) fn get_016169() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016170(),
          CoreBinaryOperator::ShiftL(None),
          get_016175(),
        ))
      }
      pub(super) fn get_016168() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016169()]))
      }
      pub(super) fn get_016190() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016191() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_016189() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016190(), get_016191()))
      }
      pub(super) fn get_016193() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 472u32)
        }))
      }
      pub(super) fn get_016195() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 473u32)
        }))
      }
      pub(super) fn get_016196() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_016194() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016195(),
          CoreBinaryOperator::Plus(None),
          get_016196(),
        ))
      }
      pub(super) fn get_016192() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016193(), get_016194()))
      }
      pub(super) fn get_016197() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("="))
      }
      pub(super) fn get_016188() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016189(),
          vec![get_016192(), get_016197()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016198() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_016203() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_inv", 7u32)
        }))
      }
      pub(super) fn get_016205() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 472u32)
        }))
      }
      pub(super) fn get_016207() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 473u32)
        }))
      }
      pub(super) fn get_016208() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_016206() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016207(),
          CoreBinaryOperator::Plus(None),
          get_016208(),
        ))
      }
      pub(super) fn get_016204() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016205(), get_016206()))
      }
      pub(super) fn get_016202() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016203(), get_016204()))
      }
      pub(super) fn get_016209() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(15f64))
      }
      pub(super) fn get_016201() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016202(),
          CoreBinaryOperator::BitAnd(None),
          get_016209(),
        ))
      }
      pub(super) fn get_016211() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(4f64))
      }
      pub(super) fn get_016214() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_inv", 7u32)
        }))
      }
      pub(super) fn get_016216() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 472u32)
        }))
      }
      pub(super) fn get_016218() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 473u32)
        }))
      }
      pub(super) fn get_016219() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_016217() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016218(),
          CoreBinaryOperator::Plus(None),
          get_016219(),
        ))
      }
      pub(super) fn get_016215() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016216(), get_016217()))
      }
      pub(super) fn get_016213() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016214(), get_016215()))
      }
      pub(super) fn get_016220() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_016212() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016213(),
          CoreBinaryOperator::ShiftR(None),
          get_016220(),
        ))
      }
      pub(super) fn get_016210() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016211(),
          CoreBinaryOperator::BitOr(None),
          get_016212(),
        ))
      }
      pub(super) fn get_016200() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016201(),
          CoreBinaryOperator::ShiftL(None),
          get_016210(),
        ))
      }
      pub(super) fn get_016199() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016200()]))
      }
      pub(super) fn get_016187() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016188(), get_016198(), get_016199()))
      }
      pub(super) fn get_016225() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016226() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_016224() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016225(), get_016226()))
      }
      pub(super) fn get_016228() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 472u32)
        }))
      }
      pub(super) fn get_016230() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 473u32)
        }))
      }
      pub(super) fn get_016231() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(3f64))
      }
      pub(super) fn get_016229() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016230(),
          CoreBinaryOperator::Plus(None),
          get_016231(),
        ))
      }
      pub(super) fn get_016227() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016228(), get_016229()))
      }
      pub(super) fn get_016232() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("="))
      }
      pub(super) fn get_016223() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016224(),
          vec![get_016227(), get_016232()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016233() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_016238() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_inv", 7u32)
        }))
      }
      pub(super) fn get_016240() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 472u32)
        }))
      }
      pub(super) fn get_016242() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 473u32)
        }))
      }
      pub(super) fn get_016243() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_016241() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016242(),
          CoreBinaryOperator::Plus(None),
          get_016243(),
        ))
      }
      pub(super) fn get_016239() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016240(), get_016241()))
      }
      pub(super) fn get_016237() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016238(), get_016239()))
      }
      pub(super) fn get_016244() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(3f64))
      }
      pub(super) fn get_016236() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016237(),
          CoreBinaryOperator::BitAnd(None),
          get_016244(),
        ))
      }
      pub(super) fn get_016246() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(6f64))
      }
      pub(super) fn get_016248() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_inv", 7u32)
        }))
      }
      pub(super) fn get_016250() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 472u32)
        }))
      }
      pub(super) fn get_016252() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 473u32)
        }))
      }
      pub(super) fn get_016253() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(3f64))
      }
      pub(super) fn get_016251() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016252(),
          CoreBinaryOperator::Plus(None),
          get_016253(),
        ))
      }
      pub(super) fn get_016249() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016250(), get_016251()))
      }
      pub(super) fn get_016247() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016248(), get_016249()))
      }
      pub(super) fn get_016245() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016246(),
          CoreBinaryOperator::BitOr(None),
          get_016247(),
        ))
      }
      pub(super) fn get_016235() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016236(),
          CoreBinaryOperator::ShiftL(None),
          get_016245(),
        ))
      }
      pub(super) fn get_016234() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016235()]))
      }
      pub(super) fn get_016222() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016223(), get_016233(), get_016234()))
      }
      pub(super) fn get_016255() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 471u32)
        }))
      }
      pub(super) fn get_016256() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 472u32)
        }))
      }
      pub(super) fn get_016258() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 473u32)
        }))
      }
      pub(super) fn get_016259() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(4f64))
      }
      pub(super) fn get_016257() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016258(),
          CoreBinaryOperator::Plus(None),
          get_016259(),
        ))
      }
      pub(super) fn get_016263() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("r", 474u32)
        }))
      }
      pub(super) fn get_016264() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n1", 475u32)
        }))
      }
      pub(super) fn get_016262() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016263(),
          CoreBinaryOperator::Plus(None),
          get_016264(),
        ))
      }
      pub(super) fn get_016265() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n2", 476u32)
        }))
      }
      pub(super) fn get_016261() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016262(),
          CoreBinaryOperator::Plus(None),
          get_016265(),
        ))
      }
      pub(super) fn get_016266() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("n3", 477u32)
        }))
      }
      pub(super) fn get_016260() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016261(),
          CoreBinaryOperator::Plus(None),
          get_016266(),
        ))
      }
      pub(super) fn get_016254() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016255(),
          vec![get_016256(), get_016257(), get_016260()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_016221() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("n3", 477u32) },
            get_016222(),
          )],
          get_016254(),
        ))
      }
      pub(super) fn get_016186() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("n2", 476u32) },
            get_016187(),
          )],
          get_016221(),
        ))
      }
      pub(super) fn get_016167() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("n1", 475u32) },
            get_016168(),
          )],
          get_016186(),
        ))
      }
      pub(super) fn get_016158() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016159(), get_016166(), get_016167()))
      }
      pub(super) fn get_016151() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 472u32) },
              get_016152(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 473u32) },
              get_016154(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("r", 474u32) },
              get_016156(),
            ),
          ],
          get_016158(),
        ))
      }
      pub(super) fn get_016268() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 471u32)
        }))
      }
      pub(super) fn get_016269() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 470u32)
        }))
      }
      pub(super) fn get_016270() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016271() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_016267() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016268(),
          vec![get_016269(), get_016270(), get_016271()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016150() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 471u32) },
            get_016151(),
          )],
          get_016267(),
        ))
      }
      pub(super) fn get_016126() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016127(), get_016143(), get_016150()))
      }
      pub(super) fn get_016123() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str", 470u32) },
            get_016124(),
          )],
          get_016126(),
        ))
      }
      pub(super) fn get_015966() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_015967()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_015968(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_015969(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_015973(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_016078(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_016079(),
            ),
          ],
          get_016123(),
        ))
      }
      pub(super) fn get_016272() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("base64Decode"))
      }
      pub(super) fn get_016274() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_016275() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_016278() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_016277() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016278()))
      }
      pub(super) fn get_016279() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_016276() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_016277(),
          )],
          get_016279(),
        ))
      }
      pub(super) fn get_016282() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_016281() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016282()))
      }
      pub(super) fn get_016284() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_016283() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016284()))
      }
      pub(super) fn get_016288() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016290() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016291() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016289() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016290(),
          CoreBinaryOperator::And(None),
          get_016291(),
        ))
      }
      pub(super) fn get_016287() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016288(),
          CoreBinaryOperator::GreaterThan(None),
          get_016289(),
        ))
      }
      pub(super) fn get_016292() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_016286() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016287(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_016292(),
        ))
      }
      pub(super) fn get_016296() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016297() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016295() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016296(), get_016297()))
      }
      pub(super) fn get_016298() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_016294() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016295(),
          vec![get_016298()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016302() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016303() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016301() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016302(), get_016303()))
      }
      pub(super) fn get_016304() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_016300() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016301(),
          vec![get_016304()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016308() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016309() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016307() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016308(), get_016309()))
      }
      pub(super) fn get_016310() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_016306() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016307(),
          vec![get_016310()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016314() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_016313() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016314()))
      }
      pub(super) fn get_016316() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_016315() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016316()))
      }
      pub(super) fn get_016320() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016321() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016319() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016320(), get_016321()))
      }
      pub(super) fn get_016322() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_016318() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016319(),
          vec![get_016322()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016326() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016327() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_016325() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016326(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016327(),
        ))
      }
      pub(super) fn get_016330() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016331() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_016329() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016330(),
          CoreBinaryOperator::Minus(None),
          get_016331(),
        ))
      }
      pub(super) fn get_016332() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_016328() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016329(),
          CoreBinaryOperator::Plus(None),
          get_016332(),
        ))
      }
      pub(super) fn get_016335() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016336() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_016334() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016335(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016336(),
        ))
      }
      pub(super) fn get_016339() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016340() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_016338() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016339(),
          CoreBinaryOperator::Minus(None),
          get_016340(),
        ))
      }
      pub(super) fn get_016341() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_016337() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016338(),
          CoreBinaryOperator::Plus(None),
          get_016341(),
        ))
      }
      pub(super) fn get_016343() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016344() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_016342() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016343(),
          CoreBinaryOperator::Minus(None),
          get_016344(),
        ))
      }
      pub(super) fn get_016333() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016334(), get_016337(), get_016342()))
      }
      pub(super) fn get_016324() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016325(), get_016328(), get_016333()))
      }
      pub(super) fn get_016348() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_016350() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016351() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_016349() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016350(),
          CoreBinaryOperator::And(None),
          get_016351(),
        ))
      }
      pub(super) fn get_016347() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016348(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016349(),
        ))
      }
      pub(super) fn get_016352() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016346() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016347(),
          CoreBinaryOperator::LessThan(None),
          get_016352(),
        ))
      }
      pub(super) fn get_016354() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016356() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_016357() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_016355() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016356(),
          CoreBinaryOperator::Plus(None),
          get_016357(),
        ))
      }
      pub(super) fn get_016353() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016354(),
          CoreBinaryOperator::Mult(None),
          get_016355(),
        ))
      }
      pub(super) fn get_016361() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016362() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_016360() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016361(), get_016362()))
      }
      pub(super) fn get_016363() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_016365() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_016366() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016364() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016365(), get_016366()]))
      }
      pub(super) fn get_016359() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016360(),
          vec![get_016363(), get_016364()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016358() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016359()))
      }
      pub(super) fn get_016345() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016346(), get_016353(), get_016358()))
      }
      pub(super) fn get_016323() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_016324(),
          )],
          get_016345(),
        ))
      }
      pub(super) fn get_016317() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_016318(),
          )],
          get_016323(),
        ))
      }
      pub(super) fn get_016312() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_016313(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_016315(),
            ),
          ],
          get_016317(),
        ))
      }
      pub(super) fn get_016369() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016370() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_016368() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016369(), get_016370()))
      }
      pub(super) fn get_016371() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_016374() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016375() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_016373() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016374(), get_016375()))
      }
      pub(super) fn get_016376() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_016372() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016373(),
          vec![get_016376()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016377() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016367() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016368(),
          vec![get_016371(), get_016372(), get_016377()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016311() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_016312(),
          )],
          get_016367(),
        ))
      }
      pub(super) fn get_016305() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_016306(),
          )],
          get_016311(),
        ))
      }
      pub(super) fn get_016299() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_016300(),
          )],
          get_016305(),
        ))
      }
      pub(super) fn get_016293() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_016294(),
          )],
          get_016299(),
        ))
      }
      pub(super) fn get_016381() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016382() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_016380() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016381(), get_016382()))
      }
      pub(super) fn get_016383() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_016384() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016379() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016380(),
          vec![get_016383(), get_016384()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016378() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016379()))
      }
      pub(super) fn get_016285() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016286(), get_016293(), get_016378()))
      }
      pub(super) fn get_016280() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_016281(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_016283(),
            ),
          ],
          get_016285(),
        ))
      }
      pub(super) fn get_016385() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_016389() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_016390() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016388() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016389(), get_016390()))
      }
      pub(super) fn get_016392() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_016393() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_016391() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016392(), get_016393()))
      }
      pub(super) fn get_016387() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_016388(),
          )],
          get_016391(),
        ))
      }
      pub(super) fn get_016396() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_016397() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016395() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016396(), get_016397()))
      }
      pub(super) fn get_016398() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_016394() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_016395(),
          )],
          get_016398(),
        ))
      }
      pub(super) fn get_016402() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016403() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_016401() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016402(), get_016403()))
      }
      pub(super) fn get_016404() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016405() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_016400() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016401(),
          vec![get_016404(), get_016405()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016408() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016409() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_016407() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016408(), get_016409()))
      }
      pub(super) fn get_016410() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_016413() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016414() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_016412() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016413(), get_016414()))
      }
      pub(super) fn get_016417() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016418() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_016416() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016417(), get_016418()))
      }
      pub(super) fn get_016419() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_016415() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016416(),
          vec![get_016419()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016422() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_016421() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016422()))
      }
      pub(super) fn get_016425() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_016426() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_016424() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016425(), get_016426()))
      }
      pub(super) fn get_016429() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_016428() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016429()]))
      }
      pub(super) fn get_016427() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016428()]))
      }
      pub(super) fn get_016423() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_016424(),
          )],
          get_016427(),
        ))
      }
      pub(super) fn get_016420() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_016421(),
          )],
          get_016423(),
        ))
      }
      pub(super) fn get_016411() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016412(),
          vec![get_016415(), get_016420()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016406() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016407(),
          vec![get_016410(), get_016411()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016399() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_016400(),
          )],
          get_016406(),
        ))
      }
      pub(super) fn get_016386() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_016387(),
          get_016394(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_016399(),
        ))
      }
      pub(super) fn get_016432() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_016431() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016432()))
      }
      pub(super) fn get_016436() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016437() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("base64DecodeBytes"))
      }
      pub(super) fn get_016435() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016436(), get_016437()))
      }
      pub(super) fn get_016438() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 478u32)
        }))
      }
      pub(super) fn get_016434() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016435(),
          vec![get_016438()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016441() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016442() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_016440() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016441(), get_016442()))
      }
      pub(super) fn get_016443() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(""))
      }
      pub(super) fn get_016446() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016447() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("map"))
      }
      pub(super) fn get_016445() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016446(), get_016447()))
      }
      pub(super) fn get_016450() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_016449() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016450()))
      }
      pub(super) fn get_016453() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016454() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("char"))
      }
      pub(super) fn get_016452() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016453(), get_016454()))
      }
      pub(super) fn get_016455() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 480u32)
        }))
      }
      pub(super) fn get_016451() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016452(),
          vec![get_016455()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016448() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("b", 480u32) },
            get_016449(),
          )],
          get_016451(),
        ))
      }
      pub(super) fn get_016456() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("bytes", 479u32)
        }))
      }
      pub(super) fn get_016444() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016445(),
          vec![get_016448(), get_016456()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016439() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016440(),
          vec![get_016443(), get_016444()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016433() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("bytes", 479u32) },
            get_016434(),
          )],
          get_016439(),
        ))
      }
      pub(super) fn get_016430() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("str", 478u32) },
            get_016431(),
          )],
          get_016433(),
        ))
      }
      pub(super) fn get_016273() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_016274()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_016275(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_016276(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_016280(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_016385(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_016386(),
            ),
          ],
          get_016430(),
        ))
      }
      pub(super) fn get_016457() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("reverse"))
      }
      pub(super) fn get_016459() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_016460() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_016463() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_016462() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016463()))
      }
      pub(super) fn get_016464() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_016461() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_016462(),
          )],
          get_016464(),
        ))
      }
      pub(super) fn get_016467() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_016466() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016467()))
      }
      pub(super) fn get_016469() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_016468() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016469()))
      }
      pub(super) fn get_016473() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016475() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016476() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016474() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016475(),
          CoreBinaryOperator::And(None),
          get_016476(),
        ))
      }
      pub(super) fn get_016472() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016473(),
          CoreBinaryOperator::GreaterThan(None),
          get_016474(),
        ))
      }
      pub(super) fn get_016477() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_016471() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016472(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_016477(),
        ))
      }
      pub(super) fn get_016481() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016482() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016480() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016481(), get_016482()))
      }
      pub(super) fn get_016483() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_016479() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016480(),
          vec![get_016483()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016487() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016488() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016486() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016487(), get_016488()))
      }
      pub(super) fn get_016489() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_016485() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016486(),
          vec![get_016489()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016493() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016494() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016492() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016493(), get_016494()))
      }
      pub(super) fn get_016495() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_016491() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016492(),
          vec![get_016495()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016499() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_016498() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016499()))
      }
      pub(super) fn get_016501() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_016500() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016501()))
      }
      pub(super) fn get_016505() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016506() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016504() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016505(), get_016506()))
      }
      pub(super) fn get_016507() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_016503() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016504(),
          vec![get_016507()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016511() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016512() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_016510() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016511(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016512(),
        ))
      }
      pub(super) fn get_016515() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016516() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_016514() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016515(),
          CoreBinaryOperator::Minus(None),
          get_016516(),
        ))
      }
      pub(super) fn get_016517() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_016513() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016514(),
          CoreBinaryOperator::Plus(None),
          get_016517(),
        ))
      }
      pub(super) fn get_016520() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016521() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_016519() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016520(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016521(),
        ))
      }
      pub(super) fn get_016524() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016525() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_016523() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016524(),
          CoreBinaryOperator::Minus(None),
          get_016525(),
        ))
      }
      pub(super) fn get_016526() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_016522() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016523(),
          CoreBinaryOperator::Plus(None),
          get_016526(),
        ))
      }
      pub(super) fn get_016528() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016529() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_016527() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016528(),
          CoreBinaryOperator::Minus(None),
          get_016529(),
        ))
      }
      pub(super) fn get_016518() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016519(), get_016522(), get_016527()))
      }
      pub(super) fn get_016509() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016510(), get_016513(), get_016518()))
      }
      pub(super) fn get_016533() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_016535() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016536() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_016534() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016535(),
          CoreBinaryOperator::And(None),
          get_016536(),
        ))
      }
      pub(super) fn get_016532() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016533(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016534(),
        ))
      }
      pub(super) fn get_016537() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016531() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016532(),
          CoreBinaryOperator::LessThan(None),
          get_016537(),
        ))
      }
      pub(super) fn get_016539() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016541() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_016542() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_016540() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016541(),
          CoreBinaryOperator::Plus(None),
          get_016542(),
        ))
      }
      pub(super) fn get_016538() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016539(),
          CoreBinaryOperator::Mult(None),
          get_016540(),
        ))
      }
      pub(super) fn get_016546() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016547() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_016545() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016546(), get_016547()))
      }
      pub(super) fn get_016548() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_016550() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_016551() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016549() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016550(), get_016551()]))
      }
      pub(super) fn get_016544() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016545(),
          vec![get_016548(), get_016549()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016543() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016544()))
      }
      pub(super) fn get_016530() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016531(), get_016538(), get_016543()))
      }
      pub(super) fn get_016508() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_016509(),
          )],
          get_016530(),
        ))
      }
      pub(super) fn get_016502() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_016503(),
          )],
          get_016508(),
        ))
      }
      pub(super) fn get_016497() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_016498(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_016500(),
            ),
          ],
          get_016502(),
        ))
      }
      pub(super) fn get_016554() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016555() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_016553() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016554(), get_016555()))
      }
      pub(super) fn get_016556() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_016559() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016560() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_016558() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016559(), get_016560()))
      }
      pub(super) fn get_016561() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_016557() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016558(),
          vec![get_016561()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016562() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016552() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016553(),
          vec![get_016556(), get_016557(), get_016562()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016496() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_016497(),
          )],
          get_016552(),
        ))
      }
      pub(super) fn get_016490() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_016491(),
          )],
          get_016496(),
        ))
      }
      pub(super) fn get_016484() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_016485(),
          )],
          get_016490(),
        ))
      }
      pub(super) fn get_016478() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_016479(),
          )],
          get_016484(),
        ))
      }
      pub(super) fn get_016566() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016567() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_016565() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016566(), get_016567()))
      }
      pub(super) fn get_016568() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_016569() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016564() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016565(),
          vec![get_016568(), get_016569()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016563() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016564()))
      }
      pub(super) fn get_016470() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016471(), get_016478(), get_016563()))
      }
      pub(super) fn get_016465() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_016466(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_016468(),
            ),
          ],
          get_016470(),
        ))
      }
      pub(super) fn get_016570() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_016574() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_016575() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016573() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016574(), get_016575()))
      }
      pub(super) fn get_016577() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_016578() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_016576() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016577(), get_016578()))
      }
      pub(super) fn get_016572() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_016573(),
          )],
          get_016576(),
        ))
      }
      pub(super) fn get_016581() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_016582() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016580() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016581(), get_016582()))
      }
      pub(super) fn get_016583() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_016579() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_016580(),
          )],
          get_016583(),
        ))
      }
      pub(super) fn get_016587() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016588() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_016586() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016587(), get_016588()))
      }
      pub(super) fn get_016589() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016590() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_016585() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016586(),
          vec![get_016589(), get_016590()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016593() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016594() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_016592() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016593(), get_016594()))
      }
      pub(super) fn get_016595() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_016598() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016599() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_016597() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016598(), get_016599()))
      }
      pub(super) fn get_016602() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016603() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_016601() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016602(), get_016603()))
      }
      pub(super) fn get_016604() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_016600() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016601(),
          vec![get_016604()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016607() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_016606() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016607()))
      }
      pub(super) fn get_016610() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_016611() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_016609() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016610(), get_016611()))
      }
      pub(super) fn get_016614() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_016613() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016614()]))
      }
      pub(super) fn get_016612() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016613()]))
      }
      pub(super) fn get_016608() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_016609(),
          )],
          get_016612(),
        ))
      }
      pub(super) fn get_016605() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_016606(),
          )],
          get_016608(),
        ))
      }
      pub(super) fn get_016596() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016597(),
          vec![get_016600(), get_016605()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016591() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016592(),
          vec![get_016595(), get_016596()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016584() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_016585(),
          )],
          get_016591(),
        ))
      }
      pub(super) fn get_016571() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_016572(),
          get_016579(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_016584(),
        ))
      }
      pub(super) fn get_016617() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_016616() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016617()))
      }
      pub(super) fn get_016621() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016622() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_016620() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016621(), get_016622()))
      }
      pub(super) fn get_016623() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 481u32)
        }))
      }
      pub(super) fn get_016619() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016620(),
          vec![get_016623()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016626() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016627() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_016625() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016626(), get_016627()))
      }
      pub(super) fn get_016628() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("l", 482u32)
        }))
      }
      pub(super) fn get_016631() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_016630() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016631()))
      }
      pub(super) fn get_016633() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 481u32)
        }))
      }
      pub(super) fn get_016636() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("l", 482u32)
        }))
      }
      pub(super) fn get_016637() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 483u32)
        }))
      }
      pub(super) fn get_016635() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016636(),
          CoreBinaryOperator::Minus(None),
          get_016637(),
        ))
      }
      pub(super) fn get_016638() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_016634() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016635(),
          CoreBinaryOperator::Minus(None),
          get_016638(),
        ))
      }
      pub(super) fn get_016632() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016633(), get_016634()))
      }
      pub(super) fn get_016629() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 483u32) },
            get_016630(),
          )],
          get_016632(),
        ))
      }
      pub(super) fn get_016624() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016625(),
          vec![get_016628(), get_016629()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016618() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("l", 482u32) },
            get_016619(),
          )],
          get_016624(),
        ))
      }
      pub(super) fn get_016615() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("arr", 481u32) },
            get_016616(),
          )],
          get_016618(),
        ))
      }
      pub(super) fn get_016458() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_016459()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_016460(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_016461(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_016465(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_016570(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_016571(),
            ),
          ],
          get_016615(),
        ))
      }
      pub(super) fn get_016639() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("sort"))
      }
      pub(super) fn get_016641() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_016642() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_016645() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_016644() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016645()))
      }
      pub(super) fn get_016646() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_016643() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_016644(),
          )],
          get_016646(),
        ))
      }
      pub(super) fn get_016649() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_016648() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016649()))
      }
      pub(super) fn get_016651() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_016650() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016651()))
      }
      pub(super) fn get_016655() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016657() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016658() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016656() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016657(),
          CoreBinaryOperator::And(None),
          get_016658(),
        ))
      }
      pub(super) fn get_016654() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016655(),
          CoreBinaryOperator::GreaterThan(None),
          get_016656(),
        ))
      }
      pub(super) fn get_016659() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_016653() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016654(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_016659(),
        ))
      }
      pub(super) fn get_016663() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016664() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016662() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016663(), get_016664()))
      }
      pub(super) fn get_016665() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_016661() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016662(),
          vec![get_016665()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016669() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016670() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016668() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016669(), get_016670()))
      }
      pub(super) fn get_016671() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_016667() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016668(),
          vec![get_016671()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016675() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016676() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016674() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016675(), get_016676()))
      }
      pub(super) fn get_016677() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_016673() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016674(),
          vec![get_016677()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016681() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_016680() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016681()))
      }
      pub(super) fn get_016683() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_016682() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016683()))
      }
      pub(super) fn get_016687() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016688() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_016686() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016687(), get_016688()))
      }
      pub(super) fn get_016689() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_016685() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016686(),
          vec![get_016689()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016693() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016694() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_016692() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016693(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016694(),
        ))
      }
      pub(super) fn get_016697() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016698() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_016696() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016697(),
          CoreBinaryOperator::Minus(None),
          get_016698(),
        ))
      }
      pub(super) fn get_016699() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_016695() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016696(),
          CoreBinaryOperator::Plus(None),
          get_016699(),
        ))
      }
      pub(super) fn get_016702() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016703() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_016701() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016702(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016703(),
        ))
      }
      pub(super) fn get_016706() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016707() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_016705() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016706(),
          CoreBinaryOperator::Minus(None),
          get_016707(),
        ))
      }
      pub(super) fn get_016708() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_016704() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016705(),
          CoreBinaryOperator::Plus(None),
          get_016708(),
        ))
      }
      pub(super) fn get_016710() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_016711() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_016709() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016710(),
          CoreBinaryOperator::Minus(None),
          get_016711(),
        ))
      }
      pub(super) fn get_016700() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016701(), get_016704(), get_016709()))
      }
      pub(super) fn get_016691() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016692(), get_016695(), get_016700()))
      }
      pub(super) fn get_016715() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_016717() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016718() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_016716() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016717(),
          CoreBinaryOperator::And(None),
          get_016718(),
        ))
      }
      pub(super) fn get_016714() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016715(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016716(),
        ))
      }
      pub(super) fn get_016719() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016713() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016714(),
          CoreBinaryOperator::LessThan(None),
          get_016719(),
        ))
      }
      pub(super) fn get_016721() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016723() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_016724() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_016722() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016723(),
          CoreBinaryOperator::Plus(None),
          get_016724(),
        ))
      }
      pub(super) fn get_016720() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016721(),
          CoreBinaryOperator::Mult(None),
          get_016722(),
        ))
      }
      pub(super) fn get_016728() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016729() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_016727() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016728(), get_016729()))
      }
      pub(super) fn get_016730() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_016732() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_016733() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016731() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016732(), get_016733()]))
      }
      pub(super) fn get_016726() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016727(),
          vec![get_016730(), get_016731()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016725() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016726()))
      }
      pub(super) fn get_016712() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016713(), get_016720(), get_016725()))
      }
      pub(super) fn get_016690() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_016691(),
          )],
          get_016712(),
        ))
      }
      pub(super) fn get_016684() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_016685(),
          )],
          get_016690(),
        ))
      }
      pub(super) fn get_016679() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_016680(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_016682(),
            ),
          ],
          get_016684(),
        ))
      }
      pub(super) fn get_016736() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016737() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_016735() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016736(), get_016737()))
      }
      pub(super) fn get_016738() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_016741() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016742() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_016740() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016741(), get_016742()))
      }
      pub(super) fn get_016743() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_016739() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016740(),
          vec![get_016743()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016744() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016734() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016735(),
          vec![get_016738(), get_016739(), get_016744()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016678() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_016679(),
          )],
          get_016734(),
        ))
      }
      pub(super) fn get_016672() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_016673(),
          )],
          get_016678(),
        ))
      }
      pub(super) fn get_016666() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_016667(),
          )],
          get_016672(),
        ))
      }
      pub(super) fn get_016660() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_016661(),
          )],
          get_016666(),
        ))
      }
      pub(super) fn get_016748() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016749() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_016747() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016748(), get_016749()))
      }
      pub(super) fn get_016750() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_016751() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_016746() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016747(),
          vec![get_016750(), get_016751()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016745() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016746()))
      }
      pub(super) fn get_016652() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016653(), get_016660(), get_016745()))
      }
      pub(super) fn get_016647() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_016648(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_016650(),
            ),
          ],
          get_016652(),
        ))
      }
      pub(super) fn get_016752() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_016756() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_016757() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016755() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016756(), get_016757()))
      }
      pub(super) fn get_016759() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_016760() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_016758() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016759(), get_016760()))
      }
      pub(super) fn get_016754() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_016755(),
          )],
          get_016758(),
        ))
      }
      pub(super) fn get_016763() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_016764() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016762() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016763(), get_016764()))
      }
      pub(super) fn get_016765() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_016761() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_016762(),
          )],
          get_016765(),
        ))
      }
      pub(super) fn get_016769() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016770() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_016768() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016769(), get_016770()))
      }
      pub(super) fn get_016771() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016772() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_016767() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016768(),
          vec![get_016771(), get_016772()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016775() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016776() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_016774() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016775(), get_016776()))
      }
      pub(super) fn get_016777() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_016780() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016781() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_016779() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016780(), get_016781()))
      }
      pub(super) fn get_016784() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016785() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_016783() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016784(), get_016785()))
      }
      pub(super) fn get_016786() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_016782() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016783(),
          vec![get_016786()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016789() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_016788() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016789()))
      }
      pub(super) fn get_016792() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_016793() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_016791() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016792(), get_016793()))
      }
      pub(super) fn get_016796() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_016795() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016796()]))
      }
      pub(super) fn get_016794() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016795()]))
      }
      pub(super) fn get_016790() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_016791(),
          )],
          get_016794(),
        ))
      }
      pub(super) fn get_016787() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_016788(),
          )],
          get_016790(),
        ))
      }
      pub(super) fn get_016778() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016779(),
          vec![get_016782(), get_016787()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016773() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016774(),
          vec![get_016777(), get_016778()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016766() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_016767(),
          )],
          get_016773(),
        ))
      }
      pub(super) fn get_016753() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_016754(),
          get_016761(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_016766(),
        ))
      }
      pub(super) fn get_016799() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_016798() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016799()))
      }
      pub(super) fn get_016800() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("id", 4u32)
        }))
      }
      pub(super) fn get_016804() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_016803() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016804()))
      }
      pub(super) fn get_016805() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("id", 4u32)
        }))
      }
      pub(super) fn get_016809() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016810() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_016808() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016809(), get_016810()))
      }
      pub(super) fn get_016811() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 487u32)
        }))
      }
      pub(super) fn get_016807() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016808(),
          vec![get_016811()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016816() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016817() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_016815() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016816(), get_016817()))
      }
      pub(super) fn get_016818() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 487u32)
        }))
      }
      pub(super) fn get_016814() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016815(),
          vec![get_016818()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016819() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_016813() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016814(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_016819(),
        ))
      }
      pub(super) fn get_016820() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 487u32)
        }))
      }
      pub(super) fn get_016822() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016825() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 488u32)
        }))
      }
      pub(super) fn get_016827() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 487u32)
        }))
      }
      pub(super) fn get_016828() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pos", 490u32)
        }))
      }
      pub(super) fn get_016826() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016827(), get_016828()))
      }
      pub(super) fn get_016824() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016825(),
          vec![get_016826()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016832() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016833() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_016831() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016832(), get_016833()))
      }
      pub(super) fn get_016835() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("l", 489u32)
        }))
      }
      pub(super) fn get_016836() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_016834() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016835(),
          CoreBinaryOperator::Minus(None),
          get_016836(),
        ))
      }
      pub(super) fn get_016839() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_016838() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016839()))
      }
      pub(super) fn get_016842() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 493u32)
        }))
      }
      pub(super) fn get_016843() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pos", 490u32)
        }))
      }
      pub(super) fn get_016841() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016842(),
          CoreBinaryOperator::LessThan(None),
          get_016843(),
        ))
      }
      pub(super) fn get_016845() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 487u32)
        }))
      }
      pub(super) fn get_016846() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 493u32)
        }))
      }
      pub(super) fn get_016844() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016845(), get_016846()))
      }
      pub(super) fn get_016848() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 487u32)
        }))
      }
      pub(super) fn get_016850() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 493u32)
        }))
      }
      pub(super) fn get_016851() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_016849() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016850(),
          CoreBinaryOperator::Plus(None),
          get_016851(),
        ))
      }
      pub(super) fn get_016847() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016848(), get_016849()))
      }
      pub(super) fn get_016840() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016841(), get_016844(), get_016847()))
      }
      pub(super) fn get_016837() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 493u32) },
            get_016838(),
          )],
          get_016840(),
        ))
      }
      pub(super) fn get_016830() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016831(),
          vec![get_016834(), get_016837()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016855() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016856() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("filter"))
      }
      pub(super) fn get_016854() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016855(), get_016856()))
      }
      pub(super) fn get_016859() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_016858() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016859()))
      }
      pub(super) fn get_016862() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 488u32)
        }))
      }
      pub(super) fn get_016863() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 495u32)
        }))
      }
      pub(super) fn get_016861() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016862(),
          vec![get_016863()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016864() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pivot", 491u32)
        }))
      }
      pub(super) fn get_016860() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016861(),
          CoreBinaryOperator::LessThan(None),
          get_016864(),
        ))
      }
      pub(super) fn get_016857() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 495u32) },
            get_016858(),
          )],
          get_016860(),
        ))
      }
      pub(super) fn get_016865() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("rest", 492u32)
        }))
      }
      pub(super) fn get_016853() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016854(),
          vec![get_016857(), get_016865()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016869() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016870() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("filter"))
      }
      pub(super) fn get_016868() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016869(), get_016870()))
      }
      pub(super) fn get_016873() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_016872() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016873()))
      }
      pub(super) fn get_016876() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 488u32)
        }))
      }
      pub(super) fn get_016877() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 497u32)
        }))
      }
      pub(super) fn get_016875() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016876(),
          vec![get_016877()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016878() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pivot", 491u32)
        }))
      }
      pub(super) fn get_016874() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016875(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_016878(),
        ))
      }
      pub(super) fn get_016871() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 497u32) },
            get_016872(),
          )],
          get_016874(),
        ))
      }
      pub(super) fn get_016879() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("rest", 492u32)
        }))
      }
      pub(super) fn get_016867() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016868(),
          vec![get_016871(), get_016879()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016883() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("quickSort", 486u32)
        }))
      }
      pub(super) fn get_016884() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("left", 494u32)
        }))
      }
      pub(super) fn get_016885() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 488u32)
        }))
      }
      pub(super) fn get_016882() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016883(),
          vec![get_016884(), get_016885()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016888() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 487u32)
        }))
      }
      pub(super) fn get_016889() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pos", 490u32)
        }))
      }
      pub(super) fn get_016887() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016888(), get_016889()))
      }
      pub(super) fn get_016886() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016887()]))
      }
      pub(super) fn get_016881() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016882(),
          CoreBinaryOperator::Plus(None),
          get_016886(),
        ))
      }
      pub(super) fn get_016891() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("quickSort", 486u32)
        }))
      }
      pub(super) fn get_016892() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("right", 496u32)
        }))
      }
      pub(super) fn get_016893() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 488u32)
        }))
      }
      pub(super) fn get_016890() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016891(),
          vec![get_016892(), get_016893()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016880() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016881(),
          CoreBinaryOperator::Plus(None),
          get_016890(),
        ))
      }
      pub(super) fn get_016866() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("right", 496u32) },
            get_016867(),
          )],
          get_016880(),
        ))
      }
      pub(super) fn get_016852() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("left", 494u32) },
            get_016853(),
          )],
          get_016866(),
        ))
      }
      pub(super) fn get_016829() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("rest", 492u32) },
            get_016830(),
          )],
          get_016852(),
        ))
      }
      pub(super) fn get_016823() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("pivot", 491u32) },
            get_016824(),
          )],
          get_016829(),
        ))
      }
      pub(super) fn get_016821() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("pos", 490u32) },
            get_016822(),
          )],
          get_016823(),
        ))
      }
      pub(super) fn get_016812() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016813(), get_016820(), get_016821()))
      }
      pub(super) fn get_016806() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("l", 489u32) },
            get_016807(),
          )],
          get_016812(),
        ))
      }
      pub(super) fn get_016802() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 487u32) },
              get_016803(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("keyF", 488u32) },
              get_016805(),
            ),
          ],
          get_016806(),
        ))
      }
      pub(super) fn get_016897() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_016896() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016897()))
      }
      pub(super) fn get_016899() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_016898() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016899()))
      }
      pub(super) fn get_016903() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016904() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_016902() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016903(), get_016904()))
      }
      pub(super) fn get_016905() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 499u32)
        }))
      }
      pub(super) fn get_016901() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016902(),
          vec![get_016905()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016908() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016909() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_016907() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016908(), get_016909()))
      }
      pub(super) fn get_016910() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 500u32)
        }))
      }
      pub(super) fn get_016906() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016907(),
          vec![get_016910()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016914() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_016913() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016914()))
      }
      pub(super) fn get_016916() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'j' not bound"))
      }
      pub(super) fn get_016915() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016916()))
      }
      pub(super) fn get_016918() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'prefix' not bound"))
      }
      pub(super) fn get_016917() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_016918()))
      }
      pub(super) fn get_016922() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016923() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_016921() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016922(), get_016923()))
      }
      pub(super) fn get_016924() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 504u32)
        }))
      }
      pub(super) fn get_016925() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("la", 501u32)
        }))
      }
      pub(super) fn get_016920() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016921(),
          vec![get_016924(), get_016925()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016927() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prefix", 506u32)
        }))
      }
      pub(super) fn get_016930() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016931() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_016929() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016930(), get_016931()))
      }
      pub(super) fn get_016932() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 500u32)
        }))
      }
      pub(super) fn get_016933() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 505u32)
        }))
      }
      pub(super) fn get_016934() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_016935() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_016928() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016929(),
          vec![get_016932(), get_016933(), get_016934(), get_016935()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016926() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016927(),
          CoreBinaryOperator::Plus(None),
          get_016928(),
        ))
      }
      pub(super) fn get_016939() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016940() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_016938() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016939(), get_016940()))
      }
      pub(super) fn get_016941() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 505u32)
        }))
      }
      pub(super) fn get_016942() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lb", 502u32)
        }))
      }
      pub(super) fn get_016937() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016938(),
          vec![get_016941(), get_016942()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016944() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prefix", 506u32)
        }))
      }
      pub(super) fn get_016947() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016948() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_016946() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016947(), get_016948()))
      }
      pub(super) fn get_016949() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 499u32)
        }))
      }
      pub(super) fn get_016950() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 504u32)
        }))
      }
      pub(super) fn get_016951() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_016952() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_016945() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016946(),
          vec![get_016949(), get_016950(), get_016951(), get_016952()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016943() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016944(),
          CoreBinaryOperator::Plus(None),
          get_016945(),
        ))
      }
      pub(super) fn get_016956() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 485u32)
        }))
      }
      pub(super) fn get_016958() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 499u32)
        }))
      }
      pub(super) fn get_016959() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 504u32)
        }))
      }
      pub(super) fn get_016957() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016958(), get_016959()))
      }
      pub(super) fn get_016955() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016956(),
          vec![get_016957()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016961() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 485u32)
        }))
      }
      pub(super) fn get_016963() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 500u32)
        }))
      }
      pub(super) fn get_016964() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 505u32)
        }))
      }
      pub(super) fn get_016962() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016963(), get_016964()))
      }
      pub(super) fn get_016960() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016961(),
          vec![get_016962()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016954() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016955(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_016960(),
        ))
      }
      pub(super) fn get_016966() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 503u32)
        }))
      }
      pub(super) fn get_016968() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 504u32)
        }))
      }
      pub(super) fn get_016969() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_016967() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016968(),
          CoreBinaryOperator::Plus(None),
          get_016969(),
        ))
      }
      pub(super) fn get_016970() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 505u32)
        }))
      }
      pub(super) fn get_016972() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prefix", 506u32)
        }))
      }
      pub(super) fn get_016975() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 499u32)
        }))
      }
      pub(super) fn get_016976() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 504u32)
        }))
      }
      pub(super) fn get_016974() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016975(), get_016976()))
      }
      pub(super) fn get_016973() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016974()]))
      }
      pub(super) fn get_016971() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016972(),
          CoreBinaryOperator::Plus(None),
          get_016973(),
        ))
      }
      pub(super) fn get_016965() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016966(),
          vec![get_016967(), get_016970(), get_016971()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_016978() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 503u32)
        }))
      }
      pub(super) fn get_016979() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 504u32)
        }))
      }
      pub(super) fn get_016981() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 505u32)
        }))
      }
      pub(super) fn get_016982() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_016980() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016981(),
          CoreBinaryOperator::Plus(None),
          get_016982(),
        ))
      }
      pub(super) fn get_016984() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("prefix", 506u32)
        }))
      }
      pub(super) fn get_016987() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 500u32)
        }))
      }
      pub(super) fn get_016988() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 505u32)
        }))
      }
      pub(super) fn get_016986() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016987(), get_016988()))
      }
      pub(super) fn get_016985() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_016986()]))
      }
      pub(super) fn get_016983() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_016984(),
          CoreBinaryOperator::Plus(None),
          get_016985(),
        ))
      }
      pub(super) fn get_016977() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016978(),
          vec![get_016979(), get_016980(), get_016983()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_016953() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016954(), get_016965(), get_016977()))
      }
      pub(super) fn get_016936() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016937(), get_016943(), get_016953()))
      }
      pub(super) fn get_016919() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_016920(), get_016926(), get_016936()))
      }
      pub(super) fn get_016912() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 504u32) },
              get_016913(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("j", 505u32) },
              get_016915(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("prefix", 506u32) },
              get_016917(),
            ),
          ],
          get_016919(),
        ))
      }
      pub(super) fn get_016990() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 503u32)
        }))
      }
      pub(super) fn get_016991() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016992() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_016993() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_016989() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016990(),
          vec![get_016991(), get_016992(), get_016993()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_016911() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 503u32) },
            get_016912(),
          )],
          get_016989(),
        ))
      }
      pub(super) fn get_016900() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("la", 501u32) },
              get_016901(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("lb", 502u32) },
              get_016906(),
            ),
          ],
          get_016911(),
        ))
      }
      pub(super) fn get_016895() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 499u32) },
              get_016896(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 500u32) },
              get_016898(),
            ),
          ],
          get_016900(),
        ))
      }
      pub(super) fn get_016997() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_016998() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_016996() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_016997(), get_016998()))
      }
      pub(super) fn get_016999() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 484u32)
        }))
      }
      pub(super) fn get_016995() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_016996(),
          vec![get_016999()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017004() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017005() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_017003() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017004(), get_017005()))
      }
      pub(super) fn get_017006() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 484u32)
        }))
      }
      pub(super) fn get_017002() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017003(),
          vec![get_017006()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017007() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(30f64))
      }
      pub(super) fn get_017001() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017002(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_017007(),
        ))
      }
      pub(super) fn get_017009() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("quickSort", 486u32)
        }))
      }
      pub(super) fn get_017010() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 484u32)
        }))
      }
      pub(super) fn get_017011() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 485u32)
        }))
      }
      pub(super) fn get_017008() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017009(),
          vec![get_017010()],
          vec![CoreNamedArg::new("keyF", get_017011())],
          false,
        ))
      }
      pub(super) fn get_017015() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017016() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("floor"))
      }
      pub(super) fn get_017014() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017015(), get_017016()))
      }
      pub(super) fn get_017018() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("l", 507u32)
        }))
      }
      pub(super) fn get_017019() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(2f64))
      }
      pub(super) fn get_017017() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017018(),
          CoreBinaryOperator::Div(None),
          get_017019(),
        ))
      }
      pub(super) fn get_017013() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017014(),
          vec![get_017017()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017023() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017024() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_017022() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017023(), get_017024()))
      }
      pub(super) fn get_017025() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 484u32)
        }))
      }
      pub(super) fn get_017026() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_017027() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("mid", 508u32)
        }))
      }
      pub(super) fn get_017028() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_017021() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017022(),
          vec![get_017025(), get_017026(), get_017027(), get_017028()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017031() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017032() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_017030() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017031(), get_017032()))
      }
      pub(super) fn get_017033() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 484u32)
        }))
      }
      pub(super) fn get_017034() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("mid", 508u32)
        }))
      }
      pub(super) fn get_017035() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_017036() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_017029() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017030(),
          vec![get_017033(), get_017034(), get_017035(), get_017036()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017038() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("merge", 498u32)
        }))
      }
      pub(super) fn get_017041() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017042() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("sort"))
      }
      pub(super) fn get_017040() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017041(), get_017042()))
      }
      pub(super) fn get_017043() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("left", 509u32)
        }))
      }
      pub(super) fn get_017044() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 485u32)
        }))
      }
      pub(super) fn get_017039() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017040(),
          vec![get_017043()],
          vec![CoreNamedArg::new("keyF", get_017044())],
          false,
        ))
      }
      pub(super) fn get_017047() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017048() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("sort"))
      }
      pub(super) fn get_017046() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017047(), get_017048()))
      }
      pub(super) fn get_017049() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("right", 510u32)
        }))
      }
      pub(super) fn get_017050() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 485u32)
        }))
      }
      pub(super) fn get_017045() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017046(),
          vec![get_017049()],
          vec![CoreNamedArg::new("keyF", get_017050())],
          false,
        ))
      }
      pub(super) fn get_017037() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017038(),
          vec![get_017039(), get_017045()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017020() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("left", 509u32) },
              get_017021(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("right", 510u32) },
              get_017029(),
            ),
          ],
          get_017037(),
        ))
      }
      pub(super) fn get_017012() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("mid", 508u32) },
            get_017013(),
          )],
          get_017020(),
        ))
      }
      pub(super) fn get_017000() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017001(), get_017008(), get_017012()))
      }
      pub(super) fn get_016994() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("l", 507u32) },
            get_016995(),
          )],
          get_017000(),
        ))
      }
      pub(super) fn get_016894() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("merge", 498u32) },
            get_016895(),
          )],
          get_016994(),
        ))
      }
      pub(super) fn get_016801() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("quickSort", 486u32) },
            get_016802(),
          )],
          get_016894(),
        ))
      }
      pub(super) fn get_016797() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 484u32) },
              get_016798(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("keyF", 485u32) },
              get_016800(),
            ),
          ],
          get_016801(),
        ))
      }
      pub(super) fn get_016640() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_016641()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_016642(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_016643(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_016647(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_016752(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_016753(),
            ),
          ],
          get_016797(),
        ))
      }
      pub(super) fn get_017051() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("uniq"))
      }
      pub(super) fn get_017053() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_017054() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_017057() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_017056() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017057()))
      }
      pub(super) fn get_017058() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_017055() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_017056(),
          )],
          get_017058(),
        ))
      }
      pub(super) fn get_017061() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_017060() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017061()))
      }
      pub(super) fn get_017063() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_017062() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017063()))
      }
      pub(super) fn get_017067() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017069() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017070() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017068() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017069(),
          CoreBinaryOperator::And(None),
          get_017070(),
        ))
      }
      pub(super) fn get_017066() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017067(),
          CoreBinaryOperator::GreaterThan(None),
          get_017068(),
        ))
      }
      pub(super) fn get_017071() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_017065() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017066(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_017071(),
        ))
      }
      pub(super) fn get_017075() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017076() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017074() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017075(), get_017076()))
      }
      pub(super) fn get_017077() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_017073() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017074(),
          vec![get_017077()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017081() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017082() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017080() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017081(), get_017082()))
      }
      pub(super) fn get_017083() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_017079() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017080(),
          vec![get_017083()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017087() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017088() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017086() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017087(), get_017088()))
      }
      pub(super) fn get_017089() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_017085() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017086(),
          vec![get_017089()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017093() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_017092() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017093()))
      }
      pub(super) fn get_017095() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_017094() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017095()))
      }
      pub(super) fn get_017099() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017100() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017098() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017099(), get_017100()))
      }
      pub(super) fn get_017101() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_017097() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017098(),
          vec![get_017101()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017105() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017106() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_017104() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017105(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017106(),
        ))
      }
      pub(super) fn get_017109() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017110() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_017108() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017109(),
          CoreBinaryOperator::Minus(None),
          get_017110(),
        ))
      }
      pub(super) fn get_017111() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_017107() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017108(),
          CoreBinaryOperator::Plus(None),
          get_017111(),
        ))
      }
      pub(super) fn get_017114() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017115() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_017113() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017114(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017115(),
        ))
      }
      pub(super) fn get_017118() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017119() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_017117() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017118(),
          CoreBinaryOperator::Minus(None),
          get_017119(),
        ))
      }
      pub(super) fn get_017120() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_017116() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017117(),
          CoreBinaryOperator::Plus(None),
          get_017120(),
        ))
      }
      pub(super) fn get_017122() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017123() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_017121() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017122(),
          CoreBinaryOperator::Minus(None),
          get_017123(),
        ))
      }
      pub(super) fn get_017112() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017113(), get_017116(), get_017121()))
      }
      pub(super) fn get_017103() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017104(), get_017107(), get_017112()))
      }
      pub(super) fn get_017127() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017129() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017130() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017128() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017129(),
          CoreBinaryOperator::And(None),
          get_017130(),
        ))
      }
      pub(super) fn get_017126() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017127(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017128(),
        ))
      }
      pub(super) fn get_017131() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017125() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017126(),
          CoreBinaryOperator::LessThan(None),
          get_017131(),
        ))
      }
      pub(super) fn get_017133() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017135() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_017136() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017134() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017135(),
          CoreBinaryOperator::Plus(None),
          get_017136(),
        ))
      }
      pub(super) fn get_017132() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017133(),
          CoreBinaryOperator::Mult(None),
          get_017134(),
        ))
      }
      pub(super) fn get_017140() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017141() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_017139() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017140(), get_017141()))
      }
      pub(super) fn get_017142() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_017144() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_017145() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017143() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017144(), get_017145()]))
      }
      pub(super) fn get_017138() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017139(),
          vec![get_017142(), get_017143()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017137() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017138()))
      }
      pub(super) fn get_017124() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017125(), get_017132(), get_017137()))
      }
      pub(super) fn get_017102() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_017103(),
          )],
          get_017124(),
        ))
      }
      pub(super) fn get_017096() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_017097(),
          )],
          get_017102(),
        ))
      }
      pub(super) fn get_017091() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_017092(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_017094(),
            ),
          ],
          get_017096(),
        ))
      }
      pub(super) fn get_017148() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017149() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_017147() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017148(), get_017149()))
      }
      pub(super) fn get_017150() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_017153() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017154() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_017152() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017153(), get_017154()))
      }
      pub(super) fn get_017155() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_017151() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017152(),
          vec![get_017155()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017156() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017146() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017147(),
          vec![get_017150(), get_017151(), get_017156()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017090() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_017091(),
          )],
          get_017146(),
        ))
      }
      pub(super) fn get_017084() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_017085(),
          )],
          get_017090(),
        ))
      }
      pub(super) fn get_017078() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_017079(),
          )],
          get_017084(),
        ))
      }
      pub(super) fn get_017072() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_017073(),
          )],
          get_017078(),
        ))
      }
      pub(super) fn get_017160() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017161() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_017159() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017160(), get_017161()))
      }
      pub(super) fn get_017162() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_017163() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017158() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017159(),
          vec![get_017162(), get_017163()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017157() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017158()))
      }
      pub(super) fn get_017064() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017065(), get_017072(), get_017157()))
      }
      pub(super) fn get_017059() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_017060(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_017062(),
            ),
          ],
          get_017064(),
        ))
      }
      pub(super) fn get_017164() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_017168() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_017169() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017167() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017168(), get_017169()))
      }
      pub(super) fn get_017171() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_017172() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_017170() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017171(), get_017172()))
      }
      pub(super) fn get_017166() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_017167(),
          )],
          get_017170(),
        ))
      }
      pub(super) fn get_017175() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_017176() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017174() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017175(), get_017176()))
      }
      pub(super) fn get_017177() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_017173() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_017174(),
          )],
          get_017177(),
        ))
      }
      pub(super) fn get_017181() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017182() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_017180() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017181(), get_017182()))
      }
      pub(super) fn get_017183() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017184() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_017179() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017180(),
          vec![get_017183(), get_017184()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017187() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017188() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_017186() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017187(), get_017188()))
      }
      pub(super) fn get_017189() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_017192() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017193() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_017191() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017192(), get_017193()))
      }
      pub(super) fn get_017196() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017197() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_017195() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017196(), get_017197()))
      }
      pub(super) fn get_017198() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_017194() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017195(),
          vec![get_017198()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017201() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_017200() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017201()))
      }
      pub(super) fn get_017204() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_017205() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_017203() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017204(), get_017205()))
      }
      pub(super) fn get_017208() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_017207() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017208()]))
      }
      pub(super) fn get_017206() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017207()]))
      }
      pub(super) fn get_017202() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_017203(),
          )],
          get_017206(),
        ))
      }
      pub(super) fn get_017199() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_017200(),
          )],
          get_017202(),
        ))
      }
      pub(super) fn get_017190() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017191(),
          vec![get_017194(), get_017199()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017185() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017186(),
          vec![get_017189(), get_017190()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017178() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_017179(),
          )],
          get_017185(),
        ))
      }
      pub(super) fn get_017165() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_017166(),
          get_017173(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_017178(),
        ))
      }
      pub(super) fn get_017211() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_017210() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017211()))
      }
      pub(super) fn get_017212() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("id", 4u32)
        }))
      }
      pub(super) fn get_017216() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_017215() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017216()))
      }
      pub(super) fn get_017218() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_017217() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017218()))
      }
      pub(super) fn get_017222() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017223() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_017221() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017222(), get_017223()))
      }
      pub(super) fn get_017226() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017227() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_017225() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017226(), get_017227()))
      }
      pub(super) fn get_017228() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 514u32)
        }))
      }
      pub(super) fn get_017224() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017225(),
          vec![get_017228()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017229() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017220() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017221(),
          vec![get_017224(), get_017229()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017231() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 515u32)
        }))
      }
      pub(super) fn get_017230() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017231()]))
      }
      pub(super) fn get_017235() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017236() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_017234() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017235(), get_017236()))
      }
      pub(super) fn get_017238() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 512u32)
        }))
      }
      pub(super) fn get_017240() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 514u32)
        }))
      }
      pub(super) fn get_017244() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017245() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_017243() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017244(), get_017245()))
      }
      pub(super) fn get_017246() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 514u32)
        }))
      }
      pub(super) fn get_017242() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017243(),
          vec![get_017246()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017247() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_017241() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017242(),
          CoreBinaryOperator::Minus(None),
          get_017247(),
        ))
      }
      pub(super) fn get_017239() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017240(), get_017241()))
      }
      pub(super) fn get_017237() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017238(),
          vec![get_017239()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017249() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 512u32)
        }))
      }
      pub(super) fn get_017250() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 515u32)
        }))
      }
      pub(super) fn get_017248() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017249(),
          vec![get_017250()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017233() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017234(),
          vec![get_017237(), get_017248()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017251() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 514u32)
        }))
      }
      pub(super) fn get_017253() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 514u32)
        }))
      }
      pub(super) fn get_017255() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 515u32)
        }))
      }
      pub(super) fn get_017254() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017255()]))
      }
      pub(super) fn get_017252() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017253(),
          CoreBinaryOperator::Plus(None),
          get_017254(),
        ))
      }
      pub(super) fn get_017232() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017233(), get_017251(), get_017252()))
      }
      pub(super) fn get_017219() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017220(), get_017230(), get_017232()))
      }
      pub(super) fn get_017214() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 514u32) },
              get_017215(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 515u32) },
              get_017217(),
            ),
          ],
          get_017219(),
        ))
      }
      pub(super) fn get_017258() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017259() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_017257() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017258(), get_017259()))
      }
      pub(super) fn get_017260() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("f", 513u32)
        }))
      }
      pub(super) fn get_017261() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 511u32)
        }))
      }
      pub(super) fn get_017262() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_017256() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017257(),
          vec![get_017260(), get_017261(), get_017262()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017213() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("f", 513u32) },
            get_017214(),
          )],
          get_017256(),
        ))
      }
      pub(super) fn get_017209() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 511u32) },
              get_017210(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("keyF", 512u32) },
              get_017212(),
            ),
          ],
          get_017213(),
        ))
      }
      pub(super) fn get_017052() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_017053()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_017054(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_017055(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_017059(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_017164(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_017165(),
            ),
          ],
          get_017209(),
        ))
      }
      pub(super) fn get_017263() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("set"))
      }
      pub(super) fn get_017265() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_017266() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_017269() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_017268() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017269()))
      }
      pub(super) fn get_017270() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_017267() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_017268(),
          )],
          get_017270(),
        ))
      }
      pub(super) fn get_017273() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_017272() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017273()))
      }
      pub(super) fn get_017275() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_017274() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017275()))
      }
      pub(super) fn get_017279() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017281() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017282() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017280() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017281(),
          CoreBinaryOperator::And(None),
          get_017282(),
        ))
      }
      pub(super) fn get_017278() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017279(),
          CoreBinaryOperator::GreaterThan(None),
          get_017280(),
        ))
      }
      pub(super) fn get_017283() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_017277() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017278(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_017283(),
        ))
      }
      pub(super) fn get_017287() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017288() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017286() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017287(), get_017288()))
      }
      pub(super) fn get_017289() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_017285() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017286(),
          vec![get_017289()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017293() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017294() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017292() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017293(), get_017294()))
      }
      pub(super) fn get_017295() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_017291() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017292(),
          vec![get_017295()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017299() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017300() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017298() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017299(), get_017300()))
      }
      pub(super) fn get_017301() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_017297() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017298(),
          vec![get_017301()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017305() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_017304() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017305()))
      }
      pub(super) fn get_017307() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_017306() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017307()))
      }
      pub(super) fn get_017311() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017312() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017310() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017311(), get_017312()))
      }
      pub(super) fn get_017313() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_017309() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017310(),
          vec![get_017313()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017317() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017318() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_017316() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017317(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017318(),
        ))
      }
      pub(super) fn get_017321() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017322() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_017320() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017321(),
          CoreBinaryOperator::Minus(None),
          get_017322(),
        ))
      }
      pub(super) fn get_017323() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_017319() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017320(),
          CoreBinaryOperator::Plus(None),
          get_017323(),
        ))
      }
      pub(super) fn get_017326() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017327() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_017325() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017326(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017327(),
        ))
      }
      pub(super) fn get_017330() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017331() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_017329() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017330(),
          CoreBinaryOperator::Minus(None),
          get_017331(),
        ))
      }
      pub(super) fn get_017332() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_017328() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017329(),
          CoreBinaryOperator::Plus(None),
          get_017332(),
        ))
      }
      pub(super) fn get_017334() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017335() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_017333() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017334(),
          CoreBinaryOperator::Minus(None),
          get_017335(),
        ))
      }
      pub(super) fn get_017324() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017325(), get_017328(), get_017333()))
      }
      pub(super) fn get_017315() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017316(), get_017319(), get_017324()))
      }
      pub(super) fn get_017339() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017341() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017342() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017340() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017341(),
          CoreBinaryOperator::And(None),
          get_017342(),
        ))
      }
      pub(super) fn get_017338() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017339(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017340(),
        ))
      }
      pub(super) fn get_017343() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017337() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017338(),
          CoreBinaryOperator::LessThan(None),
          get_017343(),
        ))
      }
      pub(super) fn get_017345() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017347() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_017348() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017346() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017347(),
          CoreBinaryOperator::Plus(None),
          get_017348(),
        ))
      }
      pub(super) fn get_017344() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017345(),
          CoreBinaryOperator::Mult(None),
          get_017346(),
        ))
      }
      pub(super) fn get_017352() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017353() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_017351() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017352(), get_017353()))
      }
      pub(super) fn get_017354() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_017356() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_017357() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017355() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017356(), get_017357()]))
      }
      pub(super) fn get_017350() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017351(),
          vec![get_017354(), get_017355()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017349() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017350()))
      }
      pub(super) fn get_017336() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017337(), get_017344(), get_017349()))
      }
      pub(super) fn get_017314() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_017315(),
          )],
          get_017336(),
        ))
      }
      pub(super) fn get_017308() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_017309(),
          )],
          get_017314(),
        ))
      }
      pub(super) fn get_017303() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_017304(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_017306(),
            ),
          ],
          get_017308(),
        ))
      }
      pub(super) fn get_017360() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017361() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_017359() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017360(), get_017361()))
      }
      pub(super) fn get_017362() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_017365() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017366() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_017364() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017365(), get_017366()))
      }
      pub(super) fn get_017367() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_017363() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017364(),
          vec![get_017367()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017368() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017358() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017359(),
          vec![get_017362(), get_017363(), get_017368()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017302() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_017303(),
          )],
          get_017358(),
        ))
      }
      pub(super) fn get_017296() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_017297(),
          )],
          get_017302(),
        ))
      }
      pub(super) fn get_017290() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_017291(),
          )],
          get_017296(),
        ))
      }
      pub(super) fn get_017284() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_017285(),
          )],
          get_017290(),
        ))
      }
      pub(super) fn get_017372() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017373() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_017371() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017372(), get_017373()))
      }
      pub(super) fn get_017374() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_017375() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017370() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017371(),
          vec![get_017374(), get_017375()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017369() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017370()))
      }
      pub(super) fn get_017276() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017277(), get_017284(), get_017369()))
      }
      pub(super) fn get_017271() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_017272(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_017274(),
            ),
          ],
          get_017276(),
        ))
      }
      pub(super) fn get_017376() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_017380() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_017381() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017379() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017380(), get_017381()))
      }
      pub(super) fn get_017383() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_017384() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_017382() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017383(), get_017384()))
      }
      pub(super) fn get_017378() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_017379(),
          )],
          get_017382(),
        ))
      }
      pub(super) fn get_017387() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_017388() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017386() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017387(), get_017388()))
      }
      pub(super) fn get_017389() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_017385() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_017386(),
          )],
          get_017389(),
        ))
      }
      pub(super) fn get_017393() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017394() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_017392() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017393(), get_017394()))
      }
      pub(super) fn get_017395() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017396() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_017391() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017392(),
          vec![get_017395(), get_017396()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017399() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017400() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_017398() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017399(), get_017400()))
      }
      pub(super) fn get_017401() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_017404() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017405() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_017403() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017404(), get_017405()))
      }
      pub(super) fn get_017408() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017409() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_017407() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017408(), get_017409()))
      }
      pub(super) fn get_017410() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_017406() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017407(),
          vec![get_017410()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017413() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_017412() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017413()))
      }
      pub(super) fn get_017416() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_017417() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_017415() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017416(), get_017417()))
      }
      pub(super) fn get_017420() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_017419() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017420()]))
      }
      pub(super) fn get_017418() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017419()]))
      }
      pub(super) fn get_017414() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_017415(),
          )],
          get_017418(),
        ))
      }
      pub(super) fn get_017411() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_017412(),
          )],
          get_017414(),
        ))
      }
      pub(super) fn get_017402() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017403(),
          vec![get_017406(), get_017411()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017397() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017398(),
          vec![get_017401(), get_017402()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017390() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_017391(),
          )],
          get_017397(),
        ))
      }
      pub(super) fn get_017377() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_017378(),
          get_017385(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_017390(),
        ))
      }
      pub(super) fn get_017423() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_017422() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017423()))
      }
      pub(super) fn get_017424() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("id", 4u32)
        }))
      }
      pub(super) fn get_017427() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017428() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("uniq"))
      }
      pub(super) fn get_017426() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017427(), get_017428()))
      }
      pub(super) fn get_017431() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017432() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("sort"))
      }
      pub(super) fn get_017430() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017431(), get_017432()))
      }
      pub(super) fn get_017433() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 516u32)
        }))
      }
      pub(super) fn get_017434() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 517u32)
        }))
      }
      pub(super) fn get_017429() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017430(),
          vec![get_017433(), get_017434()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017435() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 517u32)
        }))
      }
      pub(super) fn get_017425() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017426(),
          vec![get_017429(), get_017435()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017421() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 516u32) },
              get_017422(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("keyF", 517u32) },
              get_017424(),
            ),
          ],
          get_017425(),
        ))
      }
      pub(super) fn get_017264() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_017265()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_017266(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_017267(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_017271(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_017376(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_017377(),
            ),
          ],
          get_017421(),
        ))
      }
      pub(super) fn get_017436() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("setMember"))
      }
      pub(super) fn get_017438() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_017439() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_017442() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_017441() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017442()))
      }
      pub(super) fn get_017443() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_017440() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_017441(),
          )],
          get_017443(),
        ))
      }
      pub(super) fn get_017446() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_017445() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017446()))
      }
      pub(super) fn get_017448() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_017447() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017448()))
      }
      pub(super) fn get_017452() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017454() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017455() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017453() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017454(),
          CoreBinaryOperator::And(None),
          get_017455(),
        ))
      }
      pub(super) fn get_017451() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017452(),
          CoreBinaryOperator::GreaterThan(None),
          get_017453(),
        ))
      }
      pub(super) fn get_017456() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_017450() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017451(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_017456(),
        ))
      }
      pub(super) fn get_017460() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017461() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017459() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017460(), get_017461()))
      }
      pub(super) fn get_017462() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_017458() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017459(),
          vec![get_017462()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017466() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017467() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017465() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017466(), get_017467()))
      }
      pub(super) fn get_017468() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_017464() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017465(),
          vec![get_017468()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017472() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017473() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017471() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017472(), get_017473()))
      }
      pub(super) fn get_017474() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_017470() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017471(),
          vec![get_017474()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017478() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_017477() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017478()))
      }
      pub(super) fn get_017480() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_017479() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017480()))
      }
      pub(super) fn get_017484() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017485() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017483() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017484(), get_017485()))
      }
      pub(super) fn get_017486() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_017482() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017483(),
          vec![get_017486()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017490() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017491() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_017489() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017490(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017491(),
        ))
      }
      pub(super) fn get_017494() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017495() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_017493() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017494(),
          CoreBinaryOperator::Minus(None),
          get_017495(),
        ))
      }
      pub(super) fn get_017496() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_017492() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017493(),
          CoreBinaryOperator::Plus(None),
          get_017496(),
        ))
      }
      pub(super) fn get_017499() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017500() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_017498() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017499(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017500(),
        ))
      }
      pub(super) fn get_017503() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017504() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_017502() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017503(),
          CoreBinaryOperator::Minus(None),
          get_017504(),
        ))
      }
      pub(super) fn get_017505() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_017501() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017502(),
          CoreBinaryOperator::Plus(None),
          get_017505(),
        ))
      }
      pub(super) fn get_017507() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017508() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_017506() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017507(),
          CoreBinaryOperator::Minus(None),
          get_017508(),
        ))
      }
      pub(super) fn get_017497() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017498(), get_017501(), get_017506()))
      }
      pub(super) fn get_017488() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017489(), get_017492(), get_017497()))
      }
      pub(super) fn get_017512() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017514() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017515() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017513() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017514(),
          CoreBinaryOperator::And(None),
          get_017515(),
        ))
      }
      pub(super) fn get_017511() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017512(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017513(),
        ))
      }
      pub(super) fn get_017516() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017510() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017511(),
          CoreBinaryOperator::LessThan(None),
          get_017516(),
        ))
      }
      pub(super) fn get_017518() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017520() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_017521() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017519() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017520(),
          CoreBinaryOperator::Plus(None),
          get_017521(),
        ))
      }
      pub(super) fn get_017517() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017518(),
          CoreBinaryOperator::Mult(None),
          get_017519(),
        ))
      }
      pub(super) fn get_017525() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017526() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_017524() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017525(), get_017526()))
      }
      pub(super) fn get_017527() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_017529() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_017530() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017528() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017529(), get_017530()]))
      }
      pub(super) fn get_017523() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017524(),
          vec![get_017527(), get_017528()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017522() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017523()))
      }
      pub(super) fn get_017509() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017510(), get_017517(), get_017522()))
      }
      pub(super) fn get_017487() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_017488(),
          )],
          get_017509(),
        ))
      }
      pub(super) fn get_017481() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_017482(),
          )],
          get_017487(),
        ))
      }
      pub(super) fn get_017476() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_017477(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_017479(),
            ),
          ],
          get_017481(),
        ))
      }
      pub(super) fn get_017533() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017534() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_017532() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017533(), get_017534()))
      }
      pub(super) fn get_017535() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_017538() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017539() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_017537() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017538(), get_017539()))
      }
      pub(super) fn get_017540() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_017536() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017537(),
          vec![get_017540()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017541() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017531() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017532(),
          vec![get_017535(), get_017536(), get_017541()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017475() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_017476(),
          )],
          get_017531(),
        ))
      }
      pub(super) fn get_017469() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_017470(),
          )],
          get_017475(),
        ))
      }
      pub(super) fn get_017463() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_017464(),
          )],
          get_017469(),
        ))
      }
      pub(super) fn get_017457() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_017458(),
          )],
          get_017463(),
        ))
      }
      pub(super) fn get_017545() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017546() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_017544() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017545(), get_017546()))
      }
      pub(super) fn get_017547() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_017548() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017543() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017544(),
          vec![get_017547(), get_017548()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017542() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017543()))
      }
      pub(super) fn get_017449() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017450(), get_017457(), get_017542()))
      }
      pub(super) fn get_017444() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_017445(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_017447(),
            ),
          ],
          get_017449(),
        ))
      }
      pub(super) fn get_017549() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_017553() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_017554() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017552() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017553(), get_017554()))
      }
      pub(super) fn get_017556() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_017557() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_017555() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017556(), get_017557()))
      }
      pub(super) fn get_017551() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_017552(),
          )],
          get_017555(),
        ))
      }
      pub(super) fn get_017560() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_017561() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017559() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017560(), get_017561()))
      }
      pub(super) fn get_017562() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_017558() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_017559(),
          )],
          get_017562(),
        ))
      }
      pub(super) fn get_017566() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017567() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_017565() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017566(), get_017567()))
      }
      pub(super) fn get_017568() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017569() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_017564() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017565(),
          vec![get_017568(), get_017569()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017572() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017573() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_017571() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017572(), get_017573()))
      }
      pub(super) fn get_017574() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_017577() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017578() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_017576() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017577(), get_017578()))
      }
      pub(super) fn get_017581() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017582() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_017580() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017581(), get_017582()))
      }
      pub(super) fn get_017583() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_017579() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017580(),
          vec![get_017583()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017586() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_017585() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017586()))
      }
      pub(super) fn get_017589() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_017590() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_017588() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017589(), get_017590()))
      }
      pub(super) fn get_017593() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_017592() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017593()]))
      }
      pub(super) fn get_017591() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017592()]))
      }
      pub(super) fn get_017587() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_017588(),
          )],
          get_017591(),
        ))
      }
      pub(super) fn get_017584() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_017585(),
          )],
          get_017587(),
        ))
      }
      pub(super) fn get_017575() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017576(),
          vec![get_017579(), get_017584()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017570() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017571(),
          vec![get_017574(), get_017575()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017563() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_017564(),
          )],
          get_017570(),
        ))
      }
      pub(super) fn get_017550() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_017551(),
          get_017558(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_017563(),
        ))
      }
      pub(super) fn get_017596() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_017595() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017596()))
      }
      pub(super) fn get_017598() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_017597() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017598()))
      }
      pub(super) fn get_017599() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("id", 4u32)
        }))
      }
      pub(super) fn get_017603() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017604() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_017602() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017603(), get_017604()))
      }
      pub(super) fn get_017607() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017608() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("setInter"))
      }
      pub(super) fn get_017606() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017607(), get_017608()))
      }
      pub(super) fn get_017610() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 518u32)
        }))
      }
      pub(super) fn get_017609() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017610()]))
      }
      pub(super) fn get_017611() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 519u32)
        }))
      }
      pub(super) fn get_017612() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 520u32)
        }))
      }
      pub(super) fn get_017605() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017606(),
          vec![get_017609(), get_017611(), get_017612()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017601() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017602(),
          vec![get_017605()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017613() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017600() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017601(),
          CoreBinaryOperator::GreaterThan(None),
          get_017613(),
        ))
      }
      pub(super) fn get_017594() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("x", 518u32) },
              get_017595(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 519u32) },
              get_017597(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("keyF", 520u32) },
              get_017599(),
            ),
          ],
          get_017600(),
        ))
      }
      pub(super) fn get_017437() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_017438()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_017439(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_017440(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_017444(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_017549(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_017550(),
            ),
          ],
          get_017594(),
        ))
      }
      pub(super) fn get_017614() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("setUnion"))
      }
      pub(super) fn get_017616() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_017617() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_017620() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_017619() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017620()))
      }
      pub(super) fn get_017621() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_017618() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_017619(),
          )],
          get_017621(),
        ))
      }
      pub(super) fn get_017624() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_017623() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017624()))
      }
      pub(super) fn get_017626() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_017625() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017626()))
      }
      pub(super) fn get_017630() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017632() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017633() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017631() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017632(),
          CoreBinaryOperator::And(None),
          get_017633(),
        ))
      }
      pub(super) fn get_017629() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017630(),
          CoreBinaryOperator::GreaterThan(None),
          get_017631(),
        ))
      }
      pub(super) fn get_017634() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_017628() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017629(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_017634(),
        ))
      }
      pub(super) fn get_017638() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017639() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017637() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017638(), get_017639()))
      }
      pub(super) fn get_017640() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_017636() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017637(),
          vec![get_017640()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017644() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017645() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017643() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017644(), get_017645()))
      }
      pub(super) fn get_017646() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_017642() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017643(),
          vec![get_017646()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017650() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017651() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017649() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017650(), get_017651()))
      }
      pub(super) fn get_017652() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_017648() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017649(),
          vec![get_017652()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017656() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_017655() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017656()))
      }
      pub(super) fn get_017658() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_017657() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017658()))
      }
      pub(super) fn get_017662() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017663() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017661() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017662(), get_017663()))
      }
      pub(super) fn get_017664() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_017660() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017661(),
          vec![get_017664()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017668() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017669() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_017667() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017668(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017669(),
        ))
      }
      pub(super) fn get_017672() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017673() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_017671() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017672(),
          CoreBinaryOperator::Minus(None),
          get_017673(),
        ))
      }
      pub(super) fn get_017674() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_017670() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017671(),
          CoreBinaryOperator::Plus(None),
          get_017674(),
        ))
      }
      pub(super) fn get_017677() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017678() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_017676() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017677(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017678(),
        ))
      }
      pub(super) fn get_017681() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017682() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_017680() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017681(),
          CoreBinaryOperator::Minus(None),
          get_017682(),
        ))
      }
      pub(super) fn get_017683() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_017679() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017680(),
          CoreBinaryOperator::Plus(None),
          get_017683(),
        ))
      }
      pub(super) fn get_017685() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017686() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_017684() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017685(),
          CoreBinaryOperator::Minus(None),
          get_017686(),
        ))
      }
      pub(super) fn get_017675() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017676(), get_017679(), get_017684()))
      }
      pub(super) fn get_017666() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017667(), get_017670(), get_017675()))
      }
      pub(super) fn get_017690() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017692() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017693() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017691() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017692(),
          CoreBinaryOperator::And(None),
          get_017693(),
        ))
      }
      pub(super) fn get_017689() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017690(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017691(),
        ))
      }
      pub(super) fn get_017694() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017688() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017689(),
          CoreBinaryOperator::LessThan(None),
          get_017694(),
        ))
      }
      pub(super) fn get_017696() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017698() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_017699() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017697() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017698(),
          CoreBinaryOperator::Plus(None),
          get_017699(),
        ))
      }
      pub(super) fn get_017695() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017696(),
          CoreBinaryOperator::Mult(None),
          get_017697(),
        ))
      }
      pub(super) fn get_017703() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017704() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_017702() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017703(), get_017704()))
      }
      pub(super) fn get_017705() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_017707() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_017708() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017706() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017707(), get_017708()]))
      }
      pub(super) fn get_017701() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017702(),
          vec![get_017705(), get_017706()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017700() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017701()))
      }
      pub(super) fn get_017687() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017688(), get_017695(), get_017700()))
      }
      pub(super) fn get_017665() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_017666(),
          )],
          get_017687(),
        ))
      }
      pub(super) fn get_017659() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_017660(),
          )],
          get_017665(),
        ))
      }
      pub(super) fn get_017654() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_017655(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_017657(),
            ),
          ],
          get_017659(),
        ))
      }
      pub(super) fn get_017711() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017712() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_017710() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017711(), get_017712()))
      }
      pub(super) fn get_017713() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_017716() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017717() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_017715() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017716(), get_017717()))
      }
      pub(super) fn get_017718() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_017714() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017715(),
          vec![get_017718()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017719() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017709() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017710(),
          vec![get_017713(), get_017714(), get_017719()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017653() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_017654(),
          )],
          get_017709(),
        ))
      }
      pub(super) fn get_017647() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_017648(),
          )],
          get_017653(),
        ))
      }
      pub(super) fn get_017641() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_017642(),
          )],
          get_017647(),
        ))
      }
      pub(super) fn get_017635() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_017636(),
          )],
          get_017641(),
        ))
      }
      pub(super) fn get_017723() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017724() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_017722() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017723(), get_017724()))
      }
      pub(super) fn get_017725() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_017726() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017721() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017722(),
          vec![get_017725(), get_017726()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017720() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017721()))
      }
      pub(super) fn get_017627() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017628(), get_017635(), get_017720()))
      }
      pub(super) fn get_017622() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_017623(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_017625(),
            ),
          ],
          get_017627(),
        ))
      }
      pub(super) fn get_017727() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_017731() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_017732() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017730() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017731(), get_017732()))
      }
      pub(super) fn get_017734() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_017735() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_017733() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017734(), get_017735()))
      }
      pub(super) fn get_017729() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_017730(),
          )],
          get_017733(),
        ))
      }
      pub(super) fn get_017738() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_017739() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017737() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017738(), get_017739()))
      }
      pub(super) fn get_017740() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_017736() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_017737(),
          )],
          get_017740(),
        ))
      }
      pub(super) fn get_017744() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017745() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_017743() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017744(), get_017745()))
      }
      pub(super) fn get_017746() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017747() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_017742() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017743(),
          vec![get_017746(), get_017747()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017750() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017751() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_017749() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017750(), get_017751()))
      }
      pub(super) fn get_017752() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_017755() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017756() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_017754() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017755(), get_017756()))
      }
      pub(super) fn get_017759() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017760() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_017758() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017759(), get_017760()))
      }
      pub(super) fn get_017761() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_017757() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017758(),
          vec![get_017761()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017764() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_017763() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017764()))
      }
      pub(super) fn get_017767() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_017768() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_017766() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017767(), get_017768()))
      }
      pub(super) fn get_017771() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_017770() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017771()]))
      }
      pub(super) fn get_017769() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017770()]))
      }
      pub(super) fn get_017765() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_017766(),
          )],
          get_017769(),
        ))
      }
      pub(super) fn get_017762() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_017763(),
          )],
          get_017765(),
        ))
      }
      pub(super) fn get_017753() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017754(),
          vec![get_017757(), get_017762()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017748() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017749(),
          vec![get_017752(), get_017753()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017741() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_017742(),
          )],
          get_017748(),
        ))
      }
      pub(super) fn get_017728() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_017729(),
          get_017736(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_017741(),
        ))
      }
      pub(super) fn get_017774() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_017773() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017774()))
      }
      pub(super) fn get_017776() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_017775() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017776()))
      }
      pub(super) fn get_017777() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("id", 4u32)
        }))
      }
      pub(super) fn get_017781() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_017780() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017781()))
      }
      pub(super) fn get_017783() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_017782() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017783()))
      }
      pub(super) fn get_017785() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_017784() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017785()))
      }
      pub(super) fn get_017787() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'j' not bound"))
      }
      pub(super) fn get_017786() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017787()))
      }
      pub(super) fn get_017789() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'acc' not bound"))
      }
      pub(super) fn get_017788() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017789()))
      }
      pub(super) fn get_017792() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 527u32)
        }))
      }
      pub(super) fn get_017795() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017796() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_017794() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017795(), get_017796()))
      }
      pub(super) fn get_017797() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 525u32)
        }))
      }
      pub(super) fn get_017793() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017794(),
          vec![get_017797()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017791() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017792(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017793(),
        ))
      }
      pub(super) fn get_017799() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 529u32)
        }))
      }
      pub(super) fn get_017802() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017803() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_017801() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017802(), get_017803()))
      }
      pub(super) fn get_017804() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 526u32)
        }))
      }
      pub(super) fn get_017805() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 528u32)
        }))
      }
      pub(super) fn get_017806() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_017807() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_017800() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017801(),
          vec![get_017804(), get_017805(), get_017806(), get_017807()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017798() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017799(),
          CoreBinaryOperator::Plus(None),
          get_017800(),
        ))
      }
      pub(super) fn get_017810() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 528u32)
        }))
      }
      pub(super) fn get_017813() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017814() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_017812() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017813(), get_017814()))
      }
      pub(super) fn get_017815() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 526u32)
        }))
      }
      pub(super) fn get_017811() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017812(),
          vec![get_017815()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017809() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017810(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017811(),
        ))
      }
      pub(super) fn get_017817() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 529u32)
        }))
      }
      pub(super) fn get_017820() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017821() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_017819() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017820(), get_017821()))
      }
      pub(super) fn get_017822() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 525u32)
        }))
      }
      pub(super) fn get_017823() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 527u32)
        }))
      }
      pub(super) fn get_017824() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_017825() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_017818() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017819(),
          vec![get_017822(), get_017823(), get_017824(), get_017825()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017816() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017817(),
          CoreBinaryOperator::Plus(None),
          get_017818(),
        ))
      }
      pub(super) fn get_017828() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 523u32)
        }))
      }
      pub(super) fn get_017830() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 525u32)
        }))
      }
      pub(super) fn get_017831() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 527u32)
        }))
      }
      pub(super) fn get_017829() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017830(), get_017831()))
      }
      pub(super) fn get_017827() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017828(),
          vec![get_017829()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017834() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 523u32)
        }))
      }
      pub(super) fn get_017836() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 526u32)
        }))
      }
      pub(super) fn get_017837() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 528u32)
        }))
      }
      pub(super) fn get_017835() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017836(), get_017837()))
      }
      pub(super) fn get_017833() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017834(),
          vec![get_017835()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017841() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017842() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_017840() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017841(), get_017842()))
      }
      pub(super) fn get_017843() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ak", 530u32)
        }))
      }
      pub(super) fn get_017844() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("bk", 531u32)
        }))
      }
      pub(super) fn get_017839() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017840(),
          vec![get_017843(), get_017844()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017846() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 524u32)
        }))
      }
      pub(super) fn get_017847() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 525u32)
        }))
      }
      pub(super) fn get_017848() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 526u32)
        }))
      }
      pub(super) fn get_017850() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 527u32)
        }))
      }
      pub(super) fn get_017851() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_017849() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017850(),
          CoreBinaryOperator::Plus(None),
          get_017851(),
        ))
      }
      pub(super) fn get_017853() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 528u32)
        }))
      }
      pub(super) fn get_017854() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_017852() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017853(),
          CoreBinaryOperator::Plus(None),
          get_017854(),
        ))
      }
      pub(super) fn get_017856() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 529u32)
        }))
      }
      pub(super) fn get_017859() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 525u32)
        }))
      }
      pub(super) fn get_017860() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 527u32)
        }))
      }
      pub(super) fn get_017858() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017859(), get_017860()))
      }
      pub(super) fn get_017857() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017858()]))
      }
      pub(super) fn get_017855() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017856(),
          CoreBinaryOperator::Plus(None),
          get_017857(),
        ))
      }
      pub(super) fn get_017845() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017846(),
          vec![
            get_017847(),
            get_017848(),
            get_017849(),
            get_017852(),
            get_017855(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_017863() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ak", 530u32)
        }))
      }
      pub(super) fn get_017864() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("bk", 531u32)
        }))
      }
      pub(super) fn get_017862() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017863(),
          CoreBinaryOperator::LessThan(None),
          get_017864(),
        ))
      }
      pub(super) fn get_017866() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 524u32)
        }))
      }
      pub(super) fn get_017867() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 525u32)
        }))
      }
      pub(super) fn get_017868() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 526u32)
        }))
      }
      pub(super) fn get_017870() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 527u32)
        }))
      }
      pub(super) fn get_017871() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_017869() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017870(),
          CoreBinaryOperator::Plus(None),
          get_017871(),
        ))
      }
      pub(super) fn get_017872() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 528u32)
        }))
      }
      pub(super) fn get_017874() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 529u32)
        }))
      }
      pub(super) fn get_017877() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 525u32)
        }))
      }
      pub(super) fn get_017878() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 527u32)
        }))
      }
      pub(super) fn get_017876() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017877(), get_017878()))
      }
      pub(super) fn get_017875() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017876()]))
      }
      pub(super) fn get_017873() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017874(),
          CoreBinaryOperator::Plus(None),
          get_017875(),
        ))
      }
      pub(super) fn get_017865() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017866(),
          vec![
            get_017867(),
            get_017868(),
            get_017869(),
            get_017872(),
            get_017873(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_017880() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 524u32)
        }))
      }
      pub(super) fn get_017881() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 525u32)
        }))
      }
      pub(super) fn get_017882() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 526u32)
        }))
      }
      pub(super) fn get_017883() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 527u32)
        }))
      }
      pub(super) fn get_017885() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 528u32)
        }))
      }
      pub(super) fn get_017886() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_017884() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017885(),
          CoreBinaryOperator::Plus(None),
          get_017886(),
        ))
      }
      pub(super) fn get_017888() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 529u32)
        }))
      }
      pub(super) fn get_017891() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 526u32)
        }))
      }
      pub(super) fn get_017892() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 528u32)
        }))
      }
      pub(super) fn get_017890() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017891(), get_017892()))
      }
      pub(super) fn get_017889() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017890()]))
      }
      pub(super) fn get_017887() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017888(),
          CoreBinaryOperator::Plus(None),
          get_017889(),
        ))
      }
      pub(super) fn get_017879() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017880(),
          vec![
            get_017881(),
            get_017882(),
            get_017883(),
            get_017884(),
            get_017887(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_017861() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017862(), get_017865(), get_017879()))
      }
      pub(super) fn get_017838() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017839(), get_017845(), get_017861()))
      }
      pub(super) fn get_017832() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("bk", 531u32) },
            get_017833(),
          )],
          get_017838(),
        ))
      }
      pub(super) fn get_017826() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("ak", 530u32) },
            get_017827(),
          )],
          get_017832(),
        ))
      }
      pub(super) fn get_017808() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017809(), get_017816(), get_017826()))
      }
      pub(super) fn get_017790() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017791(), get_017798(), get_017808()))
      }
      pub(super) fn get_017779() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 525u32) },
              get_017780(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 526u32) },
              get_017782(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 527u32) },
              get_017784(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("j", 528u32) },
              get_017786(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("acc", 529u32) },
              get_017788(),
            ),
          ],
          get_017790(),
        ))
      }
      pub(super) fn get_017894() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 524u32)
        }))
      }
      pub(super) fn get_017895() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 521u32)
        }))
      }
      pub(super) fn get_017896() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 522u32)
        }))
      }
      pub(super) fn get_017897() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017898() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017899() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_017893() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017894(),
          vec![
            get_017895(),
            get_017896(),
            get_017897(),
            get_017898(),
            get_017899(),
          ],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017778() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 524u32) },
            get_017779(),
          )],
          get_017893(),
        ))
      }
      pub(super) fn get_017772() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 521u32) },
              get_017773(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 522u32) },
              get_017775(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("keyF", 523u32) },
              get_017777(),
            ),
          ],
          get_017778(),
        ))
      }
      pub(super) fn get_017615() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_017616()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_017617(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_017618(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_017622(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_017727(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_017728(),
            ),
          ],
          get_017772(),
        ))
      }
      pub(super) fn get_017900() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("setInter"))
      }
      pub(super) fn get_017902() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_017903() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_017906() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_017905() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017906()))
      }
      pub(super) fn get_017907() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_017904() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_017905(),
          )],
          get_017907(),
        ))
      }
      pub(super) fn get_017910() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_017909() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017910()))
      }
      pub(super) fn get_017912() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_017911() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017912()))
      }
      pub(super) fn get_017916() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017918() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017919() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017917() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017918(),
          CoreBinaryOperator::And(None),
          get_017919(),
        ))
      }
      pub(super) fn get_017915() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017916(),
          CoreBinaryOperator::GreaterThan(None),
          get_017917(),
        ))
      }
      pub(super) fn get_017920() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_017914() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017915(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_017920(),
        ))
      }
      pub(super) fn get_017924() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017925() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017923() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017924(), get_017925()))
      }
      pub(super) fn get_017926() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_017922() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017923(),
          vec![get_017926()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017930() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017931() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017929() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017930(), get_017931()))
      }
      pub(super) fn get_017932() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_017928() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017929(),
          vec![get_017932()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017936() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017937() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017935() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017936(), get_017937()))
      }
      pub(super) fn get_017938() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_017934() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017935(),
          vec![get_017938()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017942() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_017941() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017942()))
      }
      pub(super) fn get_017944() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_017943() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017944()))
      }
      pub(super) fn get_017948() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017949() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_017947() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017948(), get_017949()))
      }
      pub(super) fn get_017950() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_017946() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017947(),
          vec![get_017950()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017954() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017955() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_017953() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017954(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017955(),
        ))
      }
      pub(super) fn get_017958() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017959() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_017957() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017958(),
          CoreBinaryOperator::Minus(None),
          get_017959(),
        ))
      }
      pub(super) fn get_017960() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_017956() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017957(),
          CoreBinaryOperator::Plus(None),
          get_017960(),
        ))
      }
      pub(super) fn get_017963() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017964() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_017962() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017963(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017964(),
        ))
      }
      pub(super) fn get_017967() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017968() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_017966() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017967(),
          CoreBinaryOperator::Minus(None),
          get_017968(),
        ))
      }
      pub(super) fn get_017969() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_017965() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017966(),
          CoreBinaryOperator::Plus(None),
          get_017969(),
        ))
      }
      pub(super) fn get_017971() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_017972() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_017970() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017971(),
          CoreBinaryOperator::Minus(None),
          get_017972(),
        ))
      }
      pub(super) fn get_017961() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017962(), get_017965(), get_017970()))
      }
      pub(super) fn get_017952() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017953(), get_017956(), get_017961()))
      }
      pub(super) fn get_017976() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017978() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017979() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017977() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017978(),
          CoreBinaryOperator::And(None),
          get_017979(),
        ))
      }
      pub(super) fn get_017975() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017976(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_017977(),
        ))
      }
      pub(super) fn get_017980() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017974() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017975(),
          CoreBinaryOperator::LessThan(None),
          get_017980(),
        ))
      }
      pub(super) fn get_017982() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017984() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_017985() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_017983() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017984(),
          CoreBinaryOperator::Plus(None),
          get_017985(),
        ))
      }
      pub(super) fn get_017981() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_017982(),
          CoreBinaryOperator::Mult(None),
          get_017983(),
        ))
      }
      pub(super) fn get_017989() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017990() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_017988() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017989(), get_017990()))
      }
      pub(super) fn get_017991() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_017993() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_017994() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_017992() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_017993(), get_017994()]))
      }
      pub(super) fn get_017987() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017988(),
          vec![get_017991(), get_017992()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017986() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_017987()))
      }
      pub(super) fn get_017973() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017974(), get_017981(), get_017986()))
      }
      pub(super) fn get_017951() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_017952(),
          )],
          get_017973(),
        ))
      }
      pub(super) fn get_017945() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_017946(),
          )],
          get_017951(),
        ))
      }
      pub(super) fn get_017940() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_017941(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_017943(),
            ),
          ],
          get_017945(),
        ))
      }
      pub(super) fn get_017997() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_017998() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_017996() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_017997(), get_017998()))
      }
      pub(super) fn get_017999() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_018002() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018003() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_018001() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018002(), get_018003()))
      }
      pub(super) fn get_018004() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_018000() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018001(),
          vec![get_018004()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018005() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_017995() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_017996(),
          vec![get_017999(), get_018000(), get_018005()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_017939() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_017940(),
          )],
          get_017995(),
        ))
      }
      pub(super) fn get_017933() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_017934(),
          )],
          get_017939(),
        ))
      }
      pub(super) fn get_017927() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_017928(),
          )],
          get_017933(),
        ))
      }
      pub(super) fn get_017921() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_017922(),
          )],
          get_017927(),
        ))
      }
      pub(super) fn get_018009() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018010() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_018008() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018009(), get_018010()))
      }
      pub(super) fn get_018011() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_018012() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018007() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018008(),
          vec![get_018011(), get_018012()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018006() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018007()))
      }
      pub(super) fn get_017913() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_017914(), get_017921(), get_018006()))
      }
      pub(super) fn get_017908() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_017909(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_017911(),
            ),
          ],
          get_017913(),
        ))
      }
      pub(super) fn get_018013() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_018017() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_018018() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018016() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018017(), get_018018()))
      }
      pub(super) fn get_018020() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_018021() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_018019() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018020(), get_018021()))
      }
      pub(super) fn get_018015() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_018016(),
          )],
          get_018019(),
        ))
      }
      pub(super) fn get_018024() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_018025() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018023() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018024(), get_018025()))
      }
      pub(super) fn get_018026() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_018022() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_018023(),
          )],
          get_018026(),
        ))
      }
      pub(super) fn get_018030() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018031() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_018029() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018030(), get_018031()))
      }
      pub(super) fn get_018032() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018033() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_018028() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018029(),
          vec![get_018032(), get_018033()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018036() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018037() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_018035() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018036(), get_018037()))
      }
      pub(super) fn get_018038() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_018041() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018042() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_018040() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018041(), get_018042()))
      }
      pub(super) fn get_018045() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018046() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_018044() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018045(), get_018046()))
      }
      pub(super) fn get_018047() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_018043() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018044(),
          vec![get_018047()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018050() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_018049() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018050()))
      }
      pub(super) fn get_018053() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_018054() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_018052() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018053(), get_018054()))
      }
      pub(super) fn get_018057() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_018056() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018057()]))
      }
      pub(super) fn get_018055() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018056()]))
      }
      pub(super) fn get_018051() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_018052(),
          )],
          get_018055(),
        ))
      }
      pub(super) fn get_018048() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_018049(),
          )],
          get_018051(),
        ))
      }
      pub(super) fn get_018039() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018040(),
          vec![get_018043(), get_018048()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018034() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018035(),
          vec![get_018038(), get_018039()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018027() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_018028(),
          )],
          get_018034(),
        ))
      }
      pub(super) fn get_018014() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_018015(),
          get_018022(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_018027(),
        ))
      }
      pub(super) fn get_018060() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_018059() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018060()))
      }
      pub(super) fn get_018062() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_018061() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018062()))
      }
      pub(super) fn get_018063() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("id", 4u32)
        }))
      }
      pub(super) fn get_018067() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_018066() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018067()))
      }
      pub(super) fn get_018069() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_018068() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018069()))
      }
      pub(super) fn get_018071() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_018070() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018071()))
      }
      pub(super) fn get_018073() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'j' not bound"))
      }
      pub(super) fn get_018072() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018073()))
      }
      pub(super) fn get_018075() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'acc' not bound"))
      }
      pub(super) fn get_018074() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018075()))
      }
      pub(super) fn get_018079() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 538u32)
        }))
      }
      pub(super) fn get_018083() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018084() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_018082() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018083(), get_018084()))
      }
      pub(super) fn get_018085() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 536u32)
        }))
      }
      pub(super) fn get_018081() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018082(),
          vec![get_018085()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018086() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 539u32)
        }))
      }
      pub(super) fn get_018080() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018081(),
          CoreBinaryOperator::Or(None),
          get_018086(),
        ))
      }
      pub(super) fn get_018078() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018079(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018080(),
        ))
      }
      pub(super) fn get_018089() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018090() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_018088() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018089(), get_018090()))
      }
      pub(super) fn get_018091() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 537u32)
        }))
      }
      pub(super) fn get_018087() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018088(),
          vec![get_018091()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018077() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018078(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018087(),
        ))
      }
      pub(super) fn get_018092() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 540u32)
        }))
      }
      pub(super) fn get_018096() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018097() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_018095() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018096(), get_018097()))
      }
      pub(super) fn get_018099() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 534u32)
        }))
      }
      pub(super) fn get_018101() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 536u32)
        }))
      }
      pub(super) fn get_018102() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 538u32)
        }))
      }
      pub(super) fn get_018100() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018101(), get_018102()))
      }
      pub(super) fn get_018098() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018099(),
          vec![get_018100()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018104() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 534u32)
        }))
      }
      pub(super) fn get_018106() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 537u32)
        }))
      }
      pub(super) fn get_018107() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 539u32)
        }))
      }
      pub(super) fn get_018105() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018106(), get_018107()))
      }
      pub(super) fn get_018103() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018104(),
          vec![get_018105()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018094() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018095(),
          vec![get_018098(), get_018103()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018109() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 535u32)
        }))
      }
      pub(super) fn get_018110() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 536u32)
        }))
      }
      pub(super) fn get_018111() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 537u32)
        }))
      }
      pub(super) fn get_018113() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 538u32)
        }))
      }
      pub(super) fn get_018114() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_018112() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018113(),
          CoreBinaryOperator::Plus(None),
          get_018114(),
        ))
      }
      pub(super) fn get_018116() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 539u32)
        }))
      }
      pub(super) fn get_018117() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_018115() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018116(),
          CoreBinaryOperator::Plus(None),
          get_018117(),
        ))
      }
      pub(super) fn get_018119() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 540u32)
        }))
      }
      pub(super) fn get_018122() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 536u32)
        }))
      }
      pub(super) fn get_018123() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 538u32)
        }))
      }
      pub(super) fn get_018121() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018122(), get_018123()))
      }
      pub(super) fn get_018120() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018121()]))
      }
      pub(super) fn get_018118() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018119(),
          CoreBinaryOperator::Plus(None),
          get_018120(),
        ))
      }
      pub(super) fn get_018108() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018109(),
          vec![
            get_018110(),
            get_018111(),
            get_018112(),
            get_018115(),
            get_018118(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_018127() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 534u32)
        }))
      }
      pub(super) fn get_018129() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 536u32)
        }))
      }
      pub(super) fn get_018130() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 538u32)
        }))
      }
      pub(super) fn get_018128() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018129(), get_018130()))
      }
      pub(super) fn get_018126() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018127(),
          vec![get_018128()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018132() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 534u32)
        }))
      }
      pub(super) fn get_018134() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 537u32)
        }))
      }
      pub(super) fn get_018135() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 539u32)
        }))
      }
      pub(super) fn get_018133() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018134(), get_018135()))
      }
      pub(super) fn get_018131() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018132(),
          vec![get_018133()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018125() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018126(),
          CoreBinaryOperator::LessThan(None),
          get_018131(),
        ))
      }
      pub(super) fn get_018137() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 535u32)
        }))
      }
      pub(super) fn get_018138() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 536u32)
        }))
      }
      pub(super) fn get_018139() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 537u32)
        }))
      }
      pub(super) fn get_018141() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 538u32)
        }))
      }
      pub(super) fn get_018142() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_018140() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018141(),
          CoreBinaryOperator::Plus(None),
          get_018142(),
        ))
      }
      pub(super) fn get_018143() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 539u32)
        }))
      }
      pub(super) fn get_018144() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 540u32)
        }))
      }
      pub(super) fn get_018136() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018137(),
          vec![
            get_018138(),
            get_018139(),
            get_018140(),
            get_018143(),
            get_018144(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_018146() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 535u32)
        }))
      }
      pub(super) fn get_018147() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 536u32)
        }))
      }
      pub(super) fn get_018148() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 537u32)
        }))
      }
      pub(super) fn get_018149() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 538u32)
        }))
      }
      pub(super) fn get_018151() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 539u32)
        }))
      }
      pub(super) fn get_018152() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_018150() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018151(),
          CoreBinaryOperator::Plus(None),
          get_018152(),
        ))
      }
      pub(super) fn get_018153() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 540u32)
        }))
      }
      pub(super) fn get_018145() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018146(),
          vec![
            get_018147(),
            get_018148(),
            get_018149(),
            get_018150(),
            get_018153(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_018124() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018125(), get_018136(), get_018145()))
      }
      pub(super) fn get_018093() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018094(), get_018108(), get_018124()))
      }
      pub(super) fn get_018076() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018077(), get_018092(), get_018093()))
      }
      pub(super) fn get_018065() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 536u32) },
              get_018066(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 537u32) },
              get_018068(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 538u32) },
              get_018070(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("j", 539u32) },
              get_018072(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("acc", 540u32) },
              get_018074(),
            ),
          ],
          get_018076(),
        ))
      }
      pub(super) fn get_018155() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 535u32)
        }))
      }
      pub(super) fn get_018156() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 532u32)
        }))
      }
      pub(super) fn get_018157() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 533u32)
        }))
      }
      pub(super) fn get_018158() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018159() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018160() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_018154() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018155(),
          vec![
            get_018156(),
            get_018157(),
            get_018158(),
            get_018159(),
            get_018160(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_018064() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 535u32) },
            get_018065(),
          )],
          get_018154(),
        ))
      }
      pub(super) fn get_018058() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 532u32) },
              get_018059(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 533u32) },
              get_018061(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("keyF", 534u32) },
              get_018063(),
            ),
          ],
          get_018064(),
        ))
      }
      pub(super) fn get_017901() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_017902()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_017903(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_017904(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_017908(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_018013(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_018014(),
            ),
          ],
          get_018058(),
        ))
      }
      pub(super) fn get_018161() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("setDiff"))
      }
      pub(super) fn get_018163() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_018164() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_018167() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_018166() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018167()))
      }
      pub(super) fn get_018168() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_018165() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_018166(),
          )],
          get_018168(),
        ))
      }
      pub(super) fn get_018171() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_018170() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018171()))
      }
      pub(super) fn get_018173() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_018172() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018173()))
      }
      pub(super) fn get_018177() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018179() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018180() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018178() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018179(),
          CoreBinaryOperator::And(None),
          get_018180(),
        ))
      }
      pub(super) fn get_018176() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018177(),
          CoreBinaryOperator::GreaterThan(None),
          get_018178(),
        ))
      }
      pub(super) fn get_018181() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_018175() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018176(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_018181(),
        ))
      }
      pub(super) fn get_018185() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018186() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018184() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018185(), get_018186()))
      }
      pub(super) fn get_018187() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_018183() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018184(),
          vec![get_018187()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018192() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018190() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018191(), get_018192()))
      }
      pub(super) fn get_018193() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_018189() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018190(),
          vec![get_018193()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018197() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018198() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018196() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018197(), get_018198()))
      }
      pub(super) fn get_018199() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_018195() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018196(),
          vec![get_018199()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018203() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_018202() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018203()))
      }
      pub(super) fn get_018205() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_018204() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018205()))
      }
      pub(super) fn get_018209() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018210() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018208() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018209(), get_018210()))
      }
      pub(super) fn get_018211() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_018207() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018208(),
          vec![get_018211()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018215() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018216() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_018214() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018215(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018216(),
        ))
      }
      pub(super) fn get_018219() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018220() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_018218() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018219(),
          CoreBinaryOperator::Minus(None),
          get_018220(),
        ))
      }
      pub(super) fn get_018221() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_018217() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018218(),
          CoreBinaryOperator::Plus(None),
          get_018221(),
        ))
      }
      pub(super) fn get_018224() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018225() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_018223() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018224(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018225(),
        ))
      }
      pub(super) fn get_018228() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018229() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_018227() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018228(),
          CoreBinaryOperator::Minus(None),
          get_018229(),
        ))
      }
      pub(super) fn get_018230() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_018226() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018227(),
          CoreBinaryOperator::Plus(None),
          get_018230(),
        ))
      }
      pub(super) fn get_018232() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018233() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_018231() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018232(),
          CoreBinaryOperator::Minus(None),
          get_018233(),
        ))
      }
      pub(super) fn get_018222() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018223(), get_018226(), get_018231()))
      }
      pub(super) fn get_018213() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018214(), get_018217(), get_018222()))
      }
      pub(super) fn get_018237() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_018239() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018240() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_018238() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018239(),
          CoreBinaryOperator::And(None),
          get_018240(),
        ))
      }
      pub(super) fn get_018236() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018237(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018238(),
        ))
      }
      pub(super) fn get_018241() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018235() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018236(),
          CoreBinaryOperator::LessThan(None),
          get_018241(),
        ))
      }
      pub(super) fn get_018243() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018245() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_018246() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_018244() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018245(),
          CoreBinaryOperator::Plus(None),
          get_018246(),
        ))
      }
      pub(super) fn get_018242() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018243(),
          CoreBinaryOperator::Mult(None),
          get_018244(),
        ))
      }
      pub(super) fn get_018250() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018251() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_018249() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018250(), get_018251()))
      }
      pub(super) fn get_018252() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_018254() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_018255() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018253() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018254(), get_018255()]))
      }
      pub(super) fn get_018248() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018249(),
          vec![get_018252(), get_018253()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018247() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018248()))
      }
      pub(super) fn get_018234() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018235(), get_018242(), get_018247()))
      }
      pub(super) fn get_018212() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_018213(),
          )],
          get_018234(),
        ))
      }
      pub(super) fn get_018206() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_018207(),
          )],
          get_018212(),
        ))
      }
      pub(super) fn get_018201() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_018202(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_018204(),
            ),
          ],
          get_018206(),
        ))
      }
      pub(super) fn get_018258() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018259() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_018257() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018258(), get_018259()))
      }
      pub(super) fn get_018260() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_018263() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018264() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_018262() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018263(), get_018264()))
      }
      pub(super) fn get_018265() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_018261() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018262(),
          vec![get_018265()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018266() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018256() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018257(),
          vec![get_018260(), get_018261(), get_018266()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018200() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_018201(),
          )],
          get_018256(),
        ))
      }
      pub(super) fn get_018194() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_018195(),
          )],
          get_018200(),
        ))
      }
      pub(super) fn get_018188() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_018189(),
          )],
          get_018194(),
        ))
      }
      pub(super) fn get_018182() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_018183(),
          )],
          get_018188(),
        ))
      }
      pub(super) fn get_018270() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018271() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_018269() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018270(), get_018271()))
      }
      pub(super) fn get_018272() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_018273() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018268() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018269(),
          vec![get_018272(), get_018273()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018267() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018268()))
      }
      pub(super) fn get_018174() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018175(), get_018182(), get_018267()))
      }
      pub(super) fn get_018169() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_018170(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_018172(),
            ),
          ],
          get_018174(),
        ))
      }
      pub(super) fn get_018274() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_018278() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_018279() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018277() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018278(), get_018279()))
      }
      pub(super) fn get_018281() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_018282() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_018280() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018281(), get_018282()))
      }
      pub(super) fn get_018276() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_018277(),
          )],
          get_018280(),
        ))
      }
      pub(super) fn get_018285() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_018286() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018284() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018285(), get_018286()))
      }
      pub(super) fn get_018287() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_018283() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_018284(),
          )],
          get_018287(),
        ))
      }
      pub(super) fn get_018291() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018292() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_018290() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018291(), get_018292()))
      }
      pub(super) fn get_018293() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018294() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_018289() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018290(),
          vec![get_018293(), get_018294()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018297() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018298() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_018296() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018297(), get_018298()))
      }
      pub(super) fn get_018299() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_018302() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018303() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_018301() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018302(), get_018303()))
      }
      pub(super) fn get_018306() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018307() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_018305() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018306(), get_018307()))
      }
      pub(super) fn get_018308() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_018304() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018305(),
          vec![get_018308()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018311() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_018310() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018311()))
      }
      pub(super) fn get_018314() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_018315() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_018313() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018314(), get_018315()))
      }
      pub(super) fn get_018318() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_018317() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018318()]))
      }
      pub(super) fn get_018316() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018317()]))
      }
      pub(super) fn get_018312() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_018313(),
          )],
          get_018316(),
        ))
      }
      pub(super) fn get_018309() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_018310(),
          )],
          get_018312(),
        ))
      }
      pub(super) fn get_018300() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018301(),
          vec![get_018304(), get_018309()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018295() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018296(),
          vec![get_018299(), get_018300()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018288() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_018289(),
          )],
          get_018295(),
        ))
      }
      pub(super) fn get_018275() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_018276(),
          get_018283(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_018288(),
        ))
      }
      pub(super) fn get_018321() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_018320() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018321()))
      }
      pub(super) fn get_018323() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_018322() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018323()))
      }
      pub(super) fn get_018324() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("id", 4u32)
        }))
      }
      pub(super) fn get_018328() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_018327() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018328()))
      }
      pub(super) fn get_018330() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_018329() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018330()))
      }
      pub(super) fn get_018332() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_018331() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018332()))
      }
      pub(super) fn get_018334() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'j' not bound"))
      }
      pub(super) fn get_018333() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018334()))
      }
      pub(super) fn get_018336() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'acc' not bound"))
      }
      pub(super) fn get_018335() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018336()))
      }
      pub(super) fn get_018339() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 547u32)
        }))
      }
      pub(super) fn get_018342() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018343() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_018341() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018342(), get_018343()))
      }
      pub(super) fn get_018344() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 545u32)
        }))
      }
      pub(super) fn get_018340() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018341(),
          vec![get_018344()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018338() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018339(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018340(),
        ))
      }
      pub(super) fn get_018345() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 549u32)
        }))
      }
      pub(super) fn get_018348() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 548u32)
        }))
      }
      pub(super) fn get_018351() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018352() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_018350() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018351(), get_018352()))
      }
      pub(super) fn get_018353() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 546u32)
        }))
      }
      pub(super) fn get_018349() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018350(),
          vec![get_018353()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018347() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018348(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018349(),
        ))
      }
      pub(super) fn get_018355() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 549u32)
        }))
      }
      pub(super) fn get_018358() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018359() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_018357() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018358(), get_018359()))
      }
      pub(super) fn get_018360() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 545u32)
        }))
      }
      pub(super) fn get_018361() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 547u32)
        }))
      }
      pub(super) fn get_018362() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_018363() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_018356() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018357(),
          vec![get_018360(), get_018361(), get_018362(), get_018363()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018354() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018355(),
          CoreBinaryOperator::Plus(None),
          get_018356(),
        ))
      }
      pub(super) fn get_018367() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018368() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_018366() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018367(), get_018368()))
      }
      pub(super) fn get_018370() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 543u32)
        }))
      }
      pub(super) fn get_018372() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 545u32)
        }))
      }
      pub(super) fn get_018373() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 547u32)
        }))
      }
      pub(super) fn get_018371() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018372(), get_018373()))
      }
      pub(super) fn get_018369() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018370(),
          vec![get_018371()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018375() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 543u32)
        }))
      }
      pub(super) fn get_018377() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 546u32)
        }))
      }
      pub(super) fn get_018378() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 548u32)
        }))
      }
      pub(super) fn get_018376() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018377(), get_018378()))
      }
      pub(super) fn get_018374() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018375(),
          vec![get_018376()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018365() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018366(),
          vec![get_018369(), get_018374()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018380() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 544u32)
        }))
      }
      pub(super) fn get_018381() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 545u32)
        }))
      }
      pub(super) fn get_018382() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 546u32)
        }))
      }
      pub(super) fn get_018384() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 547u32)
        }))
      }
      pub(super) fn get_018385() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_018383() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018384(),
          CoreBinaryOperator::Plus(None),
          get_018385(),
        ))
      }
      pub(super) fn get_018387() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 548u32)
        }))
      }
      pub(super) fn get_018388() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_018386() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018387(),
          CoreBinaryOperator::Plus(None),
          get_018388(),
        ))
      }
      pub(super) fn get_018389() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 549u32)
        }))
      }
      pub(super) fn get_018379() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018380(),
          vec![
            get_018381(),
            get_018382(),
            get_018383(),
            get_018386(),
            get_018389(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_018393() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 543u32)
        }))
      }
      pub(super) fn get_018395() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 545u32)
        }))
      }
      pub(super) fn get_018396() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 547u32)
        }))
      }
      pub(super) fn get_018394() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018395(), get_018396()))
      }
      pub(super) fn get_018392() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018393(),
          vec![get_018394()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018398() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("keyF", 543u32)
        }))
      }
      pub(super) fn get_018400() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 546u32)
        }))
      }
      pub(super) fn get_018401() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 548u32)
        }))
      }
      pub(super) fn get_018399() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018400(), get_018401()))
      }
      pub(super) fn get_018397() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018398(),
          vec![get_018399()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018391() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018392(),
          CoreBinaryOperator::LessThan(None),
          get_018397(),
        ))
      }
      pub(super) fn get_018403() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 544u32)
        }))
      }
      pub(super) fn get_018404() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 545u32)
        }))
      }
      pub(super) fn get_018405() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 546u32)
        }))
      }
      pub(super) fn get_018407() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 547u32)
        }))
      }
      pub(super) fn get_018408() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_018406() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018407(),
          CoreBinaryOperator::Plus(None),
          get_018408(),
        ))
      }
      pub(super) fn get_018409() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 548u32)
        }))
      }
      pub(super) fn get_018411() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 549u32)
        }))
      }
      pub(super) fn get_018414() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 545u32)
        }))
      }
      pub(super) fn get_018415() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 547u32)
        }))
      }
      pub(super) fn get_018413() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018414(), get_018415()))
      }
      pub(super) fn get_018412() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018413()]))
      }
      pub(super) fn get_018410() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018411(),
          CoreBinaryOperator::Plus(None),
          get_018412(),
        ))
      }
      pub(super) fn get_018402() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018403(),
          vec![
            get_018404(),
            get_018405(),
            get_018406(),
            get_018409(),
            get_018410(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_018417() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 544u32)
        }))
      }
      pub(super) fn get_018418() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 545u32)
        }))
      }
      pub(super) fn get_018419() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 546u32)
        }))
      }
      pub(super) fn get_018420() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 547u32)
        }))
      }
      pub(super) fn get_018422() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("j", 548u32)
        }))
      }
      pub(super) fn get_018423() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_018421() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018422(),
          CoreBinaryOperator::Plus(None),
          get_018423(),
        ))
      }
      pub(super) fn get_018424() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("acc", 549u32)
        }))
      }
      pub(super) fn get_018416() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018417(),
          vec![
            get_018418(),
            get_018419(),
            get_018420(),
            get_018421(),
            get_018424(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_018390() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018391(), get_018402(), get_018416()))
      }
      pub(super) fn get_018364() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018365(), get_018379(), get_018390()))
      }
      pub(super) fn get_018346() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018347(), get_018354(), get_018364()))
      }
      pub(super) fn get_018337() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018338(), get_018345(), get_018346()))
      }
      pub(super) fn get_018326() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 545u32) },
              get_018327(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 546u32) },
              get_018329(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 547u32) },
              get_018331(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("j", 548u32) },
              get_018333(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("acc", 549u32) },
              get_018335(),
            ),
          ],
          get_018337(),
        ))
      }
      pub(super) fn get_018426() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 544u32)
        }))
      }
      pub(super) fn get_018427() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 541u32)
        }))
      }
      pub(super) fn get_018428() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 542u32)
        }))
      }
      pub(super) fn get_018429() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018430() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018431() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_018425() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018426(),
          vec![
            get_018427(),
            get_018428(),
            get_018429(),
            get_018430(),
            get_018431(),
          ],
          vec![],
          true,
        ))
      }
      pub(super) fn get_018325() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 544u32) },
            get_018326(),
          )],
          get_018425(),
        ))
      }
      pub(super) fn get_018319() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 541u32) },
              get_018320(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 542u32) },
              get_018322(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("keyF", 543u32) },
              get_018324(),
            ),
          ],
          get_018325(),
        ))
      }
      pub(super) fn get_018162() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_018163()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_018164(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_018165(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_018169(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_018274(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_018275(),
            ),
          ],
          get_018319(),
        ))
      }
      pub(super) fn get_018432() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mergePatch"))
      }
      pub(super) fn get_018434() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_018435() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_018438() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_018437() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018438()))
      }
      pub(super) fn get_018439() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_018436() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_018437(),
          )],
          get_018439(),
        ))
      }
      pub(super) fn get_018442() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_018441() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018442()))
      }
      pub(super) fn get_018444() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_018443() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018444()))
      }
      pub(super) fn get_018448() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018450() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018451() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018449() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018450(),
          CoreBinaryOperator::And(None),
          get_018451(),
        ))
      }
      pub(super) fn get_018447() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018448(),
          CoreBinaryOperator::GreaterThan(None),
          get_018449(),
        ))
      }
      pub(super) fn get_018452() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_018446() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018447(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_018452(),
        ))
      }
      pub(super) fn get_018456() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018457() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018455() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018456(), get_018457()))
      }
      pub(super) fn get_018458() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_018454() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018455(),
          vec![get_018458()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018462() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018463() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018461() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018462(), get_018463()))
      }
      pub(super) fn get_018464() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_018460() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018461(),
          vec![get_018464()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018468() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018469() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018467() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018468(), get_018469()))
      }
      pub(super) fn get_018470() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_018466() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018467(),
          vec![get_018470()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018474() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_018473() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018474()))
      }
      pub(super) fn get_018476() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_018475() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018476()))
      }
      pub(super) fn get_018480() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018481() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018479() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018480(), get_018481()))
      }
      pub(super) fn get_018482() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_018478() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018479(),
          vec![get_018482()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018486() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018487() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_018485() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018486(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018487(),
        ))
      }
      pub(super) fn get_018490() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018491() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_018489() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018490(),
          CoreBinaryOperator::Minus(None),
          get_018491(),
        ))
      }
      pub(super) fn get_018492() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_018488() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018489(),
          CoreBinaryOperator::Plus(None),
          get_018492(),
        ))
      }
      pub(super) fn get_018495() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018496() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_018494() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018495(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018496(),
        ))
      }
      pub(super) fn get_018499() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018500() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_018498() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018499(),
          CoreBinaryOperator::Minus(None),
          get_018500(),
        ))
      }
      pub(super) fn get_018501() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_018497() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018498(),
          CoreBinaryOperator::Plus(None),
          get_018501(),
        ))
      }
      pub(super) fn get_018503() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018504() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_018502() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018503(),
          CoreBinaryOperator::Minus(None),
          get_018504(),
        ))
      }
      pub(super) fn get_018493() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018494(), get_018497(), get_018502()))
      }
      pub(super) fn get_018484() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018485(), get_018488(), get_018493()))
      }
      pub(super) fn get_018508() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_018510() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018511() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_018509() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018510(),
          CoreBinaryOperator::And(None),
          get_018511(),
        ))
      }
      pub(super) fn get_018507() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018508(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018509(),
        ))
      }
      pub(super) fn get_018512() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018506() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018507(),
          CoreBinaryOperator::LessThan(None),
          get_018512(),
        ))
      }
      pub(super) fn get_018514() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018516() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_018517() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_018515() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018516(),
          CoreBinaryOperator::Plus(None),
          get_018517(),
        ))
      }
      pub(super) fn get_018513() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018514(),
          CoreBinaryOperator::Mult(None),
          get_018515(),
        ))
      }
      pub(super) fn get_018521() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018522() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_018520() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018521(), get_018522()))
      }
      pub(super) fn get_018523() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_018525() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_018526() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018524() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018525(), get_018526()]))
      }
      pub(super) fn get_018519() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018520(),
          vec![get_018523(), get_018524()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018518() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018519()))
      }
      pub(super) fn get_018505() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018506(), get_018513(), get_018518()))
      }
      pub(super) fn get_018483() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_018484(),
          )],
          get_018505(),
        ))
      }
      pub(super) fn get_018477() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_018478(),
          )],
          get_018483(),
        ))
      }
      pub(super) fn get_018472() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_018473(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_018475(),
            ),
          ],
          get_018477(),
        ))
      }
      pub(super) fn get_018529() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018530() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_018528() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018529(), get_018530()))
      }
      pub(super) fn get_018531() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_018534() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018535() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_018533() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018534(), get_018535()))
      }
      pub(super) fn get_018536() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_018532() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018533(),
          vec![get_018536()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018537() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018527() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018528(),
          vec![get_018531(), get_018532(), get_018537()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018471() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_018472(),
          )],
          get_018527(),
        ))
      }
      pub(super) fn get_018465() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_018466(),
          )],
          get_018471(),
        ))
      }
      pub(super) fn get_018459() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_018460(),
          )],
          get_018465(),
        ))
      }
      pub(super) fn get_018453() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_018454(),
          )],
          get_018459(),
        ))
      }
      pub(super) fn get_018541() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018542() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_018540() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018541(), get_018542()))
      }
      pub(super) fn get_018543() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_018544() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018539() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018540(),
          vec![get_018543(), get_018544()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018538() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018539()))
      }
      pub(super) fn get_018445() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018446(), get_018453(), get_018538()))
      }
      pub(super) fn get_018440() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_018441(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_018443(),
            ),
          ],
          get_018445(),
        ))
      }
      pub(super) fn get_018545() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_018549() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_018550() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018548() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018549(), get_018550()))
      }
      pub(super) fn get_018552() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_018553() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_018551() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018552(), get_018553()))
      }
      pub(super) fn get_018547() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_018548(),
          )],
          get_018551(),
        ))
      }
      pub(super) fn get_018556() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_018557() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018555() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018556(), get_018557()))
      }
      pub(super) fn get_018558() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_018554() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_018555(),
          )],
          get_018558(),
        ))
      }
      pub(super) fn get_018562() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018563() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_018561() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018562(), get_018563()))
      }
      pub(super) fn get_018564() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018565() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_018560() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018561(),
          vec![get_018564(), get_018565()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018568() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018569() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_018567() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018568(), get_018569()))
      }
      pub(super) fn get_018570() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_018573() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018574() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_018572() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018573(), get_018574()))
      }
      pub(super) fn get_018577() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018578() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_018576() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018577(), get_018578()))
      }
      pub(super) fn get_018579() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_018575() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018576(),
          vec![get_018579()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018582() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_018581() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018582()))
      }
      pub(super) fn get_018585() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_018586() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_018584() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018585(), get_018586()))
      }
      pub(super) fn get_018589() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_018588() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018589()]))
      }
      pub(super) fn get_018587() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018588()]))
      }
      pub(super) fn get_018583() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_018584(),
          )],
          get_018587(),
        ))
      }
      pub(super) fn get_018580() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_018581(),
          )],
          get_018583(),
        ))
      }
      pub(super) fn get_018571() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018572(),
          vec![get_018575(), get_018580()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018566() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018567(),
          vec![get_018570(), get_018571()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018559() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_018560(),
          )],
          get_018566(),
        ))
      }
      pub(super) fn get_018546() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_018547(),
          get_018554(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_018559(),
        ))
      }
      pub(super) fn get_018592() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'target' not bound"))
      }
      pub(super) fn get_018591() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018592()))
      }
      pub(super) fn get_018594() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'patch' not bound"))
      }
      pub(super) fn get_018593() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018594()))
      }
      pub(super) fn get_018598() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018599() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_018597() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018598(), get_018599()))
      }
      pub(super) fn get_018600() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("patch", 551u32)
        }))
      }
      pub(super) fn get_018596() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018597(),
          vec![get_018600()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018605() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018606() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_018604() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018605(), get_018606()))
      }
      pub(super) fn get_018607() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("target", 550u32)
        }))
      }
      pub(super) fn get_018603() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018604(),
          vec![get_018607()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018608() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("target", 550u32)
        }))
      }
      pub(super) fn get_018609() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(vec![], vec![]))
      }
      pub(super) fn get_018602() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018603(), get_018608(), get_018609()))
      }
      pub(super) fn get_018614() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018615() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_018613() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018614(), get_018615()))
      }
      pub(super) fn get_018616() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("target_object", 552u32)
        }))
      }
      pub(super) fn get_018612() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018613(),
          vec![get_018616()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018619() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018620() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_018618() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018619(), get_018620()))
      }
      pub(super) fn get_018621() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("target_object", 552u32)
        }))
      }
      pub(super) fn get_018617() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018618(),
          vec![get_018621()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018622() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_018611() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018612(), get_018617(), get_018622()))
      }
      pub(super) fn get_018627() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018628() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_018626() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018627(), get_018628()))
      }
      pub(super) fn get_018629() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("patch", 551u32)
        }))
      }
      pub(super) fn get_018625() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018626(),
          vec![get_018629()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018632() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018633() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_018631() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018632(), get_018633()))
      }
      pub(super) fn get_018634() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_018637() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018638() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_018636() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018637(), get_018638()))
      }
      pub(super) fn get_018641() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018642() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_018640() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018641(), get_018642()))
      }
      pub(super) fn get_018643() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 556u32)
        }))
      }
      pub(super) fn get_018639() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018640(),
          vec![get_018643()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018646() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_018645() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018646()))
      }
      pub(super) fn get_018649() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 556u32)
        }))
      }
      pub(super) fn get_018650() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 557u32)
        }))
      }
      pub(super) fn get_018648() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018649(), get_018650()))
      }
      pub(super) fn get_018654() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018655() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_018653() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018654(), get_018655()))
      }
      pub(super) fn get_018657() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("patch", 551u32)
        }))
      }
      pub(super) fn get_018658() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 555u32)
        }))
      }
      pub(super) fn get_018656() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018657(), get_018658()))
      }
      pub(super) fn get_018659() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_018652() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018653(),
          vec![get_018656(), get_018659()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018661() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 555u32)
        }))
      }
      pub(super) fn get_018660() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018661()]))
      }
      pub(super) fn get_018662() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_018651() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018652(), get_018660(), get_018662()))
      }
      pub(super) fn get_018647() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 555u32) },
            get_018648(),
          )],
          get_018651(),
        ))
      }
      pub(super) fn get_018644() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 557u32) },
            get_018645(),
          )],
          get_018647(),
        ))
      }
      pub(super) fn get_018635() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018636(),
          vec![get_018639(), get_018644()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018630() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018631(),
          vec![get_018634(), get_018635()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018624() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 556u32) },
            get_018625(),
          )],
          get_018630(),
        ))
      }
      pub(super) fn get_018666() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018667() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("setUnion"))
      }
      pub(super) fn get_018665() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018666(), get_018667()))
      }
      pub(super) fn get_018668() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("target_fields", 553u32)
        }))
      }
      pub(super) fn get_018671() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018672() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_018670() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018671(), get_018672()))
      }
      pub(super) fn get_018673() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("patch", 551u32)
        }))
      }
      pub(super) fn get_018669() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018670(),
          vec![get_018673()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018664() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018665(),
          vec![get_018668(), get_018669()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018677() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 559u32)
        }))
      }
      pub(super) fn get_018678() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018676() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018677(), get_018678()))
      }
      pub(super) fn get_018679() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 560u32)
        }))
      }
      pub(super) fn get_018675() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 560u32) },
            get_018676(),
          )],
          get_018679(),
        ))
      }
      pub(super) fn get_018682() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 559u32)
        }))
      }
      pub(super) fn get_018683() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018681() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018682(), get_018683()))
      }
      pub(super) fn get_018688() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018689() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectHas"))
      }
      pub(super) fn get_018687() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018688(), get_018689()))
      }
      pub(super) fn get_018690() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("patch", 551u32)
        }))
      }
      pub(super) fn get_018691() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 560u32)
        }))
      }
      pub(super) fn get_018686() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018687(),
          vec![get_018690(), get_018691()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018685() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_018686(),
        ))
      }
      pub(super) fn get_018693() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("target_object", 552u32)
        }))
      }
      pub(super) fn get_018694() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 560u32)
        }))
      }
      pub(super) fn get_018692() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018693(), get_018694()))
      }
      pub(super) fn get_018699() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018700() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectHas"))
      }
      pub(super) fn get_018698() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018699(), get_018700()))
      }
      pub(super) fn get_018701() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("target_object", 552u32)
        }))
      }
      pub(super) fn get_018702() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 560u32)
        }))
      }
      pub(super) fn get_018697() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018698(),
          vec![get_018701(), get_018702()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018696() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_018697(),
        ))
      }
      pub(super) fn get_018705() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018706() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mergePatch"))
      }
      pub(super) fn get_018704() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018705(), get_018706()))
      }
      pub(super) fn get_018707() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_018709() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("patch", 551u32)
        }))
      }
      pub(super) fn get_018710() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 560u32)
        }))
      }
      pub(super) fn get_018708() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018709(), get_018710()))
      }
      pub(super) fn get_018703() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018704(),
          vec![get_018707(), get_018708()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_018713() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018714() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mergePatch"))
      }
      pub(super) fn get_018712() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018713(), get_018714()))
      }
      pub(super) fn get_018716() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("target_object", 552u32)
        }))
      }
      pub(super) fn get_018717() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 560u32)
        }))
      }
      pub(super) fn get_018715() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018716(), get_018717()))
      }
      pub(super) fn get_018719() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("patch", 551u32)
        }))
      }
      pub(super) fn get_018720() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 560u32)
        }))
      }
      pub(super) fn get_018718() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018719(), get_018720()))
      }
      pub(super) fn get_018711() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018712(),
          vec![get_018715(), get_018718()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_018695() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018696(), get_018703(), get_018711()))
      }
      pub(super) fn get_018684() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018685(), get_018692(), get_018695()))
      }
      pub(super) fn get_018680() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 560u32) },
            get_018681(),
          )],
          get_018684(),
        ))
      }
      pub(super) fn get_018724() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018725() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("setDiff"))
      }
      pub(super) fn get_018723() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018724(), get_018725()))
      }
      pub(super) fn get_018726() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("both_fields", 558u32)
        }))
      }
      pub(super) fn get_018727() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("null_fields", 554u32)
        }))
      }
      pub(super) fn get_018722() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018723(),
          vec![get_018726(), get_018727()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018730() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018731() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_018729() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018730(), get_018731()))
      }
      pub(super) fn get_018732() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_018735() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018736() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_018734() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018735(), get_018736()))
      }
      pub(super) fn get_018739() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018740() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_018738() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018739(), get_018740()))
      }
      pub(super) fn get_018741() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 561u32)
        }))
      }
      pub(super) fn get_018737() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018738(),
          vec![get_018741()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018744() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_018743() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018744()))
      }
      pub(super) fn get_018747() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 561u32)
        }))
      }
      pub(super) fn get_018748() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 562u32)
        }))
      }
      pub(super) fn get_018746() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018747(), get_018748()))
      }
      pub(super) fn get_018751() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("k", 560u32)
        }))
      }
      pub(super) fn get_018750() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018751()]))
      }
      pub(super) fn get_018749() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018750()]))
      }
      pub(super) fn get_018745() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("k", 560u32) },
            get_018746(),
          )],
          get_018749(),
        ))
      }
      pub(super) fn get_018742() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 562u32) },
            get_018743(),
          )],
          get_018745(),
        ))
      }
      pub(super) fn get_018733() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018734(),
          vec![get_018737(), get_018742()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018728() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018729(),
          vec![get_018732(), get_018733()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018721() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 561u32) },
            get_018722(),
          )],
          get_018728(),
        ))
      }
      pub(super) fn get_018674() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_018675(),
          get_018680(),
          unsafe { CoreIdent::new_unchecked("$arr", 559u32) },
          get_018721(),
        ))
      }
      pub(super) fn get_018663() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("both_fields", 558u32) },
            get_018664(),
          )],
          get_018674(),
        ))
      }
      pub(super) fn get_018623() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("null_fields", 554u32) },
            get_018624(),
          )],
          get_018663(),
        ))
      }
      pub(super) fn get_018610() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("target_fields", 553u32) },
            get_018611(),
          )],
          get_018623(),
        ))
      }
      pub(super) fn get_018601() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("target_object", 552u32) },
            get_018602(),
          )],
          get_018610(),
        ))
      }
      pub(super) fn get_018752() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("patch", 551u32)
        }))
      }
      pub(super) fn get_018595() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018596(), get_018601(), get_018752()))
      }
      pub(super) fn get_018590() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("target", 550u32) },
              get_018591(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("patch", 551u32) },
              get_018593(),
            ),
          ],
          get_018595(),
        ))
      }
      pub(super) fn get_018433() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_018434()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_018435(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_018436(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_018440(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_018545(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_018546(),
            ),
          ],
          get_018590(),
        ))
      }
      pub(super) fn get_018753() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_018755() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_018756() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_018759() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_018758() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018759()))
      }
      pub(super) fn get_018760() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_018757() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_018758(),
          )],
          get_018760(),
        ))
      }
      pub(super) fn get_018763() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_018762() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018763()))
      }
      pub(super) fn get_018765() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_018764() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018765()))
      }
      pub(super) fn get_018769() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018771() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018772() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018770() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018771(),
          CoreBinaryOperator::And(None),
          get_018772(),
        ))
      }
      pub(super) fn get_018768() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018769(),
          CoreBinaryOperator::GreaterThan(None),
          get_018770(),
        ))
      }
      pub(super) fn get_018773() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_018767() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018768(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_018773(),
        ))
      }
      pub(super) fn get_018777() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018778() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018776() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018777(), get_018778()))
      }
      pub(super) fn get_018779() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_018775() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018776(),
          vec![get_018779()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018783() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018784() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018782() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018783(), get_018784()))
      }
      pub(super) fn get_018785() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_018781() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018782(),
          vec![get_018785()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018789() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018790() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018788() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018789(), get_018790()))
      }
      pub(super) fn get_018791() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_018787() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018788(),
          vec![get_018791()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018795() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_018794() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018795()))
      }
      pub(super) fn get_018797() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_018796() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018797()))
      }
      pub(super) fn get_018801() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018802() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018800() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018801(), get_018802()))
      }
      pub(super) fn get_018803() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_018799() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018800(),
          vec![get_018803()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018807() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018808() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_018806() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018807(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018808(),
        ))
      }
      pub(super) fn get_018811() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018812() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_018810() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018811(),
          CoreBinaryOperator::Minus(None),
          get_018812(),
        ))
      }
      pub(super) fn get_018813() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_018809() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018810(),
          CoreBinaryOperator::Plus(None),
          get_018813(),
        ))
      }
      pub(super) fn get_018816() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018817() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_018815() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018816(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018817(),
        ))
      }
      pub(super) fn get_018820() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018821() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_018819() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018820(),
          CoreBinaryOperator::Minus(None),
          get_018821(),
        ))
      }
      pub(super) fn get_018822() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_018818() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018819(),
          CoreBinaryOperator::Plus(None),
          get_018822(),
        ))
      }
      pub(super) fn get_018824() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018825() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_018823() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018824(),
          CoreBinaryOperator::Minus(None),
          get_018825(),
        ))
      }
      pub(super) fn get_018814() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018815(), get_018818(), get_018823()))
      }
      pub(super) fn get_018805() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018806(), get_018809(), get_018814()))
      }
      pub(super) fn get_018829() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_018831() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018832() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_018830() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018831(),
          CoreBinaryOperator::And(None),
          get_018832(),
        ))
      }
      pub(super) fn get_018828() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018829(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018830(),
        ))
      }
      pub(super) fn get_018833() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018827() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018828(),
          CoreBinaryOperator::LessThan(None),
          get_018833(),
        ))
      }
      pub(super) fn get_018835() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018837() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_018838() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_018836() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018837(),
          CoreBinaryOperator::Plus(None),
          get_018838(),
        ))
      }
      pub(super) fn get_018834() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018835(),
          CoreBinaryOperator::Mult(None),
          get_018836(),
        ))
      }
      pub(super) fn get_018842() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018843() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_018841() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018842(), get_018843()))
      }
      pub(super) fn get_018844() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_018846() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_018847() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018845() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018846(), get_018847()]))
      }
      pub(super) fn get_018840() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018841(),
          vec![get_018844(), get_018845()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018839() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018840()))
      }
      pub(super) fn get_018826() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018827(), get_018834(), get_018839()))
      }
      pub(super) fn get_018804() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_018805(),
          )],
          get_018826(),
        ))
      }
      pub(super) fn get_018798() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_018799(),
          )],
          get_018804(),
        ))
      }
      pub(super) fn get_018793() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_018794(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_018796(),
            ),
          ],
          get_018798(),
        ))
      }
      pub(super) fn get_018850() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018851() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_018849() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018850(), get_018851()))
      }
      pub(super) fn get_018852() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_018855() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018856() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_018854() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018855(), get_018856()))
      }
      pub(super) fn get_018857() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_018853() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018854(),
          vec![get_018857()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018858() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018848() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018849(),
          vec![get_018852(), get_018853(), get_018858()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018792() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_018793(),
          )],
          get_018848(),
        ))
      }
      pub(super) fn get_018786() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_018787(),
          )],
          get_018792(),
        ))
      }
      pub(super) fn get_018780() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_018781(),
          )],
          get_018786(),
        ))
      }
      pub(super) fn get_018774() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_018775(),
          )],
          get_018780(),
        ))
      }
      pub(super) fn get_018862() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018863() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_018861() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018862(), get_018863()))
      }
      pub(super) fn get_018864() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_018865() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018860() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018861(),
          vec![get_018864(), get_018865()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018859() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018860()))
      }
      pub(super) fn get_018766() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018767(), get_018774(), get_018859()))
      }
      pub(super) fn get_018761() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_018762(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_018764(),
            ),
          ],
          get_018766(),
        ))
      }
      pub(super) fn get_018866() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_018870() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_018871() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018869() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018870(), get_018871()))
      }
      pub(super) fn get_018873() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_018874() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_018872() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018873(), get_018874()))
      }
      pub(super) fn get_018868() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_018869(),
          )],
          get_018872(),
        ))
      }
      pub(super) fn get_018877() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_018878() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018876() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018877(), get_018878()))
      }
      pub(super) fn get_018879() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_018875() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_018876(),
          )],
          get_018879(),
        ))
      }
      pub(super) fn get_018883() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018884() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_018882() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018883(), get_018884()))
      }
      pub(super) fn get_018885() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018886() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_018881() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018882(),
          vec![get_018885(), get_018886()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018889() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018890() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_018888() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018889(), get_018890()))
      }
      pub(super) fn get_018891() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_018894() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018895() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_018893() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018894(), get_018895()))
      }
      pub(super) fn get_018898() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018899() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_018897() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018898(), get_018899()))
      }
      pub(super) fn get_018900() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_018896() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018897(),
          vec![get_018900()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018903() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_018902() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018903()))
      }
      pub(super) fn get_018906() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_018907() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_018905() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018906(), get_018907()))
      }
      pub(super) fn get_018910() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_018909() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018910()]))
      }
      pub(super) fn get_018908() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_018909()]))
      }
      pub(super) fn get_018904() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_018905(),
          )],
          get_018908(),
        ))
      }
      pub(super) fn get_018901() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_018902(),
          )],
          get_018904(),
        ))
      }
      pub(super) fn get_018892() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018893(),
          vec![get_018896(), get_018901()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018887() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018888(),
          vec![get_018891(), get_018892()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018880() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_018881(),
          )],
          get_018887(),
        ))
      }
      pub(super) fn get_018867() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_018868(),
          get_018875(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_018880(),
        ))
      }
      pub(super) fn get_018913() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'o' not bound"))
      }
      pub(super) fn get_018912() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018913()))
      }
      pub(super) fn get_018916() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018917() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFieldsEx"))
      }
      pub(super) fn get_018915() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018916(), get_018917()))
      }
      pub(super) fn get_018918() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("o", 563u32)
        }))
      }
      pub(super) fn get_018919() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_018914() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018915(),
          vec![get_018918(), get_018919()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018911() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("o", 563u32) },
            get_018912(),
          )],
          get_018914(),
        ))
      }
      pub(super) fn get_018754() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_018755()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_018756(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_018757(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_018761(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_018866(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_018867(),
            ),
          ],
          get_018911(),
        ))
      }
      pub(super) fn get_018920() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFieldsAll"))
      }
      pub(super) fn get_018922() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_018923() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_018926() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_018925() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018926()))
      }
      pub(super) fn get_018927() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_018924() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_018925(),
          )],
          get_018927(),
        ))
      }
      pub(super) fn get_018930() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_018929() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018930()))
      }
      pub(super) fn get_018932() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_018931() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018932()))
      }
      pub(super) fn get_018936() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018938() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018939() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018937() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018938(),
          CoreBinaryOperator::And(None),
          get_018939(),
        ))
      }
      pub(super) fn get_018935() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018936(),
          CoreBinaryOperator::GreaterThan(None),
          get_018937(),
        ))
      }
      pub(super) fn get_018940() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_018934() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018935(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_018940(),
        ))
      }
      pub(super) fn get_018944() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018945() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018943() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018944(), get_018945()))
      }
      pub(super) fn get_018946() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_018942() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018943(),
          vec![get_018946()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018950() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018951() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018949() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018950(), get_018951()))
      }
      pub(super) fn get_018952() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_018948() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018949(),
          vec![get_018952()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018956() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018957() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018955() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018956(), get_018957()))
      }
      pub(super) fn get_018958() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_018954() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018955(),
          vec![get_018958()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018962() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_018961() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018962()))
      }
      pub(super) fn get_018964() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_018963() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_018964()))
      }
      pub(super) fn get_018968() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_018969() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_018967() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_018968(), get_018969()))
      }
      pub(super) fn get_018970() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_018966() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_018967(),
          vec![get_018970()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018974() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018975() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_018973() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018974(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018975(),
        ))
      }
      pub(super) fn get_018978() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018979() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_018977() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018978(),
          CoreBinaryOperator::Minus(None),
          get_018979(),
        ))
      }
      pub(super) fn get_018980() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_018976() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018977(),
          CoreBinaryOperator::Plus(None),
          get_018980(),
        ))
      }
      pub(super) fn get_018983() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018984() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_018982() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018983(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018984(),
        ))
      }
      pub(super) fn get_018987() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018988() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_018986() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018987(),
          CoreBinaryOperator::Minus(None),
          get_018988(),
        ))
      }
      pub(super) fn get_018989() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_018985() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018986(),
          CoreBinaryOperator::Plus(None),
          get_018989(),
        ))
      }
      pub(super) fn get_018991() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_018992() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_018990() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018991(),
          CoreBinaryOperator::Minus(None),
          get_018992(),
        ))
      }
      pub(super) fn get_018981() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018982(), get_018985(), get_018990()))
      }
      pub(super) fn get_018972() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018973(), get_018976(), get_018981()))
      }
      pub(super) fn get_018996() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_018998() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_018999() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_018997() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018998(),
          CoreBinaryOperator::And(None),
          get_018999(),
        ))
      }
      pub(super) fn get_018995() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018996(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_018997(),
        ))
      }
      pub(super) fn get_019000() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_018994() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_018995(),
          CoreBinaryOperator::LessThan(None),
          get_019000(),
        ))
      }
      pub(super) fn get_019002() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019004() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_019005() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019003() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019004(),
          CoreBinaryOperator::Plus(None),
          get_019005(),
        ))
      }
      pub(super) fn get_019001() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019002(),
          CoreBinaryOperator::Mult(None),
          get_019003(),
        ))
      }
      pub(super) fn get_019009() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019010() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_019008() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019009(), get_019010()))
      }
      pub(super) fn get_019011() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_019013() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_019014() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019012() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019013(), get_019014()]))
      }
      pub(super) fn get_019007() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019008(),
          vec![get_019011(), get_019012()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019006() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019007()))
      }
      pub(super) fn get_018993() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018994(), get_019001(), get_019006()))
      }
      pub(super) fn get_018971() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_018972(),
          )],
          get_018993(),
        ))
      }
      pub(super) fn get_018965() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_018966(),
          )],
          get_018971(),
        ))
      }
      pub(super) fn get_018960() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_018961(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_018963(),
            ),
          ],
          get_018965(),
        ))
      }
      pub(super) fn get_019017() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019018() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_019016() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019017(), get_019018()))
      }
      pub(super) fn get_019019() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_019022() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019023() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_019021() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019022(), get_019023()))
      }
      pub(super) fn get_019024() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_019020() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019021(),
          vec![get_019024()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019025() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019015() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019016(),
          vec![get_019019(), get_019020(), get_019025()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_018959() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_018960(),
          )],
          get_019015(),
        ))
      }
      pub(super) fn get_018953() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_018954(),
          )],
          get_018959(),
        ))
      }
      pub(super) fn get_018947() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_018948(),
          )],
          get_018953(),
        ))
      }
      pub(super) fn get_018941() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_018942(),
          )],
          get_018947(),
        ))
      }
      pub(super) fn get_019029() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019030() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_019028() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019029(), get_019030()))
      }
      pub(super) fn get_019031() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_019032() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019027() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019028(),
          vec![get_019031(), get_019032()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019026() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019027()))
      }
      pub(super) fn get_018933() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_018934(), get_018941(), get_019026()))
      }
      pub(super) fn get_018928() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_018929(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_018931(),
            ),
          ],
          get_018933(),
        ))
      }
      pub(super) fn get_019033() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_019037() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_019038() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019036() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019037(), get_019038()))
      }
      pub(super) fn get_019040() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_019041() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019039() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019040(), get_019041()))
      }
      pub(super) fn get_019035() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019036(),
          )],
          get_019039(),
        ))
      }
      pub(super) fn get_019044() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_019045() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019043() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019044(), get_019045()))
      }
      pub(super) fn get_019046() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019042() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019043(),
          )],
          get_019046(),
        ))
      }
      pub(super) fn get_019050() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019051() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_019049() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019050(), get_019051()))
      }
      pub(super) fn get_019052() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019053() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_019048() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019049(),
          vec![get_019052(), get_019053()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019056() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019057() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_019055() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019056(), get_019057()))
      }
      pub(super) fn get_019058() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_019061() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019062() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_019060() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019061(), get_019062()))
      }
      pub(super) fn get_019065() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019066() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_019064() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019065(), get_019066()))
      }
      pub(super) fn get_019067() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_019063() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019064(),
          vec![get_019067()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019070() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_019069() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019070()))
      }
      pub(super) fn get_019073() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_019074() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_019072() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019073(), get_019074()))
      }
      pub(super) fn get_019077() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019076() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019077()]))
      }
      pub(super) fn get_019075() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019076()]))
      }
      pub(super) fn get_019071() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019072(),
          )],
          get_019075(),
        ))
      }
      pub(super) fn get_019068() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_019069(),
          )],
          get_019071(),
        ))
      }
      pub(super) fn get_019059() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019060(),
          vec![get_019063(), get_019068()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019054() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019055(),
          vec![get_019058(), get_019059()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019047() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_019048(),
          )],
          get_019054(),
        ))
      }
      pub(super) fn get_019034() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_019035(),
          get_019042(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_019047(),
        ))
      }
      pub(super) fn get_019080() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'o' not bound"))
      }
      pub(super) fn get_019079() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019080()))
      }
      pub(super) fn get_019083() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019084() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFieldsEx"))
      }
      pub(super) fn get_019082() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019083(), get_019084()))
      }
      pub(super) fn get_019085() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("o", 564u32)
        }))
      }
      pub(super) fn get_019086() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_019081() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019082(),
          vec![get_019085(), get_019086()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019078() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("o", 564u32) },
            get_019079(),
          )],
          get_019081(),
        ))
      }
      pub(super) fn get_018921() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_018922()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_018923(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_018924(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_018928(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_019033(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_019034(),
            ),
          ],
          get_019078(),
        ))
      }
      pub(super) fn get_019087() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectHas"))
      }
      pub(super) fn get_019089() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_019090() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_019093() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_019092() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019093()))
      }
      pub(super) fn get_019094() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_019091() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_019092(),
          )],
          get_019094(),
        ))
      }
      pub(super) fn get_019097() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_019096() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019097()))
      }
      pub(super) fn get_019099() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_019098() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019099()))
      }
      pub(super) fn get_019103() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019105() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019106() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019104() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019105(),
          CoreBinaryOperator::And(None),
          get_019106(),
        ))
      }
      pub(super) fn get_019102() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019103(),
          CoreBinaryOperator::GreaterThan(None),
          get_019104(),
        ))
      }
      pub(super) fn get_019107() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_019101() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019102(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_019107(),
        ))
      }
      pub(super) fn get_019111() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019112() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019110() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019111(), get_019112()))
      }
      pub(super) fn get_019113() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_019109() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019110(),
          vec![get_019113()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019117() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019118() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019116() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019117(), get_019118()))
      }
      pub(super) fn get_019119() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_019115() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019116(),
          vec![get_019119()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019123() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019124() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019122() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019123(), get_019124()))
      }
      pub(super) fn get_019125() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_019121() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019122(),
          vec![get_019125()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019129() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_019128() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019129()))
      }
      pub(super) fn get_019131() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_019130() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019131()))
      }
      pub(super) fn get_019135() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019136() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019134() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019135(), get_019136()))
      }
      pub(super) fn get_019137() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_019133() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019134(),
          vec![get_019137()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019141() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019142() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_019140() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019141(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019142(),
        ))
      }
      pub(super) fn get_019145() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019146() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_019144() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019145(),
          CoreBinaryOperator::Minus(None),
          get_019146(),
        ))
      }
      pub(super) fn get_019147() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_019143() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019144(),
          CoreBinaryOperator::Plus(None),
          get_019147(),
        ))
      }
      pub(super) fn get_019150() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019151() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_019149() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019150(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019151(),
        ))
      }
      pub(super) fn get_019154() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019155() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_019153() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019154(),
          CoreBinaryOperator::Minus(None),
          get_019155(),
        ))
      }
      pub(super) fn get_019156() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_019152() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019153(),
          CoreBinaryOperator::Plus(None),
          get_019156(),
        ))
      }
      pub(super) fn get_019158() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019159() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_019157() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019158(),
          CoreBinaryOperator::Minus(None),
          get_019159(),
        ))
      }
      pub(super) fn get_019148() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019149(), get_019152(), get_019157()))
      }
      pub(super) fn get_019139() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019140(), get_019143(), get_019148()))
      }
      pub(super) fn get_019163() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019165() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019166() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019164() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019165(),
          CoreBinaryOperator::And(None),
          get_019166(),
        ))
      }
      pub(super) fn get_019162() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019163(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019164(),
        ))
      }
      pub(super) fn get_019167() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019161() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019162(),
          CoreBinaryOperator::LessThan(None),
          get_019167(),
        ))
      }
      pub(super) fn get_019169() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019171() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_019172() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019170() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019171(),
          CoreBinaryOperator::Plus(None),
          get_019172(),
        ))
      }
      pub(super) fn get_019168() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019169(),
          CoreBinaryOperator::Mult(None),
          get_019170(),
        ))
      }
      pub(super) fn get_019176() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019177() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_019175() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019176(), get_019177()))
      }
      pub(super) fn get_019178() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_019180() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_019181() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019179() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019180(), get_019181()]))
      }
      pub(super) fn get_019174() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019175(),
          vec![get_019178(), get_019179()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019173() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019174()))
      }
      pub(super) fn get_019160() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019161(), get_019168(), get_019173()))
      }
      pub(super) fn get_019138() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_019139(),
          )],
          get_019160(),
        ))
      }
      pub(super) fn get_019132() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_019133(),
          )],
          get_019138(),
        ))
      }
      pub(super) fn get_019127() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_019128(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_019130(),
            ),
          ],
          get_019132(),
        ))
      }
      pub(super) fn get_019184() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019185() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_019183() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019184(), get_019185()))
      }
      pub(super) fn get_019186() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_019189() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019190() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_019188() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019189(), get_019190()))
      }
      pub(super) fn get_019191() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_019187() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019188(),
          vec![get_019191()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019192() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019182() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019183(),
          vec![get_019186(), get_019187(), get_019192()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019126() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_019127(),
          )],
          get_019182(),
        ))
      }
      pub(super) fn get_019120() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_019121(),
          )],
          get_019126(),
        ))
      }
      pub(super) fn get_019114() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_019115(),
          )],
          get_019120(),
        ))
      }
      pub(super) fn get_019108() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_019109(),
          )],
          get_019114(),
        ))
      }
      pub(super) fn get_019196() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019197() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_019195() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019196(), get_019197()))
      }
      pub(super) fn get_019198() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_019199() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019194() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019195(),
          vec![get_019198(), get_019199()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019193() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019194()))
      }
      pub(super) fn get_019100() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019101(), get_019108(), get_019193()))
      }
      pub(super) fn get_019095() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_019096(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_019098(),
            ),
          ],
          get_019100(),
        ))
      }
      pub(super) fn get_019200() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_019204() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_019205() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019203() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019204(), get_019205()))
      }
      pub(super) fn get_019207() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_019208() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019206() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019207(), get_019208()))
      }
      pub(super) fn get_019202() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019203(),
          )],
          get_019206(),
        ))
      }
      pub(super) fn get_019211() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_019212() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019210() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019211(), get_019212()))
      }
      pub(super) fn get_019213() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019209() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019210(),
          )],
          get_019213(),
        ))
      }
      pub(super) fn get_019217() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019218() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_019216() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019217(), get_019218()))
      }
      pub(super) fn get_019219() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019220() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_019215() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019216(),
          vec![get_019219(), get_019220()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019223() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019224() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_019222() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019223(), get_019224()))
      }
      pub(super) fn get_019225() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_019228() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019229() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_019227() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019228(), get_019229()))
      }
      pub(super) fn get_019232() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019233() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_019231() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019232(), get_019233()))
      }
      pub(super) fn get_019234() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_019230() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019231(),
          vec![get_019234()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019237() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_019236() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019237()))
      }
      pub(super) fn get_019240() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_019241() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_019239() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019240(), get_019241()))
      }
      pub(super) fn get_019244() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019243() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019244()]))
      }
      pub(super) fn get_019242() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019243()]))
      }
      pub(super) fn get_019238() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019239(),
          )],
          get_019242(),
        ))
      }
      pub(super) fn get_019235() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_019236(),
          )],
          get_019238(),
        ))
      }
      pub(super) fn get_019226() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019227(),
          vec![get_019230(), get_019235()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019221() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019222(),
          vec![get_019225(), get_019226()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019214() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_019215(),
          )],
          get_019221(),
        ))
      }
      pub(super) fn get_019201() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_019202(),
          get_019209(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_019214(),
        ))
      }
      pub(super) fn get_019247() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'o' not bound"))
      }
      pub(super) fn get_019246() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019247()))
      }
      pub(super) fn get_019249() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'f' not bound"))
      }
      pub(super) fn get_019248() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019249()))
      }
      pub(super) fn get_019252() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019253() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectHasEx"))
      }
      pub(super) fn get_019251() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019252(), get_019253()))
      }
      pub(super) fn get_019254() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("o", 565u32)
        }))
      }
      pub(super) fn get_019255() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("f", 566u32)
        }))
      }
      pub(super) fn get_019256() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_019250() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019251(),
          vec![get_019254(), get_019255(), get_019256()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019245() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("o", 565u32) },
              get_019246(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("f", 566u32) },
              get_019248(),
            ),
          ],
          get_019250(),
        ))
      }
      pub(super) fn get_019088() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_019089()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_019090(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_019091(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_019095(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_019200(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_019201(),
            ),
          ],
          get_019245(),
        ))
      }
      pub(super) fn get_019257() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectHasAll"))
      }
      pub(super) fn get_019259() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_019260() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_019263() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_019262() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019263()))
      }
      pub(super) fn get_019264() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_019261() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_019262(),
          )],
          get_019264(),
        ))
      }
      pub(super) fn get_019267() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_019266() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019267()))
      }
      pub(super) fn get_019269() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_019268() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019269()))
      }
      pub(super) fn get_019273() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019275() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019276() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019274() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019275(),
          CoreBinaryOperator::And(None),
          get_019276(),
        ))
      }
      pub(super) fn get_019272() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019273(),
          CoreBinaryOperator::GreaterThan(None),
          get_019274(),
        ))
      }
      pub(super) fn get_019277() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_019271() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019272(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_019277(),
        ))
      }
      pub(super) fn get_019281() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019282() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019280() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019281(), get_019282()))
      }
      pub(super) fn get_019283() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_019279() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019280(),
          vec![get_019283()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019287() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019288() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019286() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019287(), get_019288()))
      }
      pub(super) fn get_019289() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_019285() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019286(),
          vec![get_019289()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019293() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019294() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019292() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019293(), get_019294()))
      }
      pub(super) fn get_019295() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_019291() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019292(),
          vec![get_019295()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019299() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_019298() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019299()))
      }
      pub(super) fn get_019301() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_019300() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019301()))
      }
      pub(super) fn get_019305() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019306() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019304() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019305(), get_019306()))
      }
      pub(super) fn get_019307() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_019303() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019304(),
          vec![get_019307()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019311() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019312() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_019310() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019311(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019312(),
        ))
      }
      pub(super) fn get_019315() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019316() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_019314() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019315(),
          CoreBinaryOperator::Minus(None),
          get_019316(),
        ))
      }
      pub(super) fn get_019317() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_019313() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019314(),
          CoreBinaryOperator::Plus(None),
          get_019317(),
        ))
      }
      pub(super) fn get_019320() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019321() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_019319() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019320(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019321(),
        ))
      }
      pub(super) fn get_019324() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019325() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_019323() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019324(),
          CoreBinaryOperator::Minus(None),
          get_019325(),
        ))
      }
      pub(super) fn get_019326() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_019322() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019323(),
          CoreBinaryOperator::Plus(None),
          get_019326(),
        ))
      }
      pub(super) fn get_019328() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019329() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_019327() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019328(),
          CoreBinaryOperator::Minus(None),
          get_019329(),
        ))
      }
      pub(super) fn get_019318() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019319(), get_019322(), get_019327()))
      }
      pub(super) fn get_019309() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019310(), get_019313(), get_019318()))
      }
      pub(super) fn get_019333() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019335() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019336() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019334() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019335(),
          CoreBinaryOperator::And(None),
          get_019336(),
        ))
      }
      pub(super) fn get_019332() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019333(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019334(),
        ))
      }
      pub(super) fn get_019337() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019331() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019332(),
          CoreBinaryOperator::LessThan(None),
          get_019337(),
        ))
      }
      pub(super) fn get_019339() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019341() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_019342() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019340() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019341(),
          CoreBinaryOperator::Plus(None),
          get_019342(),
        ))
      }
      pub(super) fn get_019338() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019339(),
          CoreBinaryOperator::Mult(None),
          get_019340(),
        ))
      }
      pub(super) fn get_019346() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019347() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_019345() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019346(), get_019347()))
      }
      pub(super) fn get_019348() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_019350() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_019351() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019349() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019350(), get_019351()]))
      }
      pub(super) fn get_019344() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019345(),
          vec![get_019348(), get_019349()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019343() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019344()))
      }
      pub(super) fn get_019330() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019331(), get_019338(), get_019343()))
      }
      pub(super) fn get_019308() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_019309(),
          )],
          get_019330(),
        ))
      }
      pub(super) fn get_019302() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_019303(),
          )],
          get_019308(),
        ))
      }
      pub(super) fn get_019297() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_019298(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_019300(),
            ),
          ],
          get_019302(),
        ))
      }
      pub(super) fn get_019354() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019355() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_019353() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019354(), get_019355()))
      }
      pub(super) fn get_019356() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_019359() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019360() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_019358() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019359(), get_019360()))
      }
      pub(super) fn get_019361() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_019357() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019358(),
          vec![get_019361()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019362() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019352() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019353(),
          vec![get_019356(), get_019357(), get_019362()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019296() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_019297(),
          )],
          get_019352(),
        ))
      }
      pub(super) fn get_019290() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_019291(),
          )],
          get_019296(),
        ))
      }
      pub(super) fn get_019284() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_019285(),
          )],
          get_019290(),
        ))
      }
      pub(super) fn get_019278() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_019279(),
          )],
          get_019284(),
        ))
      }
      pub(super) fn get_019366() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019367() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_019365() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019366(), get_019367()))
      }
      pub(super) fn get_019368() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_019369() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019364() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019365(),
          vec![get_019368(), get_019369()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019363() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019364()))
      }
      pub(super) fn get_019270() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019271(), get_019278(), get_019363()))
      }
      pub(super) fn get_019265() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_019266(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_019268(),
            ),
          ],
          get_019270(),
        ))
      }
      pub(super) fn get_019370() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_019374() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_019375() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019373() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019374(), get_019375()))
      }
      pub(super) fn get_019377() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_019378() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019376() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019377(), get_019378()))
      }
      pub(super) fn get_019372() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019373(),
          )],
          get_019376(),
        ))
      }
      pub(super) fn get_019381() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_019382() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019380() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019381(), get_019382()))
      }
      pub(super) fn get_019383() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019379() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019380(),
          )],
          get_019383(),
        ))
      }
      pub(super) fn get_019387() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019388() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_019386() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019387(), get_019388()))
      }
      pub(super) fn get_019389() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019390() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_019385() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019386(),
          vec![get_019389(), get_019390()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019393() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019394() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_019392() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019393(), get_019394()))
      }
      pub(super) fn get_019395() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_019398() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019399() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_019397() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019398(), get_019399()))
      }
      pub(super) fn get_019402() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019403() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_019401() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019402(), get_019403()))
      }
      pub(super) fn get_019404() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_019400() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019401(),
          vec![get_019404()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019407() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_019406() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019407()))
      }
      pub(super) fn get_019410() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_019411() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_019409() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019410(), get_019411()))
      }
      pub(super) fn get_019414() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019413() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019414()]))
      }
      pub(super) fn get_019412() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019413()]))
      }
      pub(super) fn get_019408() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019409(),
          )],
          get_019412(),
        ))
      }
      pub(super) fn get_019405() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_019406(),
          )],
          get_019408(),
        ))
      }
      pub(super) fn get_019396() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019397(),
          vec![get_019400(), get_019405()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019391() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019392(),
          vec![get_019395(), get_019396()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019384() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_019385(),
          )],
          get_019391(),
        ))
      }
      pub(super) fn get_019371() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_019372(),
          get_019379(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_019384(),
        ))
      }
      pub(super) fn get_019417() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'o' not bound"))
      }
      pub(super) fn get_019416() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019417()))
      }
      pub(super) fn get_019419() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'f' not bound"))
      }
      pub(super) fn get_019418() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019419()))
      }
      pub(super) fn get_019422() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019423() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectHasEx"))
      }
      pub(super) fn get_019421() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019422(), get_019423()))
      }
      pub(super) fn get_019424() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("o", 567u32)
        }))
      }
      pub(super) fn get_019425() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("f", 568u32)
        }))
      }
      pub(super) fn get_019426() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_019420() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019421(),
          vec![get_019424(), get_019425(), get_019426()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019415() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("o", 567u32) },
              get_019416(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("f", 568u32) },
              get_019418(),
            ),
          ],
          get_019420(),
        ))
      }
      pub(super) fn get_019258() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_019259()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_019260(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_019261(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_019265(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_019370(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_019371(),
            ),
          ],
          get_019415(),
        ))
      }
      pub(super) fn get_019427() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_019429() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_019430() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_019433() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_019432() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019433()))
      }
      pub(super) fn get_019434() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_019431() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_019432(),
          )],
          get_019434(),
        ))
      }
      pub(super) fn get_019437() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_019436() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019437()))
      }
      pub(super) fn get_019439() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_019438() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019439()))
      }
      pub(super) fn get_019443() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019445() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019446() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019444() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019445(),
          CoreBinaryOperator::And(None),
          get_019446(),
        ))
      }
      pub(super) fn get_019442() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019443(),
          CoreBinaryOperator::GreaterThan(None),
          get_019444(),
        ))
      }
      pub(super) fn get_019447() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_019441() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019442(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_019447(),
        ))
      }
      pub(super) fn get_019451() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019452() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019450() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019451(), get_019452()))
      }
      pub(super) fn get_019453() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_019449() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019450(),
          vec![get_019453()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019457() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019458() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019456() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019457(), get_019458()))
      }
      pub(super) fn get_019459() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_019455() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019456(),
          vec![get_019459()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019463() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019464() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019462() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019463(), get_019464()))
      }
      pub(super) fn get_019465() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_019461() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019462(),
          vec![get_019465()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019469() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_019468() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019469()))
      }
      pub(super) fn get_019471() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_019470() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019471()))
      }
      pub(super) fn get_019475() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019476() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019474() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019475(), get_019476()))
      }
      pub(super) fn get_019477() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_019473() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019474(),
          vec![get_019477()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019481() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019482() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_019480() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019481(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019482(),
        ))
      }
      pub(super) fn get_019485() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019486() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_019484() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019485(),
          CoreBinaryOperator::Minus(None),
          get_019486(),
        ))
      }
      pub(super) fn get_019487() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_019483() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019484(),
          CoreBinaryOperator::Plus(None),
          get_019487(),
        ))
      }
      pub(super) fn get_019490() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019491() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_019489() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019490(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019491(),
        ))
      }
      pub(super) fn get_019494() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019495() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_019493() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019494(),
          CoreBinaryOperator::Minus(None),
          get_019495(),
        ))
      }
      pub(super) fn get_019496() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_019492() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019493(),
          CoreBinaryOperator::Plus(None),
          get_019496(),
        ))
      }
      pub(super) fn get_019498() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019499() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_019497() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019498(),
          CoreBinaryOperator::Minus(None),
          get_019499(),
        ))
      }
      pub(super) fn get_019488() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019489(), get_019492(), get_019497()))
      }
      pub(super) fn get_019479() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019480(), get_019483(), get_019488()))
      }
      pub(super) fn get_019503() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019505() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019506() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019504() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019505(),
          CoreBinaryOperator::And(None),
          get_019506(),
        ))
      }
      pub(super) fn get_019502() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019503(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019504(),
        ))
      }
      pub(super) fn get_019507() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019501() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019502(),
          CoreBinaryOperator::LessThan(None),
          get_019507(),
        ))
      }
      pub(super) fn get_019509() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019511() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_019512() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019510() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019511(),
          CoreBinaryOperator::Plus(None),
          get_019512(),
        ))
      }
      pub(super) fn get_019508() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019509(),
          CoreBinaryOperator::Mult(None),
          get_019510(),
        ))
      }
      pub(super) fn get_019516() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019517() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_019515() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019516(), get_019517()))
      }
      pub(super) fn get_019518() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_019520() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_019521() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019519() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019520(), get_019521()]))
      }
      pub(super) fn get_019514() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019515(),
          vec![get_019518(), get_019519()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019513() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019514()))
      }
      pub(super) fn get_019500() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019501(), get_019508(), get_019513()))
      }
      pub(super) fn get_019478() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_019479(),
          )],
          get_019500(),
        ))
      }
      pub(super) fn get_019472() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_019473(),
          )],
          get_019478(),
        ))
      }
      pub(super) fn get_019467() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_019468(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_019470(),
            ),
          ],
          get_019472(),
        ))
      }
      pub(super) fn get_019524() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019525() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_019523() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019524(), get_019525()))
      }
      pub(super) fn get_019526() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_019529() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019530() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_019528() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019529(), get_019530()))
      }
      pub(super) fn get_019531() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_019527() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019528(),
          vec![get_019531()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019532() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019522() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019523(),
          vec![get_019526(), get_019527(), get_019532()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019466() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_019467(),
          )],
          get_019522(),
        ))
      }
      pub(super) fn get_019460() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_019461(),
          )],
          get_019466(),
        ))
      }
      pub(super) fn get_019454() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_019455(),
          )],
          get_019460(),
        ))
      }
      pub(super) fn get_019448() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_019449(),
          )],
          get_019454(),
        ))
      }
      pub(super) fn get_019536() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019537() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_019535() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019536(), get_019537()))
      }
      pub(super) fn get_019538() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_019539() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019534() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019535(),
          vec![get_019538(), get_019539()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019533() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019534()))
      }
      pub(super) fn get_019440() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019441(), get_019448(), get_019533()))
      }
      pub(super) fn get_019435() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_019436(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_019438(),
            ),
          ],
          get_019440(),
        ))
      }
      pub(super) fn get_019540() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_019544() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_019545() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019543() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019544(), get_019545()))
      }
      pub(super) fn get_019547() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_019548() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019546() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019547(), get_019548()))
      }
      pub(super) fn get_019542() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019543(),
          )],
          get_019546(),
        ))
      }
      pub(super) fn get_019551() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_019552() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019550() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019551(), get_019552()))
      }
      pub(super) fn get_019553() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019549() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019550(),
          )],
          get_019553(),
        ))
      }
      pub(super) fn get_019557() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019558() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_019556() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019557(), get_019558()))
      }
      pub(super) fn get_019559() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019560() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_019555() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019556(),
          vec![get_019559(), get_019560()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019563() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019564() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_019562() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019563(), get_019564()))
      }
      pub(super) fn get_019565() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_019568() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019569() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_019567() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019568(), get_019569()))
      }
      pub(super) fn get_019572() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019573() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_019571() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019572(), get_019573()))
      }
      pub(super) fn get_019574() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_019570() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019571(),
          vec![get_019574()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019577() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_019576() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019577()))
      }
      pub(super) fn get_019580() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_019581() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_019579() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019580(), get_019581()))
      }
      pub(super) fn get_019584() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019583() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019584()]))
      }
      pub(super) fn get_019582() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019583()]))
      }
      pub(super) fn get_019578() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019579(),
          )],
          get_019582(),
        ))
      }
      pub(super) fn get_019575() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_019576(),
          )],
          get_019578(),
        ))
      }
      pub(super) fn get_019566() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019567(),
          vec![get_019570(), get_019575()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019561() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019562(),
          vec![get_019565(), get_019566()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019554() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_019555(),
          )],
          get_019561(),
        ))
      }
      pub(super) fn get_019541() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_019542(),
          get_019549(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_019554(),
        ))
      }
      pub(super) fn get_019587() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_019586() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019587()))
      }
      pub(super) fn get_019589() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_019588() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019589()))
      }
      pub(super) fn get_019593() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019594() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_019592() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019593(), get_019594()))
      }
      pub(super) fn get_019595() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 569u32)
        }))
      }
      pub(super) fn get_019591() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019592(),
          vec![get_019595()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019599() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019600() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_019598() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019599(), get_019600()))
      }
      pub(super) fn get_019601() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 570u32)
        }))
      }
      pub(super) fn get_019597() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019598(),
          vec![get_019601()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019606() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019607() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("primitiveEquals"))
      }
      pub(super) fn get_019605() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019606(), get_019607()))
      }
      pub(super) fn get_019608() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ta", 571u32)
        }))
      }
      pub(super) fn get_019609() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("tb", 572u32)
        }))
      }
      pub(super) fn get_019604() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019605(),
          vec![get_019608(), get_019609()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019603() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_019604(),
        ))
      }
      pub(super) fn get_019610() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_019614() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019615() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("primitiveEquals"))
      }
      pub(super) fn get_019613() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019614(), get_019615()))
      }
      pub(super) fn get_019616() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ta", 571u32)
        }))
      }
      pub(super) fn get_019617() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("array"))
      }
      pub(super) fn get_019612() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019613(),
          vec![get_019616(), get_019617()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019621() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019622() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_019620() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019621(), get_019622()))
      }
      pub(super) fn get_019623() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 569u32)
        }))
      }
      pub(super) fn get_019619() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019620(),
          vec![get_019623()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019628() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019629() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("primitiveEquals"))
      }
      pub(super) fn get_019627() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019628(), get_019629()))
      }
      pub(super) fn get_019630() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("la", 573u32)
        }))
      }
      pub(super) fn get_019633() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019634() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_019632() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019633(), get_019634()))
      }
      pub(super) fn get_019635() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 570u32)
        }))
      }
      pub(super) fn get_019631() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019632(),
          vec![get_019635()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019626() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019627(),
          vec![get_019630(), get_019631()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019625() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_019626(),
        ))
      }
      pub(super) fn get_019636() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_019640() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_019639() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019640()))
      }
      pub(super) fn get_019642() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_019641() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019642()))
      }
      pub(super) fn get_019644() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_019643() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019644()))
      }
      pub(super) fn get_019647() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 577u32)
        }))
      }
      pub(super) fn get_019648() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("la", 573u32)
        }))
      }
      pub(super) fn get_019646() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019647(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019648(),
        ))
      }
      pub(super) fn get_019649() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_019654() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019655() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_019653() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019654(), get_019655()))
      }
      pub(super) fn get_019657() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 575u32)
        }))
      }
      pub(super) fn get_019658() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 577u32)
        }))
      }
      pub(super) fn get_019656() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019657(), get_019658()))
      }
      pub(super) fn get_019660() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 576u32)
        }))
      }
      pub(super) fn get_019661() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 577u32)
        }))
      }
      pub(super) fn get_019659() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019660(), get_019661()))
      }
      pub(super) fn get_019652() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019653(),
          vec![get_019656(), get_019659()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019651() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_019652(),
        ))
      }
      pub(super) fn get_019662() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_019664() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 574u32)
        }))
      }
      pub(super) fn get_019665() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 575u32)
        }))
      }
      pub(super) fn get_019666() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 576u32)
        }))
      }
      pub(super) fn get_019668() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 577u32)
        }))
      }
      pub(super) fn get_019669() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_019667() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019668(),
          CoreBinaryOperator::Plus(None),
          get_019669(),
        ))
      }
      pub(super) fn get_019663() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019664(),
          vec![get_019665(), get_019666(), get_019667()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_019650() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019651(), get_019662(), get_019663()))
      }
      pub(super) fn get_019645() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019646(), get_019649(), get_019650()))
      }
      pub(super) fn get_019638() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 575u32) },
              get_019639(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 576u32) },
              get_019641(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 577u32) },
              get_019643(),
            ),
          ],
          get_019645(),
        ))
      }
      pub(super) fn get_019671() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 574u32)
        }))
      }
      pub(super) fn get_019672() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 569u32)
        }))
      }
      pub(super) fn get_019673() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 570u32)
        }))
      }
      pub(super) fn get_019674() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019670() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019671(),
          vec![get_019672(), get_019673(), get_019674()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019637() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 574u32) },
            get_019638(),
          )],
          get_019670(),
        ))
      }
      pub(super) fn get_019624() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019625(), get_019636(), get_019637()))
      }
      pub(super) fn get_019618() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("la", 573u32) },
            get_019619(),
          )],
          get_019624(),
        ))
      }
      pub(super) fn get_019678() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019679() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("primitiveEquals"))
      }
      pub(super) fn get_019677() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019678(), get_019679()))
      }
      pub(super) fn get_019680() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("ta", 571u32)
        }))
      }
      pub(super) fn get_019681() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("object"))
      }
      pub(super) fn get_019676() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019677(),
          vec![get_019680(), get_019681()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019685() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019686() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_019684() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019685(), get_019686()))
      }
      pub(super) fn get_019687() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 569u32)
        }))
      }
      pub(super) fn get_019683() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019684(),
          vec![get_019687()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019691() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019692() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_019690() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019691(), get_019692()))
      }
      pub(super) fn get_019693() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fields", 578u32)
        }))
      }
      pub(super) fn get_019689() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019690(),
          vec![get_019693()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019698() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019699() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_019697() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019698(), get_019699()))
      }
      pub(super) fn get_019700() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fields", 578u32)
        }))
      }
      pub(super) fn get_019703() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019704() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_019702() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019703(), get_019704()))
      }
      pub(super) fn get_019705() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 570u32)
        }))
      }
      pub(super) fn get_019701() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019702(),
          vec![get_019705()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019696() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019697(),
          vec![get_019700(), get_019701()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019695() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_019696(),
        ))
      }
      pub(super) fn get_019706() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_019710() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_019709() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019710()))
      }
      pub(super) fn get_019712() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_019711() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019712()))
      }
      pub(super) fn get_019714() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_019713() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019714()))
      }
      pub(super) fn get_019717() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 583u32)
        }))
      }
      pub(super) fn get_019718() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lfields", 579u32)
        }))
      }
      pub(super) fn get_019716() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019717(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019718(),
        ))
      }
      pub(super) fn get_019719() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_019723() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("fields", 578u32)
        }))
      }
      pub(super) fn get_019724() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 583u32)
        }))
      }
      pub(super) fn get_019722() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019723(), get_019724()))
      }
      pub(super) fn get_019728() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019729() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_019727() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019728(), get_019729()))
      }
      pub(super) fn get_019731() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 581u32)
        }))
      }
      pub(super) fn get_019732() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("f", 584u32)
        }))
      }
      pub(super) fn get_019730() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019731(), get_019732()))
      }
      pub(super) fn get_019734() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 582u32)
        }))
      }
      pub(super) fn get_019735() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("f", 584u32)
        }))
      }
      pub(super) fn get_019733() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019734(), get_019735()))
      }
      pub(super) fn get_019726() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019727(),
          vec![get_019730(), get_019733()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019725() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_019726(),
        ))
      }
      pub(super) fn get_019721() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("f", 584u32) },
            get_019722(),
          )],
          get_019725(),
        ))
      }
      pub(super) fn get_019736() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_019738() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 580u32)
        }))
      }
      pub(super) fn get_019739() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 581u32)
        }))
      }
      pub(super) fn get_019740() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 582u32)
        }))
      }
      pub(super) fn get_019742() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 583u32)
        }))
      }
      pub(super) fn get_019743() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_019741() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019742(),
          CoreBinaryOperator::Plus(None),
          get_019743(),
        ))
      }
      pub(super) fn get_019737() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019738(),
          vec![get_019739(), get_019740(), get_019741()],
          vec![],
          true,
        ))
      }
      pub(super) fn get_019720() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019721(), get_019736(), get_019737()))
      }
      pub(super) fn get_019715() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019716(), get_019719(), get_019720()))
      }
      pub(super) fn get_019708() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 581u32) },
              get_019709(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 582u32) },
              get_019711(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("i", 583u32) },
              get_019713(),
            ),
          ],
          get_019715(),
        ))
      }
      pub(super) fn get_019745() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aux", 580u32)
        }))
      }
      pub(super) fn get_019746() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 569u32)
        }))
      }
      pub(super) fn get_019747() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 570u32)
        }))
      }
      pub(super) fn get_019748() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019744() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019745(),
          vec![get_019746(), get_019747(), get_019748()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019707() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("aux", 580u32) },
            get_019708(),
          )],
          get_019744(),
        ))
      }
      pub(super) fn get_019694() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019695(), get_019706(), get_019707()))
      }
      pub(super) fn get_019688() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lfields", 579u32) },
            get_019689(),
          )],
          get_019694(),
        ))
      }
      pub(super) fn get_019682() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("fields", 578u32) },
            get_019683(),
          )],
          get_019688(),
        ))
      }
      pub(super) fn get_019751() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019752() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("primitiveEquals"))
      }
      pub(super) fn get_019750() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019751(), get_019752()))
      }
      pub(super) fn get_019753() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 569u32)
        }))
      }
      pub(super) fn get_019754() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 570u32)
        }))
      }
      pub(super) fn get_019749() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019750(),
          vec![get_019753(), get_019754()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019675() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019676(), get_019682(), get_019749()))
      }
      pub(super) fn get_019611() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019612(), get_019618(), get_019675()))
      }
      pub(super) fn get_019602() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019603(), get_019610(), get_019611()))
      }
      pub(super) fn get_019596() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("tb", 572u32) },
            get_019597(),
          )],
          get_019602(),
        ))
      }
      pub(super) fn get_019590() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("ta", 571u32) },
            get_019591(),
          )],
          get_019596(),
        ))
      }
      pub(super) fn get_019585() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("a", 569u32) },
              get_019586(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("b", 570u32) },
              get_019588(),
            ),
          ],
          get_019590(),
        ))
      }
      pub(super) fn get_019428() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_019429()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_019430(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_019431(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_019435(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_019540(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_019541(),
            ),
          ],
          get_019585(),
        ))
      }
      pub(super) fn get_019755() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("resolvePath"))
      }
      pub(super) fn get_019757() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_019758() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_019761() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_019760() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019761()))
      }
      pub(super) fn get_019762() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_019759() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_019760(),
          )],
          get_019762(),
        ))
      }
      pub(super) fn get_019765() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_019764() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019765()))
      }
      pub(super) fn get_019767() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_019766() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019767()))
      }
      pub(super) fn get_019771() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019773() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019774() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019772() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019773(),
          CoreBinaryOperator::And(None),
          get_019774(),
        ))
      }
      pub(super) fn get_019770() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019771(),
          CoreBinaryOperator::GreaterThan(None),
          get_019772(),
        ))
      }
      pub(super) fn get_019775() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_019769() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019770(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_019775(),
        ))
      }
      pub(super) fn get_019779() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019780() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019778() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019779(), get_019780()))
      }
      pub(super) fn get_019781() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_019777() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019778(),
          vec![get_019781()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019785() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019786() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019784() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019785(), get_019786()))
      }
      pub(super) fn get_019787() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_019783() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019784(),
          vec![get_019787()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019791() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019792() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019790() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019791(), get_019792()))
      }
      pub(super) fn get_019793() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_019789() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019790(),
          vec![get_019793()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019797() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_019796() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019797()))
      }
      pub(super) fn get_019799() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_019798() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019799()))
      }
      pub(super) fn get_019803() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019804() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019802() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019803(), get_019804()))
      }
      pub(super) fn get_019805() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_019801() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019802(),
          vec![get_019805()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019809() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019810() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_019808() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019809(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019810(),
        ))
      }
      pub(super) fn get_019813() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019814() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_019812() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019813(),
          CoreBinaryOperator::Minus(None),
          get_019814(),
        ))
      }
      pub(super) fn get_019815() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_019811() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019812(),
          CoreBinaryOperator::Plus(None),
          get_019815(),
        ))
      }
      pub(super) fn get_019818() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019819() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_019817() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019818(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019819(),
        ))
      }
      pub(super) fn get_019822() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019823() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_019821() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019822(),
          CoreBinaryOperator::Minus(None),
          get_019823(),
        ))
      }
      pub(super) fn get_019824() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_019820() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019821(),
          CoreBinaryOperator::Plus(None),
          get_019824(),
        ))
      }
      pub(super) fn get_019826() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_019827() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_019825() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019826(),
          CoreBinaryOperator::Minus(None),
          get_019827(),
        ))
      }
      pub(super) fn get_019816() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019817(), get_019820(), get_019825()))
      }
      pub(super) fn get_019807() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019808(), get_019811(), get_019816()))
      }
      pub(super) fn get_019831() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019833() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019834() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019832() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019833(),
          CoreBinaryOperator::And(None),
          get_019834(),
        ))
      }
      pub(super) fn get_019830() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019831(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_019832(),
        ))
      }
      pub(super) fn get_019835() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019829() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019830(),
          CoreBinaryOperator::LessThan(None),
          get_019835(),
        ))
      }
      pub(super) fn get_019837() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019839() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_019840() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_019838() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019839(),
          CoreBinaryOperator::Plus(None),
          get_019840(),
        ))
      }
      pub(super) fn get_019836() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019837(),
          CoreBinaryOperator::Mult(None),
          get_019838(),
        ))
      }
      pub(super) fn get_019844() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019845() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_019843() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019844(), get_019845()))
      }
      pub(super) fn get_019846() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_019848() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_019849() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019847() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019848(), get_019849()]))
      }
      pub(super) fn get_019842() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019843(),
          vec![get_019846(), get_019847()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019841() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019842()))
      }
      pub(super) fn get_019828() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019829(), get_019836(), get_019841()))
      }
      pub(super) fn get_019806() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_019807(),
          )],
          get_019828(),
        ))
      }
      pub(super) fn get_019800() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_019801(),
          )],
          get_019806(),
        ))
      }
      pub(super) fn get_019795() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_019796(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_019798(),
            ),
          ],
          get_019800(),
        ))
      }
      pub(super) fn get_019852() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019853() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_019851() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019852(), get_019853()))
      }
      pub(super) fn get_019854() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_019857() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019858() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_019856() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019857(), get_019858()))
      }
      pub(super) fn get_019859() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_019855() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019856(),
          vec![get_019859()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019860() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019850() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019851(),
          vec![get_019854(), get_019855(), get_019860()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019794() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_019795(),
          )],
          get_019850(),
        ))
      }
      pub(super) fn get_019788() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_019789(),
          )],
          get_019794(),
        ))
      }
      pub(super) fn get_019782() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_019783(),
          )],
          get_019788(),
        ))
      }
      pub(super) fn get_019776() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_019777(),
          )],
          get_019782(),
        ))
      }
      pub(super) fn get_019864() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019865() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_019863() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019864(), get_019865()))
      }
      pub(super) fn get_019866() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_019867() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019862() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019863(),
          vec![get_019866(), get_019867()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019861() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019862()))
      }
      pub(super) fn get_019768() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019769(), get_019776(), get_019861()))
      }
      pub(super) fn get_019763() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_019764(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_019766(),
            ),
          ],
          get_019768(),
        ))
      }
      pub(super) fn get_019868() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_019872() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_019873() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019871() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019872(), get_019873()))
      }
      pub(super) fn get_019875() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_019876() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019874() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019875(), get_019876()))
      }
      pub(super) fn get_019870() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019871(),
          )],
          get_019874(),
        ))
      }
      pub(super) fn get_019879() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_019880() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019878() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019879(), get_019880()))
      }
      pub(super) fn get_019881() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019877() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019878(),
          )],
          get_019881(),
        ))
      }
      pub(super) fn get_019885() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019886() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_019884() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019885(), get_019886()))
      }
      pub(super) fn get_019887() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019888() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_019883() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019884(),
          vec![get_019887(), get_019888()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019891() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019892() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_019890() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019891(), get_019892()))
      }
      pub(super) fn get_019893() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_019896() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019897() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_019895() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019896(), get_019897()))
      }
      pub(super) fn get_019900() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019901() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_019899() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019900(), get_019901()))
      }
      pub(super) fn get_019902() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_019898() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019899(),
          vec![get_019902()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019905() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_019904() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019905()))
      }
      pub(super) fn get_019908() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_019909() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_019907() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019908(), get_019909()))
      }
      pub(super) fn get_019912() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_019911() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019912()]))
      }
      pub(super) fn get_019910() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019911()]))
      }
      pub(super) fn get_019906() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_019907(),
          )],
          get_019910(),
        ))
      }
      pub(super) fn get_019903() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_019904(),
          )],
          get_019906(),
        ))
      }
      pub(super) fn get_019894() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019895(),
          vec![get_019898(), get_019903()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019889() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019890(),
          vec![get_019893(), get_019894()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019882() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_019883(),
          )],
          get_019889(),
        ))
      }
      pub(super) fn get_019869() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_019870(),
          get_019877(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_019882(),
        ))
      }
      pub(super) fn get_019915() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'f' not bound"))
      }
      pub(super) fn get_019914() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019915()))
      }
      pub(super) fn get_019917() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'r' not bound"))
      }
      pub(super) fn get_019916() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019917()))
      }
      pub(super) fn get_019921() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019922() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("split"))
      }
      pub(super) fn get_019920() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019921(), get_019922()))
      }
      pub(super) fn get_019923() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("f", 585u32)
        }))
      }
      pub(super) fn get_019924() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("/"))
      }
      pub(super) fn get_019919() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019920(),
          vec![get_019923(), get_019924()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019927() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019928() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_019926() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019927(), get_019928()))
      }
      pub(super) fn get_019929() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("/"))
      }
      pub(super) fn get_019933() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019934() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_019932() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019933(), get_019934()))
      }
      pub(super) fn get_019938() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019939() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_019937() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019938(), get_019939()))
      }
      pub(super) fn get_019940() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 587u32)
        }))
      }
      pub(super) fn get_019936() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019937(),
          vec![get_019940()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019941() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_019935() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019936(),
          CoreBinaryOperator::Minus(None),
          get_019941(),
        ))
      }
      pub(super) fn get_019944() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_019943() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019944()))
      }
      pub(super) fn get_019946() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 587u32)
        }))
      }
      pub(super) fn get_019947() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 588u32)
        }))
      }
      pub(super) fn get_019945() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019946(), get_019947()))
      }
      pub(super) fn get_019942() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 588u32) },
            get_019943(),
          )],
          get_019945(),
        ))
      }
      pub(super) fn get_019931() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019932(),
          vec![get_019935(), get_019942()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019949() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("r", 586u32)
        }))
      }
      pub(super) fn get_019948() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_019949()]))
      }
      pub(super) fn get_019930() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019931(),
          CoreBinaryOperator::Plus(None),
          get_019948(),
        ))
      }
      pub(super) fn get_019925() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019926(),
          vec![get_019929(), get_019930()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019918() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("arr", 587u32) },
            get_019919(),
          )],
          get_019925(),
        ))
      }
      pub(super) fn get_019913() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("f", 585u32) },
              get_019914(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("r", 586u32) },
              get_019916(),
            ),
          ],
          get_019918(),
        ))
      }
      pub(super) fn get_019756() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_019757()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_019758(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_019759(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_019763(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_019868(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_019869(),
            ),
          ],
          get_019913(),
        ))
      }
      pub(super) fn get_019950() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prune"))
      }
      pub(super) fn get_019952() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_019953() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_019956() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_019955() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019956()))
      }
      pub(super) fn get_019957() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_019954() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_019955(),
          )],
          get_019957(),
        ))
      }
      pub(super) fn get_019960() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_019959() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019960()))
      }
      pub(super) fn get_019962() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_019961() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019962()))
      }
      pub(super) fn get_019966() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019968() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_019969() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_019967() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019968(),
          CoreBinaryOperator::And(None),
          get_019969(),
        ))
      }
      pub(super) fn get_019965() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019966(),
          CoreBinaryOperator::GreaterThan(None),
          get_019967(),
        ))
      }
      pub(super) fn get_019970() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_019964() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_019965(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_019970(),
        ))
      }
      pub(super) fn get_019974() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019975() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019973() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019974(), get_019975()))
      }
      pub(super) fn get_019976() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_019972() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019973(),
          vec![get_019976()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019980() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019981() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019979() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019980(), get_019981()))
      }
      pub(super) fn get_019982() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_019978() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019979(),
          vec![get_019982()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019986() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019987() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019985() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019986(), get_019987()))
      }
      pub(super) fn get_019988() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_019984() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019985(),
          vec![get_019988()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019992() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_019991() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019992()))
      }
      pub(super) fn get_019994() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_019993() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_019994()))
      }
      pub(super) fn get_019998() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_019999() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_019997() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_019998(), get_019999()))
      }
      pub(super) fn get_020000() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_019996() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_019997(),
          vec![get_020000()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020004() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020005() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_020003() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020004(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_020005(),
        ))
      }
      pub(super) fn get_020008() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020009() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_020007() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020008(),
          CoreBinaryOperator::Minus(None),
          get_020009(),
        ))
      }
      pub(super) fn get_020010() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_020006() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020007(),
          CoreBinaryOperator::Plus(None),
          get_020010(),
        ))
      }
      pub(super) fn get_020013() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020014() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_020012() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020013(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_020014(),
        ))
      }
      pub(super) fn get_020017() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020018() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_020016() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020017(),
          CoreBinaryOperator::Minus(None),
          get_020018(),
        ))
      }
      pub(super) fn get_020019() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_020015() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020016(),
          CoreBinaryOperator::Plus(None),
          get_020019(),
        ))
      }
      pub(super) fn get_020021() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020022() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_020020() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020021(),
          CoreBinaryOperator::Minus(None),
          get_020022(),
        ))
      }
      pub(super) fn get_020011() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020012(), get_020015(), get_020020()))
      }
      pub(super) fn get_020002() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020003(), get_020006(), get_020011()))
      }
      pub(super) fn get_020026() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_020028() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020029() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_020027() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020028(),
          CoreBinaryOperator::And(None),
          get_020029(),
        ))
      }
      pub(super) fn get_020025() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020026(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_020027(),
        ))
      }
      pub(super) fn get_020030() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020024() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020025(),
          CoreBinaryOperator::LessThan(None),
          get_020030(),
        ))
      }
      pub(super) fn get_020032() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020034() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_020035() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_020033() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020034(),
          CoreBinaryOperator::Plus(None),
          get_020035(),
        ))
      }
      pub(super) fn get_020031() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020032(),
          CoreBinaryOperator::Mult(None),
          get_020033(),
        ))
      }
      pub(super) fn get_020039() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020040() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_020038() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020039(), get_020040()))
      }
      pub(super) fn get_020041() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_020043() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_020044() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020042() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_020043(), get_020044()]))
      }
      pub(super) fn get_020037() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020038(),
          vec![get_020041(), get_020042()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020036() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020037()))
      }
      pub(super) fn get_020023() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020024(), get_020031(), get_020036()))
      }
      pub(super) fn get_020001() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_020002(),
          )],
          get_020023(),
        ))
      }
      pub(super) fn get_019995() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_019996(),
          )],
          get_020001(),
        ))
      }
      pub(super) fn get_019990() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_019991(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_019993(),
            ),
          ],
          get_019995(),
        ))
      }
      pub(super) fn get_020047() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020048() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_020046() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020047(), get_020048()))
      }
      pub(super) fn get_020049() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_020052() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020053() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_020051() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020052(), get_020053()))
      }
      pub(super) fn get_020054() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_020050() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020051(),
          vec![get_020054()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020055() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020045() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020046(),
          vec![get_020049(), get_020050(), get_020055()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_019989() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_019990(),
          )],
          get_020045(),
        ))
      }
      pub(super) fn get_019983() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_019984(),
          )],
          get_019989(),
        ))
      }
      pub(super) fn get_019977() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_019978(),
          )],
          get_019983(),
        ))
      }
      pub(super) fn get_019971() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_019972(),
          )],
          get_019977(),
        ))
      }
      pub(super) fn get_020059() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020060() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_020058() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020059(), get_020060()))
      }
      pub(super) fn get_020061() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_020062() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020057() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020058(),
          vec![get_020061(), get_020062()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020056() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020057()))
      }
      pub(super) fn get_019963() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_019964(), get_019971(), get_020056()))
      }
      pub(super) fn get_019958() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_019959(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_019961(),
            ),
          ],
          get_019963(),
        ))
      }
      pub(super) fn get_020063() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_020067() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_020068() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020066() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020067(), get_020068()))
      }
      pub(super) fn get_020070() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_020071() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_020069() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020070(), get_020071()))
      }
      pub(super) fn get_020065() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_020066(),
          )],
          get_020069(),
        ))
      }
      pub(super) fn get_020074() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_020075() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020073() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020074(), get_020075()))
      }
      pub(super) fn get_020076() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_020072() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_020073(),
          )],
          get_020076(),
        ))
      }
      pub(super) fn get_020080() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020081() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_020079() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020080(), get_020081()))
      }
      pub(super) fn get_020082() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020083() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_020078() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020079(),
          vec![get_020082(), get_020083()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020086() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020087() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_020085() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020086(), get_020087()))
      }
      pub(super) fn get_020088() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_020091() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020092() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_020090() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020091(), get_020092()))
      }
      pub(super) fn get_020095() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020096() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_020094() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020095(), get_020096()))
      }
      pub(super) fn get_020097() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_020093() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020094(),
          vec![get_020097()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020100() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_020099() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020100()))
      }
      pub(super) fn get_020103() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_020104() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_020102() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020103(), get_020104()))
      }
      pub(super) fn get_020107() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_020106() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_020107()]))
      }
      pub(super) fn get_020105() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_020106()]))
      }
      pub(super) fn get_020101() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_020102(),
          )],
          get_020105(),
        ))
      }
      pub(super) fn get_020098() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_020099(),
          )],
          get_020101(),
        ))
      }
      pub(super) fn get_020089() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020090(),
          vec![get_020093(), get_020098()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020084() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020085(),
          vec![get_020088(), get_020089()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020077() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_020078(),
          )],
          get_020084(),
        ))
      }
      pub(super) fn get_020064() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_020065(),
          get_020072(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_020077(),
        ))
      }
      pub(super) fn get_020110() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'a' not bound"))
      }
      pub(super) fn get_020109() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020110()))
      }
      pub(super) fn get_020114() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'b' not bound"))
      }
      pub(super) fn get_020113() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020114()))
      }
      pub(super) fn get_020118() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020119() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_020117() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020118(), get_020119()))
      }
      pub(super) fn get_020120() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 591u32)
        }))
      }
      pub(super) fn get_020121() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_020116() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020117(),
          vec![get_020120(), get_020121()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020122() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_false())
      }
      pub(super) fn get_020126() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020127() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_020125() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020126(), get_020127()))
      }
      pub(super) fn get_020128() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 591u32)
        }))
      }
      pub(super) fn get_020124() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020125(),
          vec![get_020128()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020132() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020133() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_020131() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020132(), get_020133()))
      }
      pub(super) fn get_020134() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 591u32)
        }))
      }
      pub(super) fn get_020130() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020131(),
          vec![get_020134()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020135() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020129() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020130(),
          CoreBinaryOperator::GreaterThan(None),
          get_020135(),
        ))
      }
      pub(super) fn get_020139() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020140() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_020138() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020139(), get_020140()))
      }
      pub(super) fn get_020141() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 591u32)
        }))
      }
      pub(super) fn get_020137() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020138(),
          vec![get_020141()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020145() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020146() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_020144() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020145(), get_020146()))
      }
      pub(super) fn get_020147() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("b", 591u32)
        }))
      }
      pub(super) fn get_020143() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020144(),
          vec![get_020147()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020148() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020142() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020143(),
          CoreBinaryOperator::GreaterThan(None),
          get_020148(),
        ))
      }
      pub(super) fn get_020149() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_true())
      }
      pub(super) fn get_020136() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020137(), get_020142(), get_020149()))
      }
      pub(super) fn get_020123() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020124(), get_020129(), get_020136()))
      }
      pub(super) fn get_020115() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020116(), get_020122(), get_020123()))
      }
      pub(super) fn get_020112() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("b", 591u32) },
            get_020113(),
          )],
          get_020115(),
        ))
      }
      pub(super) fn get_020153() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020154() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_020152() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020153(), get_020154()))
      }
      pub(super) fn get_020155() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 589u32)
        }))
      }
      pub(super) fn get_020151() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020152(),
          vec![get_020155()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020157() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 589u32)
        }))
      }
      pub(super) fn get_020160() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020161() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_020159() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020160(), get_020161()))
      }
      pub(super) fn get_020162() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_020165() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020166() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_020164() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020165(), get_020166()))
      }
      pub(super) fn get_020169() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020170() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_020168() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020169(), get_020170()))
      }
      pub(super) fn get_020171() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 593u32)
        }))
      }
      pub(super) fn get_020167() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020168(),
          vec![get_020171()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020174() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_020173() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020174()))
      }
      pub(super) fn get_020177() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 593u32)
        }))
      }
      pub(super) fn get_020178() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 594u32)
        }))
      }
      pub(super) fn get_020176() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020177(), get_020178()))
      }
      pub(super) fn get_020181() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("isContent", 590u32)
        }))
      }
      pub(super) fn get_020184() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$", 2u32)
        }))
      }
      pub(super) fn get_020185() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prune"))
      }
      pub(super) fn get_020183() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020184(), get_020185()))
      }
      pub(super) fn get_020186() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 592u32)
        }))
      }
      pub(super) fn get_020182() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020183(),
          vec![get_020186()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020180() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020181(),
          vec![get_020182()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020190() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020191() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prune"))
      }
      pub(super) fn get_020189() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020190(), get_020191()))
      }
      pub(super) fn get_020192() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 592u32)
        }))
      }
      pub(super) fn get_020188() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020189(),
          vec![get_020192()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020187() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_020188()]))
      }
      pub(super) fn get_020193() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_020179() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020180(), get_020187(), get_020193()))
      }
      pub(super) fn get_020175() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("x", 592u32) },
            get_020176(),
          )],
          get_020179(),
        ))
      }
      pub(super) fn get_020172() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 594u32) },
            get_020173(),
          )],
          get_020175(),
        ))
      }
      pub(super) fn get_020163() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020164(),
          vec![get_020167(), get_020172()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020158() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020159(),
          vec![get_020162(), get_020163()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020156() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 593u32) },
            get_020157(),
          )],
          get_020158(),
        ))
      }
      pub(super) fn get_020197() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020198() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isObject"))
      }
      pub(super) fn get_020196() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020197(), get_020198()))
      }
      pub(super) fn get_020199() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 589u32)
        }))
      }
      pub(super) fn get_020195() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020196(),
          vec![get_020199()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020203() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 595u32)
        }))
      }
      pub(super) fn get_020204() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020202() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020203(), get_020204()))
      }
      pub(super) fn get_020205() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 596u32)
        }))
      }
      pub(super) fn get_020201() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("x", 596u32) },
            get_020202(),
          )],
          get_020205(),
        ))
      }
      pub(super) fn get_020208() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 595u32)
        }))
      }
      pub(super) fn get_020209() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020207() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020208(), get_020209()))
      }
      pub(super) fn get_020212() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$", 2u32)
        }))
      }
      pub(super) fn get_020213() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prune"))
      }
      pub(super) fn get_020211() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020212(), get_020213()))
      }
      pub(super) fn get_020215() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 589u32)
        }))
      }
      pub(super) fn get_020216() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 596u32)
        }))
      }
      pub(super) fn get_020214() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020215(), get_020216()))
      }
      pub(super) fn get_020210() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020211(),
          vec![get_020214()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020206() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("x", 596u32) },
            get_020207(),
          )],
          get_020210(),
        ))
      }
      pub(super) fn get_020220() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020221() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("objectFields"))
      }
      pub(super) fn get_020219() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020220(), get_020221()))
      }
      pub(super) fn get_020222() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 589u32)
        }))
      }
      pub(super) fn get_020218() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020219(),
          vec![get_020222()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020225() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020226() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_020224() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020225(), get_020226()))
      }
      pub(super) fn get_020227() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_020230() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020231() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_020229() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020230(), get_020231()))
      }
      pub(super) fn get_020234() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020235() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_020233() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020234(), get_020235()))
      }
      pub(super) fn get_020236() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 597u32)
        }))
      }
      pub(super) fn get_020232() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020233(),
          vec![get_020236()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020239() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_020238() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020239()))
      }
      pub(super) fn get_020242() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 597u32)
        }))
      }
      pub(super) fn get_020243() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 598u32)
        }))
      }
      pub(super) fn get_020241() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020242(), get_020243()))
      }
      pub(super) fn get_020246() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("isContent", 590u32)
        }))
      }
      pub(super) fn get_020249() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020250() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("prune"))
      }
      pub(super) fn get_020248() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020249(), get_020250()))
      }
      pub(super) fn get_020252() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 589u32)
        }))
      }
      pub(super) fn get_020253() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 596u32)
        }))
      }
      pub(super) fn get_020251() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020252(), get_020253()))
      }
      pub(super) fn get_020247() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020248(),
          vec![get_020251()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020245() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020246(),
          vec![get_020247()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020256() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 596u32)
        }))
      }
      pub(super) fn get_020255() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_020256()]))
      }
      pub(super) fn get_020254() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_020255()]))
      }
      pub(super) fn get_020257() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_020244() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020245(), get_020254(), get_020257()))
      }
      pub(super) fn get_020240() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("x", 596u32) },
            get_020241(),
          )],
          get_020244(),
        ))
      }
      pub(super) fn get_020237() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 598u32) },
            get_020238(),
          )],
          get_020240(),
        ))
      }
      pub(super) fn get_020228() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020229(),
          vec![get_020232(), get_020237()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020223() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020224(),
          vec![get_020227(), get_020228()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020217() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 597u32) },
            get_020218(),
          )],
          get_020223(),
        ))
      }
      pub(super) fn get_020200() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_020201(),
          get_020206(),
          unsafe { CoreIdent::new_unchecked("$arr", 595u32) },
          get_020217(),
        ))
      }
      pub(super) fn get_020258() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("a", 589u32)
        }))
      }
      pub(super) fn get_020194() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020195(), get_020200(), get_020258()))
      }
      pub(super) fn get_020150() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020151(), get_020156(), get_020194()))
      }
      pub(super) fn get_020111() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("isContent", 590u32) },
            get_020112(),
          )],
          get_020150(),
        ))
      }
      pub(super) fn get_020108() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("a", 589u32) },
            get_020109(),
          )],
          get_020111(),
        ))
      }
      pub(super) fn get_019951() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_019952()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_019953(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_019954(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_019958(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_020063(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_020064(),
            ),
          ],
          get_020108(),
        ))
      }
      pub(super) fn get_020259() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("findSubstr"))
      }
      pub(super) fn get_020261() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_020262() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_020265() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_020264() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020265()))
      }
      pub(super) fn get_020266() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_020263() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_020264(),
          )],
          get_020266(),
        ))
      }
      pub(super) fn get_020269() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_020268() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020269()))
      }
      pub(super) fn get_020271() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_020270() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020271()))
      }
      pub(super) fn get_020275() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020277() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020278() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020276() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020277(),
          CoreBinaryOperator::And(None),
          get_020278(),
        ))
      }
      pub(super) fn get_020274() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020275(),
          CoreBinaryOperator::GreaterThan(None),
          get_020276(),
        ))
      }
      pub(super) fn get_020279() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_020273() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020274(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_020279(),
        ))
      }
      pub(super) fn get_020283() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020284() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_020282() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020283(), get_020284()))
      }
      pub(super) fn get_020285() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_020281() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020282(),
          vec![get_020285()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020289() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020290() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_020288() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020289(), get_020290()))
      }
      pub(super) fn get_020291() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_020287() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020288(),
          vec![get_020291()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020295() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020296() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_020294() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020295(), get_020296()))
      }
      pub(super) fn get_020297() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_020293() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020294(),
          vec![get_020297()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020301() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_020300() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020301()))
      }
      pub(super) fn get_020303() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_020302() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020303()))
      }
      pub(super) fn get_020307() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020308() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_020306() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020307(), get_020308()))
      }
      pub(super) fn get_020309() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_020305() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020306(),
          vec![get_020309()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020313() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020314() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_020312() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020313(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_020314(),
        ))
      }
      pub(super) fn get_020317() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020318() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_020316() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020317(),
          CoreBinaryOperator::Minus(None),
          get_020318(),
        ))
      }
      pub(super) fn get_020319() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_020315() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020316(),
          CoreBinaryOperator::Plus(None),
          get_020319(),
        ))
      }
      pub(super) fn get_020322() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020323() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_020321() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020322(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_020323(),
        ))
      }
      pub(super) fn get_020326() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020327() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_020325() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020326(),
          CoreBinaryOperator::Minus(None),
          get_020327(),
        ))
      }
      pub(super) fn get_020328() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_020324() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020325(),
          CoreBinaryOperator::Plus(None),
          get_020328(),
        ))
      }
      pub(super) fn get_020330() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020331() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_020329() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020330(),
          CoreBinaryOperator::Minus(None),
          get_020331(),
        ))
      }
      pub(super) fn get_020320() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020321(), get_020324(), get_020329()))
      }
      pub(super) fn get_020311() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020312(), get_020315(), get_020320()))
      }
      pub(super) fn get_020335() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_020337() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020338() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_020336() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020337(),
          CoreBinaryOperator::And(None),
          get_020338(),
        ))
      }
      pub(super) fn get_020334() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020335(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_020336(),
        ))
      }
      pub(super) fn get_020339() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020333() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020334(),
          CoreBinaryOperator::LessThan(None),
          get_020339(),
        ))
      }
      pub(super) fn get_020341() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020343() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_020344() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_020342() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020343(),
          CoreBinaryOperator::Plus(None),
          get_020344(),
        ))
      }
      pub(super) fn get_020340() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020341(),
          CoreBinaryOperator::Mult(None),
          get_020342(),
        ))
      }
      pub(super) fn get_020348() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020349() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_020347() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020348(), get_020349()))
      }
      pub(super) fn get_020350() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_020352() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_020353() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020351() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_020352(), get_020353()]))
      }
      pub(super) fn get_020346() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020347(),
          vec![get_020350(), get_020351()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020345() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020346()))
      }
      pub(super) fn get_020332() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020333(), get_020340(), get_020345()))
      }
      pub(super) fn get_020310() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_020311(),
          )],
          get_020332(),
        ))
      }
      pub(super) fn get_020304() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_020305(),
          )],
          get_020310(),
        ))
      }
      pub(super) fn get_020299() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_020300(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_020302(),
            ),
          ],
          get_020304(),
        ))
      }
      pub(super) fn get_020356() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020357() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_020355() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020356(), get_020357()))
      }
      pub(super) fn get_020358() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_020361() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020362() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_020360() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020361(), get_020362()))
      }
      pub(super) fn get_020363() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_020359() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020360(),
          vec![get_020363()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020364() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020354() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020355(),
          vec![get_020358(), get_020359(), get_020364()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020298() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_020299(),
          )],
          get_020354(),
        ))
      }
      pub(super) fn get_020292() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_020293(),
          )],
          get_020298(),
        ))
      }
      pub(super) fn get_020286() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_020287(),
          )],
          get_020292(),
        ))
      }
      pub(super) fn get_020280() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_020281(),
          )],
          get_020286(),
        ))
      }
      pub(super) fn get_020368() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020369() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_020367() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020368(), get_020369()))
      }
      pub(super) fn get_020370() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_020371() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020366() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020367(),
          vec![get_020370(), get_020371()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020365() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020366()))
      }
      pub(super) fn get_020272() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020273(), get_020280(), get_020365()))
      }
      pub(super) fn get_020267() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_020268(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_020270(),
            ),
          ],
          get_020272(),
        ))
      }
      pub(super) fn get_020372() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_020376() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_020377() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020375() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020376(), get_020377()))
      }
      pub(super) fn get_020379() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_020380() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_020378() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020379(), get_020380()))
      }
      pub(super) fn get_020374() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_020375(),
          )],
          get_020378(),
        ))
      }
      pub(super) fn get_020383() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_020384() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020382() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020383(), get_020384()))
      }
      pub(super) fn get_020385() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_020381() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_020382(),
          )],
          get_020385(),
        ))
      }
      pub(super) fn get_020389() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020390() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_020388() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020389(), get_020390()))
      }
      pub(super) fn get_020391() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020392() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_020387() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020388(),
          vec![get_020391(), get_020392()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020395() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020396() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_020394() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020395(), get_020396()))
      }
      pub(super) fn get_020397() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_020400() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020401() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_020399() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020400(), get_020401()))
      }
      pub(super) fn get_020404() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020405() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_020403() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020404(), get_020405()))
      }
      pub(super) fn get_020406() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_020402() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020403(),
          vec![get_020406()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020409() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_020408() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020409()))
      }
      pub(super) fn get_020412() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_020413() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_020411() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020412(), get_020413()))
      }
      pub(super) fn get_020416() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_020415() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_020416()]))
      }
      pub(super) fn get_020414() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_020415()]))
      }
      pub(super) fn get_020410() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_020411(),
          )],
          get_020414(),
        ))
      }
      pub(super) fn get_020407() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_020408(),
          )],
          get_020410(),
        ))
      }
      pub(super) fn get_020398() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020399(),
          vec![get_020402(), get_020407()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020393() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020394(),
          vec![get_020397(), get_020398()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020386() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_020387(),
          )],
          get_020393(),
        ))
      }
      pub(super) fn get_020373() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_020374(),
          get_020381(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_020386(),
        ))
      }
      pub(super) fn get_020419() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'pat' not bound"))
      }
      pub(super) fn get_020418() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020419()))
      }
      pub(super) fn get_020421() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_020420() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020421()))
      }
      pub(super) fn get_020426() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020427() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_020425() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020426(), get_020427()))
      }
      pub(super) fn get_020428() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pat", 599u32)
        }))
      }
      pub(super) fn get_020424() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020425(),
          vec![get_020428()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020423() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_020424(),
        ))
      }
      pub(super) fn get_020431() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "findSubstr first parameter should be a string, got ",
        ))
      }
      pub(super) fn get_020434() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020435() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_020433() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020434(), get_020435()))
      }
      pub(super) fn get_020436() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pat", 599u32)
        }))
      }
      pub(super) fn get_020432() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020433(),
          vec![get_020436()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020430() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020431(),
          CoreBinaryOperator::Plus(None),
          get_020432(),
        ))
      }
      pub(super) fn get_020429() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020430()))
      }
      pub(super) fn get_020441() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020442() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isString"))
      }
      pub(super) fn get_020440() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020441(), get_020442()))
      }
      pub(super) fn get_020443() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 600u32)
        }))
      }
      pub(super) fn get_020439() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020440(),
          vec![get_020443()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020438() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_020439(),
        ))
      }
      pub(super) fn get_020446() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "findSubstr second parameter should be a string, got ",
        ))
      }
      pub(super) fn get_020449() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020450() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_020448() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020449(), get_020450()))
      }
      pub(super) fn get_020451() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 600u32)
        }))
      }
      pub(super) fn get_020447() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020448(),
          vec![get_020451()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020445() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020446(),
          CoreBinaryOperator::Plus(None),
          get_020447(),
        ))
      }
      pub(super) fn get_020444() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020445()))
      }
      pub(super) fn get_020455() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020456() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_020454() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020455(), get_020456()))
      }
      pub(super) fn get_020457() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pat", 599u32)
        }))
      }
      pub(super) fn get_020453() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020454(),
          vec![get_020457()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020461() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020462() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_020460() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020461(), get_020462()))
      }
      pub(super) fn get_020463() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 600u32)
        }))
      }
      pub(super) fn get_020459() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020460(),
          vec![get_020463()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020468() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020469() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_020467() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020468(), get_020469()))
      }
      pub(super) fn get_020472() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020473() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_020471() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020472(), get_020473()))
      }
      pub(super) fn get_020474() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pat_len", 601u32)
        }))
      }
      pub(super) fn get_020476() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020477() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str_len", 602u32)
        }))
      }
      pub(super) fn get_020475() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020476(),
          CoreBinaryOperator::Or(None),
          get_020477(),
        ))
      }
      pub(super) fn get_020470() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020471(),
          vec![get_020474(), get_020475()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020479() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020480() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pat_len", 601u32)
        }))
      }
      pub(super) fn get_020478() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020479(),
          CoreBinaryOperator::Or(None),
          get_020480(),
        ))
      }
      pub(super) fn get_020466() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020467(),
          vec![get_020470(), get_020478()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020481() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str_len", 602u32)
        }))
      }
      pub(super) fn get_020465() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020466(),
          CoreBinaryOperator::GreaterThan(None),
          get_020481(),
        ))
      }
      pub(super) fn get_020482() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_020485() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020486() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("filter"))
      }
      pub(super) fn get_020484() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020485(), get_020486()))
      }
      pub(super) fn get_020489() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_020488() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020489()))
      }
      pub(super) fn get_020492() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020493() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_020491() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020492(), get_020493()))
      }
      pub(super) fn get_020496() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020497() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("slice"))
      }
      pub(super) fn get_020495() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020496(), get_020497()))
      }
      pub(super) fn get_020498() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 600u32)
        }))
      }
      pub(super) fn get_020499() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 603u32)
        }))
      }
      pub(super) fn get_020501() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 603u32)
        }))
      }
      pub(super) fn get_020502() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pat_len", 601u32)
        }))
      }
      pub(super) fn get_020500() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020501(),
          CoreBinaryOperator::Plus(None),
          get_020502(),
        ))
      }
      pub(super) fn get_020503() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_null())
      }
      pub(super) fn get_020494() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020495(),
          vec![get_020498(), get_020499(), get_020500(), get_020503()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020504() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pat", 599u32)
        }))
      }
      pub(super) fn get_020490() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020491(),
          vec![get_020494(), get_020504()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020487() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 603u32) },
            get_020488(),
          )],
          get_020490(),
        ))
      }
      pub(super) fn get_020507() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020508() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_020506() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020507(), get_020508()))
      }
      pub(super) fn get_020509() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020511() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str_len", 602u32)
        }))
      }
      pub(super) fn get_020512() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("pat_len", 601u32)
        }))
      }
      pub(super) fn get_020510() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020511(),
          CoreBinaryOperator::Minus(None),
          get_020512(),
        ))
      }
      pub(super) fn get_020505() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020506(),
          vec![get_020509(), get_020510()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020483() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020484(),
          vec![get_020487(), get_020505()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020464() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020465(), get_020482(), get_020483()))
      }
      pub(super) fn get_020458() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("str_len", 602u32) },
            get_020459(),
          )],
          get_020464(),
        ))
      }
      pub(super) fn get_020452() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("pat_len", 601u32) },
            get_020453(),
          )],
          get_020458(),
        ))
      }
      pub(super) fn get_020437() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020438(), get_020444(), get_020452()))
      }
      pub(super) fn get_020422() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020423(), get_020429(), get_020437()))
      }
      pub(super) fn get_020417() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("pat", 599u32) },
              get_020418(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 600u32) },
              get_020420(),
            ),
          ],
          get_020422(),
        ))
      }
      pub(super) fn get_020260() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_020261()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_020262(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_020263(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_020267(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_020372(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_020373(),
            ),
          ],
          get_020417(),
        ))
      }
      pub(super) fn get_020513() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("find"))
      }
      pub(super) fn get_020515() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_020516() -> CoreExpr {
        CoreExpr::SelfValue(SelfCoreExpr::new())
      }
      pub(super) fn get_020519() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'x' not bound"))
      }
      pub(super) fn get_020518() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020519()))
      }
      pub(super) fn get_020520() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("x", 8u32)
        }))
      }
      pub(super) fn get_020517() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("x", 8u32) },
            get_020518(),
          )],
          get_020520(),
        ))
      }
      pub(super) fn get_020523() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'str' not bound"))
      }
      pub(super) fn get_020522() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020523()))
      }
      pub(super) fn get_020525() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'base' not bound"))
      }
      pub(super) fn get_020524() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020525()))
      }
      pub(super) fn get_020529() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020531() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020532() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020530() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020531(),
          CoreBinaryOperator::And(None),
          get_020532(),
        ))
      }
      pub(super) fn get_020528() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020529(),
          CoreBinaryOperator::GreaterThan(None),
          get_020530(),
        ))
      }
      pub(super) fn get_020533() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(16f64))
      }
      pub(super) fn get_020527() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020528(),
          CoreBinaryOperator::LessThanOrEquals(None),
          get_020533(),
        ))
      }
      pub(super) fn get_020537() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020538() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_020536() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020537(), get_020538()))
      }
      pub(super) fn get_020539() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("0"))
      }
      pub(super) fn get_020535() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020536(),
          vec![get_020539()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020543() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020544() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_020542() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020543(), get_020544()))
      }
      pub(super) fn get_020545() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("A"))
      }
      pub(super) fn get_020541() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020542(),
          vec![get_020545()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020549() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020550() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_020548() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020549(), get_020550()))
      }
      pub(super) fn get_020551() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("a"))
      }
      pub(super) fn get_020547() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020548(),
          vec![get_020551()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020555() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'aggregate' not bound"))
      }
      pub(super) fn get_020554() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020555()))
      }
      pub(super) fn get_020557() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'char' not bound"))
      }
      pub(super) fn get_020556() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020557()))
      }
      pub(super) fn get_020561() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020562() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("codepoint"))
      }
      pub(super) fn get_020560() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020561(), get_020562()))
      }
      pub(super) fn get_020563() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("char", 16u32)
        }))
      }
      pub(super) fn get_020559() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020560(),
          vec![get_020563()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020567() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020568() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_020566() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020567(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_020568(),
        ))
      }
      pub(super) fn get_020571() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020572() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("lower_a_code", 13u32)
        }))
      }
      pub(super) fn get_020570() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020571(),
          CoreBinaryOperator::Minus(None),
          get_020572(),
        ))
      }
      pub(super) fn get_020573() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_020569() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020570(),
          CoreBinaryOperator::Plus(None),
          get_020573(),
        ))
      }
      pub(super) fn get_020576() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020577() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_020575() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020576(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_020577(),
        ))
      }
      pub(super) fn get_020580() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020581() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("upper_a_code", 12u32)
        }))
      }
      pub(super) fn get_020579() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020580(),
          CoreBinaryOperator::Minus(None),
          get_020581(),
        ))
      }
      pub(super) fn get_020582() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(10f64))
      }
      pub(super) fn get_020578() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020579(),
          CoreBinaryOperator::Plus(None),
          get_020582(),
        ))
      }
      pub(super) fn get_020584() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("code", 17u32)
        }))
      }
      pub(super) fn get_020585() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("zero_code", 11u32)
        }))
      }
      pub(super) fn get_020583() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020584(),
          CoreBinaryOperator::Minus(None),
          get_020585(),
        ))
      }
      pub(super) fn get_020574() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020575(), get_020578(), get_020583()))
      }
      pub(super) fn get_020565() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020566(), get_020569(), get_020574()))
      }
      pub(super) fn get_020589() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_020591() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020592() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_020590() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020591(),
          CoreBinaryOperator::And(None),
          get_020592(),
        ))
      }
      pub(super) fn get_020588() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020589(),
          CoreBinaryOperator::GreaterThanOrEquals(None),
          get_020590(),
        ))
      }
      pub(super) fn get_020593() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020587() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020588(),
          CoreBinaryOperator::LessThan(None),
          get_020593(),
        ))
      }
      pub(super) fn get_020595() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020597() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("aggregate", 15u32)
        }))
      }
      pub(super) fn get_020598() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("digit", 18u32)
        }))
      }
      pub(super) fn get_020596() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020597(),
          CoreBinaryOperator::Plus(None),
          get_020598(),
        ))
      }
      pub(super) fn get_020594() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020595(),
          CoreBinaryOperator::Mult(None),
          get_020596(),
        ))
      }
      pub(super) fn get_020602() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020603() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_020601() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020602(), get_020603()))
      }
      pub(super) fn get_020604() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("%s is not a base %d integer"))
      }
      pub(super) fn get_020606() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_020607() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020605() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_020606(), get_020607()]))
      }
      pub(super) fn get_020600() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020601(),
          vec![get_020604(), get_020605()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020599() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020600()))
      }
      pub(super) fn get_020586() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020587(), get_020594(), get_020599()))
      }
      pub(super) fn get_020564() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("digit", 18u32) },
            get_020565(),
          )],
          get_020586(),
        ))
      }
      pub(super) fn get_020558() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("code", 17u32) },
            get_020559(),
          )],
          get_020564(),
        ))
      }
      pub(super) fn get_020553() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("aggregate", 15u32) },
              get_020554(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("char", 16u32) },
              get_020556(),
            ),
          ],
          get_020558(),
        ))
      }
      pub(super) fn get_020610() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020611() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("foldl"))
      }
      pub(super) fn get_020609() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020610(), get_020611()))
      }
      pub(super) fn get_020612() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("addDigit", 14u32)
        }))
      }
      pub(super) fn get_020615() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020616() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("stringChars"))
      }
      pub(super) fn get_020614() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020615(), get_020616()))
      }
      pub(super) fn get_020617() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("str", 9u32)
        }))
      }
      pub(super) fn get_020613() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020614(),
          vec![get_020617()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020618() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020608() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020609(),
          vec![get_020612(), get_020613(), get_020618()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020552() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("addDigit", 14u32) },
            get_020553(),
          )],
          get_020608(),
        ))
      }
      pub(super) fn get_020546() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("lower_a_code", 13u32) },
            get_020547(),
          )],
          get_020552(),
        ))
      }
      pub(super) fn get_020540() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("upper_a_code", 12u32) },
            get_020541(),
          )],
          get_020546(),
        ))
      }
      pub(super) fn get_020534() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("zero_code", 11u32) },
            get_020535(),
          )],
          get_020540(),
        ))
      }
      pub(super) fn get_020622() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020623() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("mod"))
      }
      pub(super) fn get_020621() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020622(), get_020623()))
      }
      pub(super) fn get_020624() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("integer base %d invalid"))
      }
      pub(super) fn get_020625() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base", 10u32)
        }))
      }
      pub(super) fn get_020620() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020621(),
          vec![get_020624(), get_020625()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020619() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020620()))
      }
      pub(super) fn get_020526() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020527(), get_020534(), get_020619()))
      }
      pub(super) fn get_020521() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("str", 9u32) },
              get_020522(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("base", 10u32) },
              get_020524(),
            ),
          ],
          get_020526(),
        ))
      }
      pub(super) fn get_020626() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ))
      }
      pub(super) fn get_020630() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_020631() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020629() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020630(), get_020631()))
      }
      pub(super) fn get_020633() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("base64_table", 6u32)
        }))
      }
      pub(super) fn get_020634() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_020632() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020633(), get_020634()))
      }
      pub(super) fn get_020628() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_020629(),
          )],
          get_020632(),
        ))
      }
      pub(super) fn get_020637() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 19u32)
        }))
      }
      pub(super) fn get_020638() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020636() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020637(), get_020638()))
      }
      pub(super) fn get_020639() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_020635() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_020636(),
          )],
          get_020639(),
        ))
      }
      pub(super) fn get_020643() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020644() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_020642() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020643(), get_020644()))
      }
      pub(super) fn get_020645() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020646() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(63f64))
      }
      pub(super) fn get_020641() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020642(),
          vec![get_020645(), get_020646()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020649() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020650() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("join"))
      }
      pub(super) fn get_020648() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020649(), get_020650()))
      }
      pub(super) fn get_020651() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![]))
      }
      pub(super) fn get_020654() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020655() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("makeArray"))
      }
      pub(super) fn get_020653() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020654(), get_020655()))
      }
      pub(super) fn get_020658() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020659() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_020657() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020658(), get_020659()))
      }
      pub(super) fn get_020660() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_020656() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020657(),
          vec![get_020660()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020663() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter '$i' not bound"))
      }
      pub(super) fn get_020662() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020663()))
      }
      pub(super) fn get_020666() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$arr", 21u32)
        }))
      }
      pub(super) fn get_020667() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("$i", 22u32)
        }))
      }
      pub(super) fn get_020665() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020666(), get_020667()))
      }
      pub(super) fn get_020670() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 20u32)
        }))
      }
      pub(super) fn get_020669() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_020670()]))
      }
      pub(super) fn get_020668() -> CoreExpr {
        CoreExpr::Array(ArrayCoreExpr::new(vec![get_020669()]))
      }
      pub(super) fn get_020664() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("i", 20u32) },
            get_020665(),
          )],
          get_020668(),
        ))
      }
      pub(super) fn get_020661() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("$i", 22u32) },
            get_020662(),
          )],
          get_020664(),
        ))
      }
      pub(super) fn get_020652() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020653(),
          vec![get_020656(), get_020661()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020647() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020648(),
          vec![get_020651(), get_020652()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020640() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![CoreLocalBind::new(
            unsafe { CoreIdent::new_unchecked("$arr", 21u32) },
            get_020641(),
          )],
          get_020647(),
        ))
      }
      pub(super) fn get_020627() -> CoreExpr {
        CoreExpr::ObjectComp(ObjectCompCoreExpr::new(
          get_020628(),
          get_020635(),
          unsafe { CoreIdent::new_unchecked("$arr", 19u32) },
          get_020640(),
        ))
      }
      pub(super) fn get_020673() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'value' not bound"))
      }
      pub(super) fn get_020672() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020673()))
      }
      pub(super) fn get_020675() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'arr' not bound"))
      }
      pub(super) fn get_020674() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020675()))
      }
      pub(super) fn get_020680() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020681() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("isArray"))
      }
      pub(super) fn get_020679() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020680(), get_020681()))
      }
      pub(super) fn get_020682() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 605u32)
        }))
      }
      pub(super) fn get_020678() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020679(),
          vec![get_020682()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020677() -> CoreExpr {
        CoreExpr::Unary(UnaryCoreExpr::new(
          CoreUnaryOperator::Not(None),
          get_020678(),
        ))
      }
      pub(super) fn get_020685() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str(
          "find second parameter should be an array, got ",
        ))
      }
      pub(super) fn get_020688() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020689() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("type"))
      }
      pub(super) fn get_020687() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020688(), get_020689()))
      }
      pub(super) fn get_020690() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 605u32)
        }))
      }
      pub(super) fn get_020686() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020687(),
          vec![get_020690()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020684() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020685(),
          CoreBinaryOperator::Plus(None),
          get_020686(),
        ))
      }
      pub(super) fn get_020683() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020684()))
      }
      pub(super) fn get_020693() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020694() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("filter"))
      }
      pub(super) fn get_020692() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020693(), get_020694()))
      }
      pub(super) fn get_020697() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("Parameter 'i' not bound"))
      }
      pub(super) fn get_020696() -> CoreExpr {
        CoreExpr::Error(ErrorCoreExpr::new(get_020697()))
      }
      pub(super) fn get_020700() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020701() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("equals"))
      }
      pub(super) fn get_020699() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020700(), get_020701()))
      }
      pub(super) fn get_020703() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 605u32)
        }))
      }
      pub(super) fn get_020704() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("i", 606u32)
        }))
      }
      pub(super) fn get_020702() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020703(), get_020704()))
      }
      pub(super) fn get_020705() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("value", 604u32)
        }))
      }
      pub(super) fn get_020698() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020699(),
          vec![get_020702(), get_020705()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020695() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![CoreFunctionParam::new(
            unsafe { CoreIdent::new_unchecked("i", 606u32) },
            get_020696(),
          )],
          get_020698(),
        ))
      }
      pub(super) fn get_020708() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020709() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("range"))
      }
      pub(super) fn get_020707() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020708(), get_020709()))
      }
      pub(super) fn get_020710() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(0f64))
      }
      pub(super) fn get_020714() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("std", 3u32)
        }))
      }
      pub(super) fn get_020715() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_str("length"))
      }
      pub(super) fn get_020713() -> CoreExpr {
        CoreExpr::MemberAccess(MemberAccessCoreExpr::new(get_020714(), get_020715()))
      }
      pub(super) fn get_020716() -> CoreExpr {
        CoreExpr::Ident(IdentCoreExpr::new(unsafe {
          CoreIdent::new_unchecked("arr", 605u32)
        }))
      }
      pub(super) fn get_020712() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020713(),
          vec![get_020716()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020717() -> CoreExpr {
        CoreExpr::Literal(LiteralCoreExpr::new_number(1f64))
      }
      pub(super) fn get_020711() -> CoreExpr {
        CoreExpr::Binary(BinaryCoreExpr::new(
          get_020712(),
          CoreBinaryOperator::Minus(None),
          get_020717(),
        ))
      }
      pub(super) fn get_020706() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020707(),
          vec![get_020710(), get_020711()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020691() -> CoreExpr {
        CoreExpr::Apply(ApplyCoreExpr::new(
          get_020692(),
          vec![get_020695(), get_020706()],
          vec![],
          false,
        ))
      }
      pub(super) fn get_020676() -> CoreExpr {
        CoreExpr::If(IfCoreExpr::new(get_020677(), get_020683(), get_020691()))
      }
      pub(super) fn get_020671() -> CoreExpr {
        CoreExpr::Function(FunctionCoreExpr::new(
          vec![
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("value", 604u32) },
              get_020672(),
            ),
            CoreFunctionParam::new(
              unsafe { CoreIdent::new_unchecked("arr", 605u32) },
              get_020674(),
            ),
          ],
          get_020676(),
        ))
      }
      pub(super) fn get_020514() -> CoreExpr {
        CoreExpr::Local(LocalCoreExpr::new(
          vec![
            CoreLocalBind::new(unsafe { CoreIdent::new_unchecked("$", 2u32) }, get_020515()),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("std", 3u32) },
              get_020516(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("id", 4u32) },
              get_020517(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("parse_nat", 5u32) },
              get_020521(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_table", 6u32) },
              get_020626(),
            ),
            CoreLocalBind::new(
              unsafe { CoreIdent::new_unchecked("base64_inv", 7u32) },
              get_020627(),
            ),
          ],
          get_020671(),
        ))
      }
      pub(super) fn get_000000() -> CoreExpr {
        CoreExpr::Object(ObjectCoreExpr::new(
          vec![],
          vec![
            CoreObjectField::new(
              get_000001(),
              CoreObjectFieldOperator::Hidden(None),
              get_000002(),
            ),
            CoreObjectField::new(
              get_000172(),
              CoreObjectFieldOperator::Hidden(None),
              get_000173(),
            ),
            CoreObjectField::new(
              get_000343(),
              CoreObjectFieldOperator::Hidden(None),
              get_000344(),
            ),
            CoreObjectField::new(
              get_000514(),
              CoreObjectFieldOperator::Hidden(None),
              get_000515(),
            ),
            CoreObjectField::new(
              get_000685(),
              CoreObjectFieldOperator::Hidden(None),
              get_000686(),
            ),
            CoreObjectField::new(
              get_000856(),
              CoreObjectFieldOperator::Hidden(None),
              get_000857(),
            ),
            CoreObjectField::new(
              get_001027(),
              CoreObjectFieldOperator::Hidden(None),
              get_001028(),
            ),
            CoreObjectField::new(
              get_001203(),
              CoreObjectFieldOperator::Hidden(None),
              get_001204(),
            ),
            CoreObjectField::new(
              get_001452(),
              CoreObjectFieldOperator::Hidden(None),
              get_001453(),
            ),
            CoreObjectField::new(
              get_001644(),
              CoreObjectFieldOperator::Hidden(None),
              get_001645(),
            ),
            CoreObjectField::new(
              get_001846(),
              CoreObjectFieldOperator::Hidden(None),
              get_001847(),
            ),
            CoreObjectField::new(
              get_002040(),
              CoreObjectFieldOperator::Hidden(None),
              get_002041(),
            ),
            CoreObjectField::new(
              get_002240(),
              CoreObjectFieldOperator::Hidden(None),
              get_002241(),
            ),
            CoreObjectField::new(
              get_002414(),
              CoreObjectFieldOperator::Hidden(None),
              get_002415(),
            ),
            CoreObjectField::new(
              get_002590(),
              CoreObjectFieldOperator::Hidden(None),
              get_002591(),
            ),
            CoreObjectField::new(
              get_002814(),
              CoreObjectFieldOperator::Hidden(None),
              get_002815(),
            ),
            CoreObjectField::new(
              get_003003(),
              CoreObjectFieldOperator::Hidden(None),
              get_003004(),
            ),
            CoreObjectField::new(
              get_003192(),
              CoreObjectFieldOperator::Hidden(None),
              get_003193(),
            ),
            CoreObjectField::new(
              get_003410(),
              CoreObjectFieldOperator::Hidden(None),
              get_003411(),
            ),
            CoreObjectField::new(
              get_003717(),
              CoreObjectFieldOperator::Hidden(None),
              get_003718(),
            ),
            CoreObjectField::new(
              get_004027(),
              CoreObjectFieldOperator::Hidden(None),
              get_004028(),
            ),
            CoreObjectField::new(
              get_004233(),
              CoreObjectFieldOperator::Hidden(None),
              get_004234(),
            ),
            CoreObjectField::new(
              get_004439(),
              CoreObjectFieldOperator::Hidden(None),
              get_004440(),
            ),
            CoreObjectField::new(
              get_004617(),
              CoreObjectFieldOperator::Hidden(None),
              get_004618(),
            ),
            CoreObjectField::new(
              get_004811(),
              CoreObjectFieldOperator::Hidden(None),
              get_004812(),
            ),
            CoreObjectField::new(
              get_005172(),
              CoreObjectFieldOperator::Hidden(None),
              get_005173(),
            ),
            CoreObjectField::new(
              get_005369(),
              CoreObjectFieldOperator::Hidden(None),
              get_005370(),
            ),
            CoreObjectField::new(
              get_005550(),
              CoreObjectFieldOperator::Hidden(None),
              get_005551(),
            ),
            CoreObjectField::new(
              get_005761(),
              CoreObjectFieldOperator::Hidden(None),
              get_005762(),
            ),
            CoreObjectField::new(
              get_005978(),
              CoreObjectFieldOperator::Hidden(None),
              get_005979(),
            ),
            CoreObjectField::new(
              get_006196(),
              CoreObjectFieldOperator::Hidden(None),
              get_006197(),
            ),
            CoreObjectField::new(
              get_006435(),
              CoreObjectFieldOperator::Hidden(None),
              get_006436(),
            ),
            CoreObjectField::new(
              get_006676(),
              CoreObjectFieldOperator::Hidden(None),
              get_006677(),
            ),
            CoreObjectField::new(
              get_006988(),
              CoreObjectFieldOperator::Hidden(None),
              get_006989(),
            ),
            CoreObjectField::new(
              get_007158(),
              CoreObjectFieldOperator::Hidden(None),
              get_007159(),
            ),
            CoreObjectField::new(
              get_007377(),
              CoreObjectFieldOperator::Hidden(None),
              get_007378(),
            ),
            CoreObjectField::new(
              get_010137(),
              CoreObjectFieldOperator::Hidden(None),
              get_010138(),
            ),
            CoreObjectField::new(
              get_010342(),
              CoreObjectFieldOperator::Hidden(None),
              get_010343(),
            ),
            CoreObjectField::new(
              get_010545(),
              CoreObjectFieldOperator::Hidden(None),
              get_010546(),
            ),
            CoreObjectField::new(
              get_010766(),
              CoreObjectFieldOperator::Hidden(None),
              get_010767(),
            ),
            CoreObjectField::new(
              get_010945(),
              CoreObjectFieldOperator::Hidden(None),
              get_010946(),
            ),
            CoreObjectField::new(
              get_011128(),
              CoreObjectFieldOperator::Hidden(None),
              get_011129(),
            ),
            CoreObjectField::new(
              get_011316(),
              CoreObjectFieldOperator::Hidden(None),
              get_011317(),
            ),
            CoreObjectField::new(
              get_011515(),
              CoreObjectFieldOperator::Hidden(None),
              get_011516(),
            ),
            CoreObjectField::new(
              get_011714(),
              CoreObjectFieldOperator::Hidden(None),
              get_011715(),
            ),
            CoreObjectField::new(
              get_011890(),
              CoreObjectFieldOperator::Hidden(None),
              get_011891(),
            ),
            CoreObjectField::new(
              get_012065(),
              CoreObjectFieldOperator::Hidden(None),
              get_012066(),
            ),
            CoreObjectField::new(
              get_012398(),
              CoreObjectFieldOperator::Hidden(None),
              get_012399(),
            ),
            CoreObjectField::new(
              get_012692(),
              CoreObjectFieldOperator::Hidden(None),
              get_012693(),
            ),
            CoreObjectField::new(
              get_012858(),
              CoreObjectFieldOperator::Hidden(None),
              get_012859(),
            ),
            CoreObjectField::new(
              get_013079(),
              CoreObjectFieldOperator::Hidden(None),
              get_013080(),
            ),
            CoreObjectField::new(
              get_013279(),
              CoreObjectFieldOperator::Hidden(None),
              get_013280(),
            ),
            CoreObjectField::new(
              get_013446(),
              CoreObjectFieldOperator::Hidden(None),
              get_013447(),
            ),
            CoreObjectField::new(
              get_013842(),
              CoreObjectFieldOperator::Hidden(None),
              get_013843(),
            ),
            CoreObjectField::new(
              get_014476(),
              CoreObjectFieldOperator::Hidden(None),
              get_014477(),
            ),
            CoreObjectField::new(
              get_014696(),
              CoreObjectFieldOperator::Hidden(None),
              get_014697(),
            ),
            CoreObjectField::new(
              get_015029(),
              CoreObjectFieldOperator::Hidden(None),
              get_015030(),
            ),
            CoreObjectField::new(
              get_015242(),
              CoreObjectFieldOperator::Hidden(None),
              get_015243(),
            ),
            CoreObjectField::new(
              get_015564(),
              CoreObjectFieldOperator::Hidden(None),
              get_015565(),
            ),
            CoreObjectField::new(
              get_015965(),
              CoreObjectFieldOperator::Hidden(None),
              get_015966(),
            ),
            CoreObjectField::new(
              get_016272(),
              CoreObjectFieldOperator::Hidden(None),
              get_016273(),
            ),
            CoreObjectField::new(
              get_016457(),
              CoreObjectFieldOperator::Hidden(None),
              get_016458(),
            ),
            CoreObjectField::new(
              get_016639(),
              CoreObjectFieldOperator::Hidden(None),
              get_016640(),
            ),
            CoreObjectField::new(
              get_017051(),
              CoreObjectFieldOperator::Hidden(None),
              get_017052(),
            ),
            CoreObjectField::new(
              get_017263(),
              CoreObjectFieldOperator::Hidden(None),
              get_017264(),
            ),
            CoreObjectField::new(
              get_017436(),
              CoreObjectFieldOperator::Hidden(None),
              get_017437(),
            ),
            CoreObjectField::new(
              get_017614(),
              CoreObjectFieldOperator::Hidden(None),
              get_017615(),
            ),
            CoreObjectField::new(
              get_017900(),
              CoreObjectFieldOperator::Hidden(None),
              get_017901(),
            ),
            CoreObjectField::new(
              get_018161(),
              CoreObjectFieldOperator::Hidden(None),
              get_018162(),
            ),
            CoreObjectField::new(
              get_018432(),
              CoreObjectFieldOperator::Hidden(None),
              get_018433(),
            ),
            CoreObjectField::new(
              get_018753(),
              CoreObjectFieldOperator::Hidden(None),
              get_018754(),
            ),
            CoreObjectField::new(
              get_018920(),
              CoreObjectFieldOperator::Hidden(None),
              get_018921(),
            ),
            CoreObjectField::new(
              get_019087(),
              CoreObjectFieldOperator::Hidden(None),
              get_019088(),
            ),
            CoreObjectField::new(
              get_019257(),
              CoreObjectFieldOperator::Hidden(None),
              get_019258(),
            ),
            CoreObjectField::new(
              get_019427(),
              CoreObjectFieldOperator::Hidden(None),
              get_019428(),
            ),
            CoreObjectField::new(
              get_019755(),
              CoreObjectFieldOperator::Hidden(None),
              get_019756(),
            ),
            CoreObjectField::new(
              get_019950(),
              CoreObjectFieldOperator::Hidden(None),
              get_019951(),
            ),
            CoreObjectField::new(
              get_020259(),
              CoreObjectFieldOperator::Hidden(None),
              get_020260(),
            ),
            CoreObjectField::new(
              get_020513(),
              CoreObjectFieldOperator::Hidden(None),
              get_020514(),
            ),
          ],
        ))
      }
    }
    token_fns::get_000000()
  }
}
